{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "cApStAn's Translation Tech Team (TTT) docs", "text": "<p>This is cApStAn's Translation Tehcnology Team's documentation site, the main focus of which is on translation technology and on tools and resources produced or used by the TTT.</p>"}, {"location": "#intended-audience", "title": "Intended audience", "text": "<p>This documentation is maintained by and meant to be used internally by cApStAn's TTT. </p> <p>Info</p> <p>Some documents might be of interest to other people, in that case the document will be shared in the appropriate location (e.g. KnowSystem in Odoo).</p>"}, {"location": "#legend", "title": "Legend", "text": "<p>Documents and section names might be preceded by some symbol or emoji:</p> <ul> <li>\u2605 or \u2606 mean that the section or document are finalized and ready for consultation -- no star means that the document or section is work-in-progress</li> <li>\ud83d\udc64 means that the document or section is apt for any reader, not only the TTT</li> <li><code>!</code> means the topic of the document needs to be reviewed and validated</li> </ul>"}, {"location": "#hiding-content", "title": "Hiding content", "text": "<p>... </p>"}, {"location": "hidden/", "title": "Hidden", "text": "<p>This is a hidden page.</p>"}, {"location": "profiles/", "title": "Profiles", "text": ""}, {"location": "profiles/#audience-tech", "title": "Audience\ua789 Tech", "text": "<ul> <li>Errors</li> </ul>"}, {"location": "profiles/#audiencetech", "title": "Audience\ua789Tech", "text": "<ul> <li>Auxiliary tools (installation)</li> <li>AutoHotKey</li> <li>TMX Editor</li> <li>OmegaT main-capstan</li> <li>Creating a signed OmegaT installer</li> </ul>"}, {"location": "profiles/#audienceuser", "title": "Audience\ua789User", "text": "<ul> <li>\ud83d\udc64 Create folder structure</li> <li>Auxiliary tools (installation)</li> <li>AutoHotKey</li> <li>OmegaT tips and tricks</li> <li>Autotext</li> <li>No-break spaces</li> </ul>"}, {"location": "tools/", "title": "Tools", "text": ""}, {"location": "capps/langtags/", "title": "Language tags: basic API \u2606", "text": "<p>You can fetch the whole list of langtag records as a JSON object. For that, you can send a GET request to the url https://capps.capstan.be/langtags_json.php. </p> <p>A future version will provide more endpoints to allow consuming exactly the piece of data needed in a single request.</p> <p>Each langtag record (a Javascript object or a Python dictionary) is a simple tabular data structure that contains all properties of a specific language variant, e.g. for Valencian:</p> <pre><code>{'BCP47': 'ca-ES-valencia',\n 'Country': 'Spain',\n 'Language': 'Valencian',\n 'Notes': None,\n 'OmegaT': 'ca-VL',\n 'PIAAC_2letter_region': 'ES',\n 'PISA': 'val-ESP',\n 'cApStAn': 'val-ESP',\n 'created_by': None,\n 'id': 265,\n 'last_modif_by': None}\n</code></pre> <p>You might not need the whole list, but for the time being there are no other endpoints that you can use, which means you need to fetch the whole resource first and then filter it and manipulate it on your end for your specific purposes.</p> <p>See below two demos with examples of some typical operations, such as:</p> <ul> <li>Get the whole list of cApStAn codes</li> <li>Get a whole tag record for a particular language variant</li> <li>Get a language tag that corresponds to another tag in a different convention (e.g. from cApStAn to OmegaT)</li> <li>Get all language tag records that have a specific language subtag</li> <li>Get all region subtags for a specific language subtag</li> </ul> <p>Examples are provided in Node.js and Python, check the appropriate section for the language you'll be using. The two REPL demos below are public so you can simply check or copy the code, or actually run it online. Check the steps in the <code>readme.md</code> file.</p> <p>To run the REPL demos online, you probably need to have a repl.it account and fork the demo first. In any case, you will have to paste the URL above, which is not hardcoded. If you fork the REPL, you may hardcode the URL in the code, but then do not publish the REPL.</p>"}, {"location": "capps/langtags/#python", "title": "Python", "text": "<p>From Python3 applicationS (e.g. Odoo?) or applications that can run Python3 code (e.g. Excel), you can obtain the langtags data with the code below:</p> <pre><code>import requests\nurl = 'https://capps.capstan.be/langtags_json.php'\nresponse = requests.get(url)\nlangtags = response.json()\n</code></pre> <p>The data obtained above will contain a Python dictionary. You can then query and manipulate the data as you need. </p> <p>In this REPL you cansee a few practical examples of what you can do with the data.</p>"}, {"location": "capps/langtags/#nodejs", "title": "Node.js", "text": "<p>From Node.js applications (or applications that can run Javascript code), e.g. Inky, you can obtain the langtags data with the code below:</p> <pre><code>import fetch from 'sync-fetch'\nconst url = 'https://capps.capstan.be/langtags_json.php'\nconst json = fetch(url, {}).json()\nconst langtags = Object.values(json) // object type\n</code></pre> <p>The data obtained above will contain a Javascript object. You can also use module <code>node-fetch</code> if you prefer to do this asynchronously.</p> <p>In this REPL you can see a few practical examples of what you can do with the data.</p>"}, {"location": "capps/langtags/#other-implementations", "title": "Other implementations", "text": "<p>Other implementations (e.g. curl) are feasible, feel free to experiment on your end. </p> <p>Here come just a couple of examples (courtesy of Mr. Mathot -) You can get the whole resource with the following command: <pre><code>curl -X GET https://capps.capstan.be/langtags_json.php | jq\n</code></pre></p> <p>Or you can get a specific langtag record with:</p> <pre><code>curl -X GET https://capps.capstan.be/langtags_json.php | jq 'map(select(.cApStAn | contains(\"fra-BEL\")))'\n</code></pre>"}, {"location": "capps/langtags/#code", "title": "Code", "text": "<p>Python and Node.js functions can be downloaded to import as modules. Available here: https://github.com/capstanlqc/langtags_basic_api.</p>"}, {"location": "capps/memoryln/", "title": "MemoryLn \u2606", "text": "<p>MemoryLn is a translation memory and glossary lookup utility. It allows you to find expressions and patterns in segments coming from completed translation projects as well as in term entries glossaries. To run a search, simply enter your search expression(s) and select the appropriate parameters (advanced search options, container, etc.).</p>"}, {"location": "capps/memoryln/#access", "title": "Access", "text": "<p>Login is handled by VegaSuite credentials. It's up to the PM who has access -- if a PM wants to give access to someone (linguist or client) who doesn't have it, they must request it. </p>"}, {"location": "capps/memoryln/#main-purpose", "title": "Main purpose", "text": "<p>MemoryLn is particularly useful in projects where linguists or users do not work on a project in a CAT that already includes the TMs and glossaries they need. In those cases, they can find translations in MemoryLn through their browser. </p>"}, {"location": "capps/memoryln/#usage", "title": "Usage", "text": "<p>You can use a number of items to restrict results in MemoryLn.</p>"}, {"location": "capps/memoryln/#search-parameters", "title": "Search parameters", "text": "Parameter Description Metadata You can select a type of metadata and its value to restrict your results. You will obtain only results that are associated to that metadata. Languages Please select the combination of the two languages where you want to find your expression. Bear in mind that your search will only be run in a language pair. Search expression(s) Enter an expression in the source language to see its context in the source language and/or how it was translated in the target language. Enter an expression in the target language to see its context in the target language and/or what was the source expression from which it was translated. Enter a pair of expressions in both the source and the target language to see whether that particular translation exists for that particular source expression, and/or their context in both languages. Container You can restrict your results by selecting the container from which they must come. A container is a organization or a project. Content type You can choose whether you run your search in glossaries, in the translation memories, or in both. Domain You can choose from which domain you want to have results (cognitive materials, questionnaires, etc.)"}, {"location": "capps/memoryln/#search-options", "title": "Search options", "text": "Option Description Wildcard Select this option if you want to use wildcards in your search, such as  <code>?</code> to match any character and <code>*</code> to match any string. Loose words Select this option if you want to match words appearing separately (e.g. <code>+main +task</code>) in the text, that is, as independent keywords to be found in different positions in the segment. By default, the search query is used as a fixed exact phrase, that is, as a sequence in the exact same order in which you have entered it (e.g. <code>main task</code>). Entire words Select this option if you want your search expression to match entire words (e.g. so that <code>to</code> matches \"to\" but not \"to\" in \"towards\") or leave it unselected it you want partial matches of longer words to be included in the results (e.g. so that <code>to</code> matches both \"to\" and \"to\" in \"towards\"). If you select this option, you will get results that include your search expression where it starts and ends with a space or a punctuation sign. Case sensitive Select this option if you want your search expression to be case sensitive, that is, to run with the same exact case used in the search query e.g. CASE \u2260 case \u2260 cAsE. By default, case is ignored. Negation Select this option if you want to find segments that do not contain the search expression, e.g. if you want to find translations in French for \"student\" that do not contain \"\u00e9l\u00e8ve\", you can search for \"\u00e9l\u00e8ve\" in the target language and select the negate option. Full segment If selected, the entire segment (from beginning to end) needs to match the search query. By default, partial matches (part of the segment) are included in the results. For example, if you select this option and search for \"early childhood\", your results will include the segment <code>Early childhood</code> but not <code>Early childhood education</code>. Regular expression Select this option if your search pattern is a regular expression (regex). Regular expressions are patterns that are interpreted in a special way (not literally) to match different strings of text that have in common the properties described by the regular expression. You need to follow the PCRE syntax. More info about regular expressions here and here is a playground."}, {"location": "capps/memoryln/#feedback-and-support", "title": "Feedback and support", "text": "<p>Any feedback would be greatly appreciated, feel free to contact us. Also, should you still have any difficulties or questions, do not hesitate to contact us and we will do our best to help you.</p>"}, {"location": "capps/memoryln_tm_mngmt/", "title": "MemoryLn -- TM management \u2606", "text": "<p>Putting content in MemoryLn serves two purposes: one is that linguists or any stakeholder can look up translations and terminology, another one is to gradually build a corpus that we can use for other tasks in the long run, such as doing language research or NLP tasks (e.g. MT training), etc. </p> <p>If our data is scattered we might be wasting potential for data-powered tasks, and that's the reason why archiving the final TMs of each project should be one of the mandatory steps in the PM's checklist, without which the project cannot be considered closed.</p> <p>This guide describes the life cycle of translation memories (TM), from their creation up to how they can be used, using MemoryLn both as repository and lookup tool.</p>"}, {"location": "capps/memoryln_tm_mngmt/#roles-and-responsibilities", "title": "Roles and responsibilities", "text": "<p>Several roles are involved in TM management: </p> Role Person Responsibility Project manager (per-project) owner of the project and its language assets, and therefore responsible for managing them appropriately, with the support of the tech team (TT). Container manager Laura#?/Valentina responsible for creating glossaries and TMs upon PM's request or upon their own initiative whenever appropriate. The PM is encourage to as a member of the TT to play this role but might designate someone else if they feel confident. Language\u00a0asset\u00a0manager ? /Valentina? responsible for creating containers in cApps' Containers Manager whenever appropriate and adding details (description, tages, etc.) Language\u00a0code\u00a0manager Steve/Manuel responsible for creating and maintaining language codes"}, {"location": "capps/memoryln_tm_mngmt/#summary", "title": "Summary", "text": "<p>The next steps must be followed:</p> <ol> <li>Check that the container exists in the Containers Manager and check with the container manager if you can't find it there.</li> <li>Check that the language version exists in the Language code finder and check with the language codes manager if you can't find it there.</li> <li>Ask the language asset manager of the project (preferably, a TT member) to create the TMX files.</li> <li>Put TMX files in the container folder in Ur.</li> </ol>"}, {"location": "capps/memoryln_tm_mngmt/#creating-tms", "title": "Creating TMs", "text": "<p>TMs can be created in different ways, depending on the starting point:  - OmegaT: press Ctrl+D from the project in question (or <code>console-translate</code> the project) - memoQ or Trados: use the relevant export options - Excel/CSV: use TMX Editor or the <code>conv_xls2tmx.py</code> script - alignment: use LF Aligner, Paralela or any other CAT tool's alignment module.</p> <p>If you must convert one spreadsheet (for one language pair) to one TMX file, TMX Editor is a very useful tool. If you have a multilingual spreadsheet, however, the <code>conv_xls2tmx.py</code> script, however, is going to be more efficient (all TMX files are generated in one go if the spreadsheet has the expected format).</p> <p>It goes without saying that the TMX file must be well-formed and valid according to XML syntax and type definition.</p> <p>The activity of creating TMs to be uploaded to MemoryLn must observe some constraints:  + TMX filename patterns + Language tags</p>"}, {"location": "capps/memoryln_tm_mngmt/#tmx-filename", "title": "TMX filename", "text": "<p>The file name of the TMX file is meaningful, in the sense that information is obtained from it and the file is handled diferently depending on its name. Elements can be many (e.g. organization/client, container, project or project  cycle, unit identifier, unit name, target language code, source language, etc.) depending on each particular case, of which only two are mandatory:</p> <ul> <li>the name of the container, e.g. <code>PISA</code> (not the project cycle, e.g. <code>PISA2018</code>, though)</li> <li>the target language code as per cApStAn\u2019s convention.</li> </ul> <p>Before you can use an XML language tag or a language code, an entry for that language version needs to exist in the Language code finder. If you can find your language version there, please ask the language code manager to create it. </p> <p>The source language could optionally be indicated if deemed necessary (e.g. if different from English). Only the language tag is necessary.</p> <p>The different elements in the file name must always be separated by underscore. For example: <code>PISA_eng-USA_MAT_M033-AViewRoom_eng_MS2015.tmx</code>.</p>"}, {"location": "capps/memoryln_tm_mngmt/#other-language-code-conventions", "title": "Other language code conventions", "text": "<p>Other organizations or tools normally have different language codes. If you produce TMX files that inherit a filename with language codes in other conventions, the language code must be converted to cApStAn\u2019s convention.</p> <p>For TMX files converted from PISA XLIFF files, or for PISA files in general, many language codes match cApStAn's  convention, but some differ, so those must be converted. For example, files with  <code>cym-QUK</code> in their name need to be renamed to use <code>cym-GBR</code> instead. </p>"}, {"location": "capps/memoryln_tm_mngmt/#internal-language-tags", "title": "Internal language tags", "text": "<p>The TMX file's internal language code must follow our convention for OmegaT projects. For example, for Dubai's Arabic, use <code>ar-DU</code>, rather than <code>ar-AE-dubai</code> (BCP-47) or <code>ara-UAE</code> (cApStAn/PISA).</p> <p>For the target language, the full language tag must be used. However, for the source language only the language subtag is needed, since MemoryLn ignores anything else after the language subtag (there\u2019s only <code>en</code> and <code>fr</code> in the list above) -- although the full language tag (e.g. <code>en-US</code>, <code>en-GB</code>, <code>en-ZZ</code>) should work just fine too.</p>"}, {"location": "capps/memoryln_tm_mngmt/#language-tag-checklist", "title": "Language tag checklist", "text": "<p>To minimize the number of issues that need to be fixed later, please remember the following guidelines with regards to language codes when you create TMX files:</p> <ol> <li>The expected order is language subtag, then region subtag: <code>fr-BE</code>is okay, but <code>be-FR</code> or <code>BE-fr</code> are not. </li> <li>The character that separates the two or more subtags in a language tag is a hyphen: <code>fr-BE</code> is OK, but <code>fr_BE</code> is not.</li> <li>Please use the same case as you see in the Language code finder: language subtag in lower case, region subtag in upper case, etc.</li> <li>Indicate the source-language code in the <code>srclang</code> attribute of the <code>header</code> node of the TMX file.</li> <li>The value of the <code>header/@srclang</code> attribute must match the value of the <code>@lang</code>  attribute of the source-language <code>tuv/seg</code> nodes.</li> </ol> <p>For MemoryLn, case (point 3 above) doesn't actually really matter, since to avoid mismatches due to different case all language codes are lower-cased before running searches. However other applications might rely on case to match language codes, and it's also better to be visually consistent with the language code used in the filename (especially considering we used to have the opposite order, i.e. <code>CCC-lll</code>).</p>"}, {"location": "capps/memoryln_tm_mngmt/#adding-tms-to-memoryln", "title": "Adding TMs to MemoryLn", "text": "<p>The PM has full access to how TMX files and can decide how TMs are organized.</p>"}, {"location": "capps/memoryln_tm_mngmt/#location-in-the-server", "title": "Location in the server", "text": "<p>Once they are created, TMX files must be put in their corresponding container folder in Ur. The path to the container folder in Ur would be <code>/media/data/data/company/R&amp;D/05_LangAssets/01_TMs/MemoryLn/[CONTAINER]</code> (which is probably accessible as <code>U:\\R&amp;D\\05_LangAssets\\01_TMs/MemoryLn\\[CONTAINER]</code> on your Windows machine).</p> <p>Before you can put TMX file in its container folder in Ur, the container must have been created in the Containers Manager. If you can't find your container there, please check with the container manager.</p>"}, {"location": "capps/memoryln_tm_mngmt/#tm-maintenance", "title": "TM maintenance", "text": "<p>Attention points for the language asset manager:</p>"}, {"location": "capps/memoryln_tm_mngmt/#penalties", "title": "Penalties", "text": "<p>It is possible to apply a penalty to a TM, which will reduce the matching score in MemoryLn as in OmegaT. Reducing the matching score in MemoryLn means that results from that TM will appear below results that have a higher score. The penalty in MemoryLn is applied to the TMX file, not the match.</p> <p>This can be useful when TMs for a new cycle are released and should be given priority over older TMs for previous cycles, or it can be useful to distinguish between high-quality TMs and those that are less reliable for whatever reason -- the way to give priority to new assets is to penalize old assets. </p> <p>The procedure to apply penalties is the same as in OmegaT. For TMs in folders with a name <code>penalty-xxx</code> (<code>xxx</code> being a number between 0 and 100), matches will be degraded according to the name of the folder: a 100% match residing in a folder called, say, <code>penalty-30</code> will be lowered to a 70% match. </p>"}, {"location": "capps/memoryln_tm_mngmt/#sanity-checks", "title": "Sanity checks", "text": "<p>When TMX files are added to the container folder, the overhaul_langtags_in_tmx.sh script will run on them to detect any possible problems in the constraints described above. </p> <p>If any issues are found, they will be reported in a issues file with the date of that day (e.g. <code>issues_2021-09-22.txt</code>), and a monthly issues file is compiled with all issues found that month and in previous months that haven't been solved yet.</p> <p>The actions required are - check for any issues file for that day or that month - read each line in the issues file and see what is wrong - fix every issue (or ask TT to do it, if you are not 100% sure) - delete the issues file of that day - verify one hour or one day later that the issue is not flagged again</p>"}, {"location": "capps/memoryln_tm_mngmt/#metadata-clean-up", "title": "Metadata clean up", "text": "<p>To avoid making TMX files unnecessarily heavier, empty properties can be removed. For example: <pre><code>&lt;prop type=\"client\"/&gt;\n&lt;prop type=\"domain\"/&gt;\n&lt;prop type=\"project\"/&gt;\n&lt;prop type=\"subject\"/&gt;\n</code></pre> You might also want to remove some non-empty properties if they are irrelevant: </p> <pre><code>&lt;prop type=\"corrected\"&gt;no&lt;/prop&gt;\n&lt;prop type=\"aligned\"&gt;no&lt;/prop&gt;\n&lt;prop type=\"x-document\"&gt;en.json&lt;/prop&gt;\n&lt;prop type=\"x-context\"&gt;examSessionModal.okButton&lt;/prop&gt;\n</code></pre> <p>The same applies to proprietary metadata (added by some commercial CAT tool) that both MemoryLn and OmegaT ignore, such as namespaced tags, e.g. <code>&lt;mq:foo&gt;</code>.</p>"}, {"location": "capps/veryfire/", "title": "Veryfire \u2606", "text": "<p>Veryfire is a quick and dirty prototype with preliminary functionality with the aim to prove the feasibility of the approach (integrating an automated QA routine in VegaSuite).</p> <p>This documentation describes how to run Veryfire, how it works internally, what requirements the input files must meet and how to handle the output, as well as the instructions to run and understand a demo. A brief development history is also given, followed by a wishlist and a list of issues to be resolved. </p>"}, {"location": "capps/veryfire/#input-data", "title": "Input data", "text": ""}, {"location": "capps/veryfire/#projects-and-file-types", "title": "Projects and file types", "text": "<p>Veryfire can parse and analyze bilingual documents, such as Excel 2007/2011 workbooks/spreadsheets with source and target languages in two columns and generic XML-based files such as translated XLIFF and bilingual TMX. Such files can be submitted individually (one by one) or in zipped batches (in .zip format, but not .rar or other) containing only files, not a hierarchy of folders.</p> <p>It is also possible to send batches of XML files exported from the PISA Portal. In that case, the zipped batch must contain two folders (one with the master/source files, another one with the target files) and a file with the correspondence between source and target files. Each target file must have the same structure as its corresponding master/source file, and the correspondences file must include those folders in the path to the files. See the example below, for target language xxx-XXX and for a zip file that contains folders \"Master\" and \"xxx-XXX\": </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Batch&gt;\n&lt;file id=\"1\"&gt;\n&lt;source lang=\"Master\"&gt;Master/file1_source.xml&lt;/source&gt;\n&lt;target lang=\"xxx-XXX\"&gt;xxx-XXX/file1_target.xml&lt;/target&gt;\n&lt;/file&gt;\n&lt;file id=\"2\"&gt;\n&lt;source lang=\"Master\"&gt;Master/file2_source.xml&lt;/source&gt;\n&lt;target lang=\"xxx-XXX\"&gt;xxx-XXX/file2_target.xml&lt;/target&gt;\n&lt;/file&gt;\n&lt;file id=\"n\"&gt;\n&lt;source lang=\"Master\"&gt;Master/filen_source.xml&lt;/source&gt;\n&lt;target lang=\"xxx-XXX\"&gt;xxx-XXX/filen_target.xml&lt;/target&gt;\n&lt;/file&gt;\n&lt;/Batch&gt;\n</code></pre>"}, {"location": "capps/veryfire/#file-name-and-parameters", "title": "File name and parameters", "text": "<p>To reduce the need to have explicit input from the user through the upload interface, parameters such as the kind of task (verification or translatability assessement), the project (PISA, INVEDUC, ESENER, etc.) and the locale (or language variant) are fetched from the file name. At this stage, the correct functioning of the utility therefore relies on the submitted files being named correctly (include those data).</p> <p>Thus, the automatic extraction of parameters from the file name requires that it comply with the following structure: <code>(Date_*_)(Client_*_)PROJECT_*_Task_ccc-LLL(_*).xxx</code>, where:</p> <ul> <li>parenthesis, i.e. (), encircles optional elements, e.g. the date is optional;</li> <li>the star, i.e. *, stands for anything;</li> <li>the different elements are separated by underscore (i.e. _), in contrast with using the hyphen to separate different parts of one element (e.g. ESENER-2 or esp-GLG);</li> <li>currently <code>PROJECT</code> can be PISA, ESENER, ESENER-2 or INVEDUC (any other project must be notified) and the correct case must be used (e.g. PISA is correct, Pisa is not);</li> <li><code>ccc-LLL</code> is the locale[1], aka language variant (language and country, e.g. eng-IRL for English from Ireland, except for PISA projects, which use an inverted order, e.g. irl-ENG), only relevant or necessary for translated files;</li> <li>the <code>task</code> can be either Translation, Adjudication, Verification or Translatability (any other task must be notified); and</li> <li><code>.xxx</code> is the file extension: .xlf for XLIFF, .tmx for TMX, .xls or .xlsx for Excel and .zip for zipped batches.</li> </ul> <p>For example:</p> <ul> <li>131222_TNS_INVEDUC_translatability.xlsx</li> <li>PISA_glg-ESP_FNL_F001-CostsOfRunningACar_eng_4-Verification.xlf</li> <li>140118_ESENER-2_TAFF_esp-ESP_Adjudication3.xlsx</li> </ul> <p>[1] Two three-digit ISO codes (one for language, one for the country) separated by hyphen are expected, in compliance with cApStAn's locale-coding protocol, e.g. eng-IRL is correct, en-IR or eng_IRL are not. </p>"}, {"location": "capps/veryfire/#analyzed-data", "title": "Analyzed data", "text": "<p>In the case of XLIFF files, all segments will be analyzed. PISA 2015 XML files will have analyzed only nodes containing text. In the case of Excel files, by default the first worksheet will be analyzed, so you must either make sure that any other worksheets are added after the one containing the translation, or change the default parameter in the user interface. </p> <p>\u26a0\ufe0f Bear in mind that hidden columns are also counted. If you are unsure whether your worksheet has hidden worksheets, you can check the worksheet's document properties, which will show all worksheets from first to last. For example, in Microsoft Excel 2013, you will find the sorted list of worksheets at File &gt; Info &gt; Properties &gt; Advanced properties &gt; Contents tab. If you need to unhide a worksheet to reorder them, you can do so by right-clicking any worksheet's tab and choosing Unhide (in Excel) or going to Format &gt; Sheet &gt; Show (in Calc).</p> <p>The columns considered by default are A for the source language and B for the target language, regardless of the intervention stage (translation, adjudication or verification), but they can also be changed in the user interface when submitting files.</p> <p>In a nuthsell, default settings for spreadsheets are:</p> <ul> <li>Worksheet: 1</li> <li>Source language: col. A</li> <li>Source language: col. B</li> </ul> <p>If you need to change these default parameters, check the instructions below about selecting options in the upload interface. </p>"}, {"location": "capps/veryfire/#user-interface", "title": "User interface", "text": "<p>In order to submit a file and obtain a QA report, you need to follow the next steps. On the user interface, you will see a form with an upload button and a list of options:</p> <p></p>"}, {"location": "capps/veryfire/#options", "title": "Options", "text": "<p>You must review all options to make sure they are correct, or modify any option as appropriate to suit your needs.</p>"}, {"location": "capps/veryfire/#input-structure-excel-only", "title": "Input structure [Excel only]", "text": "<p>If the input file you submit is an Excel workbook, columns A and B from the first worksheet will be analyzed by default, as explained in the section about analyzed data above. If those default parameters do not correspond to the structure of the Excel workbook you want to submit, you must select the correct ones in this option's dropdown menus before submitting the file. Bear in mind that hidden columns are also counted. </p> <p></p>"}, {"location": "capps/veryfire/#output-format", "title": "Output format", "text": "<p>You may select whether you want to obtain the report in the form of an Excel workbook or as a HTML table. The Excel report is faster to produce, but you need to download it and open it with Excel. On the other hand, the HTML report is slower (especially for large input files), but it will be displayed to you on your browser and there's nothing to download.</p> <p></p> <p>When sending batches of several files, a separate report will be issued for each file contained in the zipped batch. </p>"}, {"location": "capps/veryfire/#select-checks", "title": "Select checks", "text": "<p>If you do (not) want to have certain kind of checks included in the report, you may (un)select the associated function in the menu below:</p> <p></p> <p>A specific ruleset will be applied if its name contains any of the selected rule-based functions above.</p>"}, {"location": "capps/veryfire/#upload-form", "title": "Upload form", "text": "<p>After you have made sure that all options correspond to your preferences, click on the \"Select file\" (in Mac) or \"Browse\" (in Windows) button to browse your machine and select the file that you want to submit to Veryfire. After that, press \"Go fire!\".</p> <p></p>"}, {"location": "capps/veryfire/#encoding-checks", "title": "Encoding checks", "text": "<p>This section is not really strictly speaking necessary to run Veryfire, but understanding how the tool works may help users realize how to interpret results better or what is possible to check and what is not, and consequently be more accurate when requesting new checks or rules to be created.</p>"}, {"location": "capps/veryfire/#qa-functions-and-rules", "title": "QA functions and rules", "text": "<p>Three concepts are important to understand how Veryfire works: rules, rulesets and QA functions.</p>"}, {"location": "capps/veryfire/#qa-functions", "title": "QA functions", "text": "<ul> <li>They are the parts of the programme that perform checks on each translation unit. Some functions are self-contained and do not need any other input than the translation unit. These functions perform generic checks. On the other hand, other QA functions are a sort of empty template that perform different checks based on the information provided by the rule that is associated with them, but always do so in the same way. Therefore, they perform rule-based checks.</li> </ul>"}, {"location": "capps/veryfire/#rules", "title": "Rules", "text": "<ul> <li> <p>They are the containers of some specific and variable patterns that must be searched for in translation units (either in the source and the target, or only in the target regardless of the source). A pattern may be literal (matching only itself) or more general, using wildcards or regular expressions (matching any actual text that corresponds to the generalization of the pattern).</p> </li> <li> <p>Apart from the patterns, rules include other pieces of data, such as the \"check type\", which tells the algorithm what QA function must be used for that rule; the comment that must be included in the report with the error found by that rule; and then a series of options that alter the check in some way or another (which aren't yet fully implemented, however, some of them being just hard-coded in the function for the time being).</p> </li> <li> <p>Examples of those options are: match something just once or as many times it appears in the other language, match with case sensitivity, match words between word boundaries such as spacing and punctuation or match substrings anywhere in the text, use memoQ-style wildcards, interpret the rule pattern as regular expression or as a literal, etc.).</p> </li> </ul>"}, {"location": "capps/veryfire/#rulesets", "title": "Rulesets", "text": "<ul> <li>Rules are organized/grouped in rulesets, according to the kind of issue they address (placeables, punctuation, etc.). Rulesets are files containing a set of rules, although if rules are stored in a database, the concept of rulesets will disappear and rules will be grouped by some common property. The aim of rulesets is, therefore, simply to store the rules.</li> </ul>"}, {"location": "capps/veryfire/#generic-and-rule-based-checks", "title": "Generic and rule-based checks", "text": "<p>As can be inferred from the previous section, two different kinds of checks or check types are possible in Veryfire. On the one hand, generic checks are language- and project-independent and need no input from rules, as they always perform the same action regardless of everything else. For example, the \"empty target\" function checks that the translation has some content. On the other hand, rule-based checks may be specific to a locale and/or to a project and rely on the patterns provided in the rule and applied by the function. See section Select checks above.</p>"}, {"location": "capps/veryfire/#qa-functions-and-check-types", "title": "QA functions and check types", "text": "<p>The following QA functions perform generic (rule-independent) checks. If the option is selected, that check will be performed on all files submitted.</p> Check Explanation Empty target Checks that, if the source version has some content, the translation must also have some content. If empty or composed of only spacing, an error is reported. Unaltered segment Checks whether the translation is identical to the source version, and if so, flags the translation, also reporting whether the spacing and punctuation are also identical. Unaltered words Checks whether any of the words from the source version (except those included in an open list of exceptions) appears in the translation. If that's the case, it flags the translation. Segment consistency Checks whether the translations of all occurrences of a repeated source language version are identical. If any variants are found, they are flagged. Expansion rate Function not fully developed yet: Checks whether the extension of the translation is considered acceptable in relation to the source language segment according to what the parameters for that specific target language. Spell check Function not fully developed yet: Checks whether every word is recognized by the Hunspell spell checker. If that's not the case the word is flagged. <p>On the other hand, the following rule-dependent check types apply rules which are stored in the rulesets. If the option is selected, rules stored in rulesets containing tagged with the name of the check type in question will be performed on all submitted files.</p> Check types Explanation Placeables These rules check consistency in the translation of terminology or similar linguistic units. Glossary These rules check consistency in the tranlsation of terminology or similar linguistic units. Punctuation These rules check that puntuation is correct according to the target-language conventions or according to the punctuation in the source-language segment. Spacing These rules check that puntuation is correct according to the target-language conventions or according to the punctuation in the source-language segment. Miscellanea These rules check for the correct translation of aspects other than terminology, placeables, spacing or punctuation. LanguageTool Calls the LanguageTool Style and Grammar Check and reports its findings."}, {"location": "capps/veryfire/#rule-based-qa-functions-technical-info", "title": "Rule-based QA functions (technical info)", "text": "<p>You don't need the following information if you are just a normal user. If you're not interested in understanding how Veryfire's internal engine works, you may skip this section.</p> <p>Each rule provides the information that a QA function applies. The existing QA functions are the following:</p> QA\u00a0function Explanation Delimiters Checks that the special characters at the beginning and the end of a placeholder are maintained in the translation. Useful to flag mishandling of placeholders whose content must be edited without altering the encapsulating characters. Untranslatable Checks that the word matched by the pattern, if present in the source, is also present in the target in identical form. Otherwise, an error is reported. SameNum Checks that the entity matched in the source by the pattern provided appears in the target as many times as it appears in the source. If it appears more times, less times or none, an error is reported. Glossary Checks that if a given entity/pattern is found in the source, then another given entity/pattern must be found in the translation. If not found, an error is reported. This function is typically used for term consistency checks (for which a glossary and some form of tokenization is necessary) but it can be used as well for any other kind of entity (e.g. punctuation, etc.). Blacklisted Checks that if a given entity is found in the source, then another given entity must not be found in the translation. If found, an error is reported. BackReference This complex function checks that, if a given pattern is found in the source, some part of that pattern is captured and used as part of the pattern that must be found in the translation. If the target pattern (including part of the text matched by the source pattern) is not found in the translation as many times as in the source, an error is reported. ForeReference This complex function checks that, if a given pattern is found in the translation, some part of that pattern is captured and used as part of the pattern that must be found in the source version. If the source pattern (including part of the text matched by the target pattern) is not found in the source version as many times as in the translation, an error is reported."}, {"location": "capps/veryfire/#glossaries", "title": "Glossaries", "text": "<p>Term consistency checks are based on glossaries, and therefore to check consistency in the use of terminology requires the creation and maintenance of glossaries.</p> <p>Ideally, terms or expressions should be included in the glossary in their lexematic or dictionary form and without any ancilliary morphosyntactical elements (e.g. articles) which are not really part of the expression and are bound to vary in different contexts. For example, the entry \"works council\" would be better than \"A works council\", which wouldn't match the occurrences \"the works council\", \"our works council\", etc. Of course, this general recommendation can be overlooked if necessary (e.g. in the case of fixed expressions, or if we want to ensure back-consistency in future projects).</p> <p>Terms should be in singular form, unless they are lexicalized plurals and always appear in the plural only (e.g. risks and hazards). For example, \"psychosocial risks\" -&gt; should be \"psychosocial risk\". Otherwise only occurrences in plural will be matched. Also, unless it is a proper noun or a sentence, a term should be spelled in lower case. For example, \"Time pressure\" should be included as \"time pressure\" in the glossary. At the moment, the term check is case-insensitive but going forward it will be sensitive. And vice versa: perhaps \"very difficult\" should be \"Very difficult\" because it is a response option.</p> <p>Bear in mind that different language variants are like different languages altogether for Veryfire.</p>"}, {"location": "capps/veryfire/#execution", "title": "Execution", "text": "<p>Upon submission of file(s) and the parameters selected in the upload interface, each file is parsed and analyzed separately (if there's only one file, this is done once only) and all translation units are extracted therefrom. On the other hand, based on the project and locale parameters included in the file name, a set of rulesets is selected and each active rule from each ruleset is applied to each translation unit from the file. If the rule finds an error, all the rule-related and translation unit-related data is included in one new row in the report. After applying all rules on all translation units, the report is complete and is printed to the screen or ready for download.</p>"}, {"location": "capps/veryfire/#output-data", "title": "Output data", "text": "<p>When you run Veryfire, you will obtain different kinds of information:</p> <ul> <li>Admin data</li> <li>Rules used</li> <li>Report</li> </ul> <p>The administrative information will include date and time of the execution, the file name being analyzed, the locale, the name of the project, and the selected checks. The list of rulesets will include the names of those selected depending on the locale and the project info. See next section about the information included in the report (which is named as <code>{PROJECT}_{lll-CCC}_{filename}_ {YYYYMMDD}_VF{VF_VERSION}rpt.xlsx</code>).</p>"}, {"location": "capps/veryfire/#information-in-the-report", "title": "Information in the report", "text": "<p>The report contains the following columns:</p> Field Explanation Error This is simply the error number, for future reference in that report. By default, the rows in the report are sorted by this number. Row/Segment/itemGroup Indicates the row's number (in an Excel sheet) or the segment's number (in an XLIFF file) or the itemGroup's ID (in an XML file exported from the PISA portal) for easy location of the error to be fixed or considered. Ruleset:RuleID States the name of the ruleset that contains the rule that has detected the error, followed by the number of the rule after a colon. This information is necessary for debugging rules. Function:Pattern For rule-based checks, it indicates what function or category applies, followed by what pattern has been searched for. This information is necessary for debugging rules. For generic checks, it just indicates the name of the function. Source segment Indicates the source language segment of the translation unit, with the matched expression highlighted in blue, if found. Target segment Indicates the target language segment of the translation unit, with the matched expression highlighted in blue, if found. Comment Describes the issue and potentially includes some recommendation for fixing it. If the rule contains a comment, this is the comment included in the report. Otherwise, a default message is printed."}, {"location": "capps/veryfire/#feedback-and-support", "title": "Feedback and support", "text": "<p>Any feedback would be greatly appreciated, feel free to contact us. Also, should you still have any difficulties or questions, do not hesitate to contact us and we will do our best to help you.</p>"}, {"location": "capps/vf4ta/", "title": "VF4TA \u2606", "text": ""}, {"location": "capps/vf4ta/#how-to-run-veryfire-for-ta", "title": "How to run Veryfire for TA", "text": "<p>Submit your input file to the latest version of Veryfire. The file you submit must meet certain requirements: </p> <ul> <li>It must be an Excel file. </li> <li>The source text must be in the first column of the first worksheet, starting after the third row. </li> <li>The file name must contain the word <code>_translability_</code>. </li> </ul> <p>You can use the following test file to test Veryfire for TA, or as a template where to paste your source text. </p>"}, {"location": "capps/vf4ta/#how-veryfire-for-ta-works", "title": "How Veryfire for TA works", "text": "<p>Veryfire for TA is triggered when files for TA are submitted: Veryfire looks for the word <code>_translability_</code> in the input file: if it's found, TA rules rather than QA checks are applied. So all existing rules are applied, regardless of the project. </p> <p>Some checks are generic: <code>FindSemanticCorrespondence</code>, <code>Semiidenticalness</code>, etc. Other checks are rule-based, and rules can be based on previous corrections or on style guides (see for example a ruleset based on CIPFA's English style guide). </p>"}, {"location": "capps/vf4ta/#how-to-provide-content-for-creating-rules", "title": "How to provide content for creating rules", "text": "<p>Veryfire reads rules that must have a certain structure:</p> Col. Title Description A Active active if empty, inactive if \"#\" B Expression the pattern you want to match C Category the category that VF4TA must choose D CheckType Translatability (always) F-J Options they can be confusing for you and the PMs, so we can go into them later (not so important right now) K Comments The comment you want the reader of the TA report to see (explaining why the expression has been flagged) L Suggestion Alternative wording suggested M OrigProj the project where these expressions should be found if one day we select rules by project. N DevNotes I write here my notes about the creation of the rule, if any, and you can also leave there notes for me <p>The user or the PM should provide an almost ready file, where literal matches need no intervention from my side, whereas patters to be more generic (e.g. \"Which (one/two\u2026)?\") will be refined so that the match works. You could use this template.</p> <p>To streamline the process, please observe the following recommendations.</p>"}, {"location": "capps/vf4ta/#structure-of-the-ruleset", "title": "Structure of the ruleset", "text": "<ul> <li>Line breaks should be avoided within cells. </li> <li>No merged cells please \u2013 that makes it difficult to work with spreadsheets or CSV files (e.g. to import to the database). </li> <li>About rows in the file that classify the rest of the rows (and have a Roman number in column A): please remove them, or include that info at the end of the file in an extra column. </li> </ul>"}, {"location": "capps/vf4ta/#separate-data-items-clearly", "title": "Separate data items clearly", "text": "<ul> <li>No metalinguistic information in the cell that contains the pattern (e.g. POS: <code>value(verb)</code>, <code>access(verb)</code>) or anywhere else (except perhaps column <code>N/DevNotes</code>).</li> </ul>"}, {"location": "capps/vf4ta/#special-characters-conventions", "title": "Special characters / conventions", "text": "<ul> <li>You will have to specify what special characters mean (or we can agree on some conventions). For example, in <code>[This] includes [followed by an enumeration]</code>, what do the square brackets mean? </li> </ul>"}, {"location": "capps/vf4ta/#patterns", "title": "Patterns", "text": "<ul> <li>In the cases where the expression is meant to match a pattern, it would help me have the different examples that the expression is meant to match. Ideally, we should import the translations into ML, where I can run searches and get a good idea of what needs to be matched and what needs not. </li> </ul>"}, {"location": "capps/vf4ta/#placeholders", "title": "Placeholders", "text": "<ul> <li>If the expression is meant to match several options, you should indicate so. For example, I assume <code>take someone or something at face value</code> is not a literal match, but instead it should match \"take someone at face value\" or \"take something at face value\" or even \"take ... at face value\". If that's the case, you should provide an expression like <code>take (someone/something/*) at face value</code>. You shouldn't leave that to my discernment, because I might overlook it. </li> <li>If there are more than one term that should be matched by the same expression, include them in the same cell, not in different columns (and you can use the VF glossary wildcard syntax to separate them, e.g. <code>accountable;accountability</code>, or <code>accountab*</code>, depending how specify you want to be, or leave me the choice: <code>accountable/accountability</code>). In some cases, you might want to have different rows, e.g. for \"actual\" and for \"actualise\". </li> </ul>"}, {"location": "capps/vf4ta/#results", "title": "Results", "text": "<p>You can see the results in the HTML report or, if you are using Veryfire as a 3rd or 4th linguist, you should then use the merged report. </p> <p>Any feedback would be greatly appreciated. Feel free to contact us.</p>"}, {"location": "capps/xdiff/", "title": "xDiff \u2606", "text": "<p>This documentation describes how to use xDiff to obtain diff reports that show the difference between two versions of a text. A number of different file formats (or collections of files) can be submitted to xDiff, either through the web inteface or as a background process from the server <code>Ur</code>.</p>"}, {"location": "capps/xdiff/#1-web-interface", "title": "1. Web interface", "text": "<p>If you visit xDiff, you will see a series of tabs which will display sections for defining or viewing:</p> <ul> <li>the settings</li> <li>the upload type</li> <li>all existing reports</li> </ul>"}, {"location": "capps/xdiff/#11-settings", "title": "1.1. Settings", "text": "<p>To modify the settings, click on the Settings tab (the first tab). You can modify the following settings:</p>"}, {"location": "capps/xdiff/#display", "title": "Display", "text": "<p>You can choose whether you want to see rows or segments that have changed, or the ones that haven't changed, or both. </p>"}, {"location": "capps/xdiff/#12-upload-types", "title": "1.2. Upload types", "text": "<p>You can upload different formats. To upload each format, click on the tab for the file format that you want to upload.</p> <p>The expected input consists of text pairs (typically two versions/stages of the same translation), i.e. two versions of the same text, which can be two columns in a spreadsheet, two XLIFF files, two batches of XLIFF files or two OmegaT project packages. </p>"}, {"location": "capps/xdiff/#excel-file", "title": "Excel file", "text": "<p>If you want to compare two columns in a spreadsheet containing, say, a translation and an edited/verified version of that translation, select the number of the worksheet you want to analyze, and the column letters that correspond to the source text, the original translation and the modified translation. Then, simply press Compare files.</p>"}, {"location": "capps/xdiff/#two-xliff-files", "title": "Two XLIFF files", "text": "<p>If you want to compare two XLIFF files, you can upload the two files separately. Simply upload the two files, first the original and then the modified file, and press Compare files.</p>"}, {"location": "capps/xdiff/#a-batch-of-parallel-xliff-files", "title": "A batch of parallel XLIFF files", "text": "<p>If you want to submit a set of XLIFF files and their corresponding modified versions, you can upload just one zip file containing all the files, which must be organized as follows. The zip file must contain: </p> <ul> <li>A folder containing the original files</li> <li>A folder containing the modified files</li> <li>An Excel spreadsheet indicating the correspondences between the files from the two folders</li> </ul> <p>To prepare the zip file, proceed as follows: </p> <ol> <li>Create two folders and name them as you wish, e.g. Old and New, Original and Modified, Translation and Verification, etc.</li> <li>Put the original files in the first folder, and the modified files in the second folder.</li> <li>Create an Excel file and name it <code>correspondences.xlsx</code>. In this file, in the first row of the first worksheet, add the names of the folders: the first folder in the first cell (A1), and the second folder in the second cell (A2). The first two cells of the spreadsheet must contain the names of the two folders. </li> </ol> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If the base name of the modified files is the same as the original files plus some addition (e.g. <code>PISA_srp-SRB_SCI_S514_eng_FT2018_TRANSLATED.xlf</code> vs <code>PISA_srp-SRB_SCI_S514_eng_FT2018_VERIFIED.xlf</code>), you don't need to do anything else (see an example). </p> <p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If the base name of the two files is not the same, then you need to fill in the two columns with the names of the files. For example:</p> <p> </p> <ol> <li>Zip the two folders and the correspondences file together, and name it as you wish.</li> <li>Simply upload the zip file.</li> </ol>"}, {"location": "capps/xdiff/#two-omt-packages", "title": "Two OMT packages", "text": "<p>If you want to compare two OmegaT packages, simply drag and drop the two packages individually and press Compare files.</p>"}, {"location": "capps/xdiff/#13-list-of-existing-reports", "title": "1.3. List of existing reports", "text": "<p>The Reports tab lists the latest 100 reports for containers and target languages that the user credentials give access to.</p>"}, {"location": "capps/xdiff/#2-background-service", "title": "2. Background service", "text": "<p>A different approach has been implemented to obtain diff reports to show differences between two OmegaT project packages for the translation of the PISA 2021 FT coding guides. This approach does not require uploading the two packages on the webpage, but instead the submission is done automatically behind the scenes provided that some conditions are met. </p>"}, {"location": "capps/xdiff/#21-functionality", "title": "2.1. Functionality", "text": "<p>A running service watches a pre-defined set of folder pairs in the server. Folders are watched in pairs because two packages must be submitted to xDiff. Whenever an OMT package appears in a watched folder (because the PM drops it there or downloads it there), the service will check whether its paired folder contains an OMT package and, if found, both packages will be submitted to xDiff. </p> <p>If the process is successful, xDiff will process the request, compare the two packages, store the diff report in a database and respond with the URL to a page where that xDiff report can be consulted. The running service in Ur will write a log file and create a HTML document that will open the report in the browser. To see the report, simply double click the HTML file to open it in a browser.</p> <p>If the process is not successful, xDiff will respond with an error message, which should be written in the log. No xDiff reportr will be created in that case. </p> <p>Both the log and the HTML report will be written in the second folder (next to the second package). </p>"}, {"location": "capps/xdiff/#22-how-to-use-it", "title": "2.2. How to use it", "text": "<p>To run xDiff in the background, follow these steps: </p> <ul> <li>Make sure the first package is in the first folder</li> <li>Drag and drop the second package to the second folder</li> <li>Wait for a few seconds</li> <li>Double click the HTML report to open it or send/upload it to be used by third parties</li> </ul> <p></p>"}, {"location": "capps/xdiff/#23-watched-folder-definition", "title": "2.3. Watched folder definition", "text": "<p>The folder pairs that must be watched are defined in the file <code>U:\\PISA_2021\\FIELD_TRIAL\\_Tech\\cg_xdiff\\200129_Steps_for_Difference_Reports.xlsx</code>, which has the following structure: </p> Steps where the diff report is needed Path template to package 1 Path template to package 2 Notes Verification review U:\\PISA\\FT\\XXX_xxx 4_CG\\01_from_country U:\\PISA\\FT\\XXX_xxx 4_CG\\03_from_verifier Diff between reconciled and verified version (for PM) Referee review U:\\PISA\\FT\\XXX_xxx 4_CG\\01_from_country U:\\PISA\\FT\\XXX_xxx 4_CG\\04_reviewed_delivered Diff between  reconciled and reviewed version (for Referee) etc. <p>The service replaces <code>XXX_xxx</code> in each of these path templates with every actual language code and that way it builds the list of all the folders that need to be watched for each version. Whenever an OMT package appears in the second folder, it will fetch for the twin OMT package in the first folder and will submit both packages to xDiff.</p>"}, {"location": "capps/xdiff/#24-constraints-and-disclaimer", "title": "2.4. Constraints and disclaimer", "text": "<p>The process will not succeeed in the following cases:</p> <ul> <li>If the first folder contains no OMT package.</li> <li>If the first folder contains more than one OMT package.</li> </ul> <p>If any of these contrainsts is not convenient, it can be discussed. </p>"}, {"location": "capps/xdiff/#3-results", "title": "3. Results", "text": "<p>You can access reports in three ways:</p> <ol> <li>After your submission has been processed by uploading the files through the webpage, the page will display a one-row table for the diff report that has been generated based on the analysis of your upload. Use this to access the diff report you have just generated.</li> <li>Double-clicking the HTML file that appears in the second folder besides the second pair OMT package when using the background service in <code>Ur</code>.</li> <li>Regardless of the submission mode, the Reports tab will display the whole list of diff reports available to you, where you can access any previously generated report. </li> </ol> <p>In either case, in the row for each report, you have some information about the report, as well as some buttons: </p> <ul> <li>Press the eye button to open the report page in a new tab</li> <li>Press the copy button to copy the URL to that report to your clipboard </li> <li>Press the save button to save the report as a file that you can archive</li> </ul>"}, {"location": "capps/xdiff/#4-the-xdiff-report-page", "title": "4. The xDiff report page", "text": "<p>Each diff report is displayed in its own page. This page can be opened by clicking on the eye button in the list of reports or by pasting the URL in the address bar of your browser. </p> <p>In the report page you can: </p> <ul> <li>Check administrative information about the report </li> <li>Check the diff report itself</li> <li>Filter results</li> <li>Clean up results</li> </ul>"}, {"location": "capps/xdiff/#41-administrative-information", "title": "4.1. Administrative information", "text": "<p>Click the Admin info tab to display the administrative information of the diff report, which includes: </p> Row Description report_id The identification number of the report. report_name The name of the report, with the date and time, the language version, the name of the batch and the file extension. batch_name The name of the batch. container e.g: PISA timestamp_readable The date and the time of creation in readable format timestamp Date and time, less readable format file_list The list of files in the batch total_files Number of files to compare source_lang The source language target_lang The language of the translation created_by The name of the person who uploaded the package"}, {"location": "capps/xdiff/#42-the-diff-report", "title": "4.2. The diff report", "text": "<p>The xDiff report consists of a table with one row per segment where differences have been found, including the following details: </p> Column Description # The number of the segment File name The name of the file that is compared Segment ID (XLIFF) Only for XLIFF files Source text The original text Original translation The original/old translation Edited translation The modified/new translation where you can see all track changes highlighted <p>The \"original translation\" refers to the one extracted from package 1 or file 1 or column 1 in the Excel. The \"edited translation\" refers to the one extracted from package 2 or file 2 or column 2 in the Excel.</p>"}, {"location": "capps/xdiff/#43-filtering-results", "title": "4.3. Filtering results", "text": "<p>Use the search box to filter the results displayed. You can search for words included in the source text or the translation, filename, segment number or ID, etc. </p> <p>You can also make a combined search, if you wish to see changes only in a certain file format, e.g.: XLIFF</p>"}, {"location": "capps/xdiff/#44-cleaning-up-results", "title": "4.4. Cleaning up results", "text": "<p>Click the Clean-up button to make track changes more readable. If a word contains more than 4 edits (deletions or addition or replacements), the edits will be joined as one single change of several characters.</p> <p>Any feedback would be greatly appreciated. Feel free to contact us.</p>"}, {"location": "capps/xdiff_automation/", "title": "xDiff automation: Comparing OMT packages in Ur", "text": "<p>This document explains how to automate the generation of diff reports comparing two OMT packages.</p>"}, {"location": "capps/xdiff_automation/#basic-logic", "title": "Basic logic", "text": "<p>The script sends two packages to xDiff and receives a URL to the diff report in xDiff. The diff report can be consulted directly in xDiff but the script also saves is URL in a HTML file, which redirects to the diff report web page when it is opened in the browser. The execution of the script is scheduled to run every minute.</p> <p>For every request to xDiff, the script needs to know the paths to the two packages and the path to the folder where the HTML file must be written. Those parameters are fetched from a path template config file, called <code>paths_for_diff.xlsx</code>. In order to automate the generation of the xDiff reports, the paths must be added to this file. </p>"}, {"location": "capps/xdiff_automation/#path-templates-config-file", "title": "Path templates config file", "text": ""}, {"location": "capps/xdiff_automation/#pisa-2022-ms", "title": "PISA 2022 MS", "text": "<p>If you must compare pairs of OMT packages in PISA 2021 Main Survey, you can add the paths to file <code>PISA_2021</code> &gt; <code>MAIN_SURVEY</code> &gt; <code>_tech &gt; xdiff</code> &gt; <code>paths_for_diff.xlsx</code>. </p>"}, {"location": "capps/xdiff_automation/#projects-other-than-pisa-2022", "title": "Projects other than PISA 2022", "text": "<p>If you must compare pairs of OMT packages for another project, proceed as follows:</p> <ol> <li>Fetch the <code>paths_for_diff.xlsx</code> file from <code>PISA_2021\\MAIN_SURVEY\\_tech\\xdiff</code>, and copy it to <code>{root}</code> &gt; <code>_tech</code> &gt; <code>xdiff</code>. </li> <li><code>{root}</code>  is the root folder of your project, e.g. <code>U:\\PISA_2021\\MAIN_SURVEY</code> for PISA 2021 Main Survey or <code>U:\\IPSOS\\EUROBAROMETER_FLASH_2.0\\08_FLASH_PROJECTS</code> for Eurobarometer 2.0 (FLASH).</li> <li>Create folders <code>_tech</code> and  <code>xdiff</code>  if they don't exist. </li> <li>In <code>{root}\\_tech\\xdiff\\paths_for_diff.xlsx</code> &gt; sheet paths: </li> <li>Delete all paths there. You can simply select rows rows 2 to n and delete their content.</li> <li>For every pair of OMT packages you must compare, add your three paths there:<ul> <li>A: Path template to input package 1</li> <li>B: Path template to input package 2</li> <li>C: Path template to output HTML file</li> </ul> </li> <li>You can put whatever you like in the other columns (D, E, etc.), which are ignored by the script, or leave them empty.</li> <li>In <code>{root}\\_tech\\xdiff\\paths_for_diff.xlsx</code> &gt; sheet config: </li> <li>Update the path to the root folder (cell B2). The script assumes this is a Windows path (using backslashes) which starts with <code>U:\\</code> (or another drive letter), which is how <code>/media/data/data/company</code> is mounted in your machine. However, the UNIX path is also fine.      Note: This Windows path will be converted to the UNIX path, e.g. if your root path is <code>U:\\PISA_2021\\MAIN_SURVEY</code>, it'll become <code>/media/data/data/company/PISA_2021/MAIN_SURVEY</code> before the script can use it. If you provide the UNIX path, it won't need to be converted. Use whatever you're sure that points to the location you want to use.</li> <li>If needed, update the name template of the OMT package. Any variable part (e.g. language code plus anything else) should be represented with <code>*</code>, e.g. <code>PISA2022MS_CodingGuide_MATNew_*_OMT.omt</code>.</li> <li>If needed, update the name template of the HTML file (which will contain the URL of the diff report). Use <code>lll-CCC</code> as a placeholder for the language code, e.g. <code>PISA2022MS_CodingGuide_MATNew_lll-CCC_DIFF.html</code>.</li> <li>Send an email to the xDiff maintainer to request the scheduling of the script for your project. In your email, you must include the full path to your <code>{root}\\_tech\\xdiff\\paths_for_diff.xlsx</code> file.</li> </ol> <p>I hope this is useful.</p>"}, {"location": "i18n/authoring-tips/", "title": "Authoring source text for translation in OmegaT", "text": ""}, {"location": "i18n/authoring-tips/#changing-labels-that-have-already-been-released", "title": "Changing labels that have already been released", "text": "<p>This relates to small changes made in the source text after that text has been released for translation. The author of that text might come across a label, have after-thoughts and change a comma, remove a space, change a letter's case, etc. In one word: cosmetic and unnecessary changes which should have been applied in time. Not it's too late.</p> <p>ANY kind of change will break any existing translations of labels that have already entered a translation workflow. Any such changes should be put on hold and then handled through the errata procedure at the agreed moment.</p> <p>Here's an example of a label where the final stop has been removed, which shows how the segment becomes untranslated and the translation appears as a fuzzy match:</p> <p></p> <p>In this case, judging by the other answer options (which end in full stop) it seems the change is a mistake and not intentional, but that's irrelevant with regards to the consequences of the change (translations are broken and become orphan in any case).</p> <p>That can have several impacts: more work (and confusion) for the user as they have to handle that segment again, or that might mean no base translation that the user at the next step of the workflow can use to do their task (reconciliation, adaptation, verification, etc.). That could also mean that a workflow gets stuck because the translation of a batch is not completed.</p>"}, {"location": "i18n/authoring-tips/#using-plain-unicode-characters-instead-of-html-markup", "title": "Using plain Unicode characters instead of HTML markup", "text": "<p>In a nushell, basically, whenever a character or a symbol exists, that's much preferable over applying formatting to achieve the same or a similar visual or typographic effect. Formatting adds complexity to the translation task and to any other task following translation (editing, helpdesk, etc.), especially in bidirectional languages like Arabic and Hebrew.</p> <p>For example, you might want to use a superscript in the symbol of square meters, and you'll write m2and then select the number and press a button to apply the superindex or superordinate formatting (i.e. to make it smaller and raise it). If you look at the HTML code that you're producing, that will look like <code>m&lt;sup&gt;2&lt;/sup&gt;</code>. In the CAT tool (e.g. OmegaT), that will look like <code>m&lt;g1&gt;2&lt;/g1&gt;</code> and the user will have to insert those two tags also in the translation, otherwise they will get an error and will be unable to commit the target files and move the batch forward. When there are many tags combined in the same segment, it can be from a headache to a nightmare.</p> <p>Instead of using formatting, however, you could have used the actual superindex character, like so: m\u00b2. That is much easier to translate, it produces no tag errors, and doesn't mess with directionality of the text in bidirectional languages (or it does to a much lesser extent). The user can copy the character from the source text and paste it in the translation, or can use an auto-text shortcut in OmegaT. The list of characters that users can insert with auto-text could perhaps also be useful for you.</p> <p>This is an important aspect where authors can greatly streamline or hamper translation/revision tasks by choosing to use one or another approach.</p> <p>I hope this all makes sense to you, and you can integrate it as a best practice in your team going forward. Let me know if you have any questions about this. </p> <p>In the case of the square meters, the special character is intended to be used also in the target-language version. A special case of the above would involve special characters that you might want in the source text but that the translator might actually not need at all. For example, ordinal indicators: e.g. 1st, 2nd, 3rd, 4th, etc. You might write them like that or might add superscript formatting, producing the same tag as above: <code>&lt;sup&gt;</code>th<code>&lt;/sup&gt;</code>. For example, the MusicSurvey unit: Paul states: \u201cIt is more likely that a randomly picked 9<code>&lt;sup&gt;</code>th<code>&lt;/sup&gt;</code> grade student plays a musical instrument than a randomly picked 10<code>&lt;sup&gt;</code>th<code>&lt;/sup&gt;</code> grade student.\u201d</p> <p>In this case, however, the target language might not use the same styles for ordinal indicators, or might not abbreviate ordinal indicators at all and might use full words instead. But if you used formatting that produces HTML markup, they will have to deal with the tags, even if they don't need them. What users are instructed to do in this case is to just add them at the end of the segment (otherwise, if they are missing, they will get an error, as I mentioned above). </p> <p>In this case, you could have used just normal letters: 9th. In fact, I think this is the recommended option in some reputed English style guides (e..g University of Oxford's or the Australian Government). However, if you really really wanted superscript ordinal indicators, you could write something like 9\u1d57\u02b0.</p>"}, {"location": "i18n/authoring-tips/#math-notation-tbc", "title": "Math notation... TBC", "text": "<p>Here comes another example about the same topic: <code>&lt;i&gt;</code>x<code>&lt;/i&gt;</code> vs. \ud835\udc65 (as a variable in the context of math notation, of course). </p>"}, {"location": "i18n/flip-plus/", "title": "FLIP+ -- Translation aspects", "text": ""}, {"location": "i18n/flip-plus/#1-assumed-tasks", "title": "1. Assumed tasks:", "text": ""}, {"location": "i18n/flip-plus/#lot-1", "title": "Lot\u00a01", "text": "<ol> <li>Submission (or creation) of items in national languages</li> <li>Harmonization of items in the IMS Question and Test Interoperability specification (QTI) format</li> </ol>"}, {"location": "i18n/flip-plus/#lot-2", "title": "Lot\u00a02", "text": "<ol> <li>Machine translation into English of existing items</li> <li>Human translation of existing items into other national languages (from English or from the original language)</li> </ol>"}, {"location": "i18n/flip-plus/#2-requirements-for-lot-1", "title": "2. Requirements for Lot\u00a01", "text": "<ul> <li>To integrate translation solutions, the \"platform\" ideally runs in a server (preferably running Linux) where other applications and services can be run on schedule.</li> <li>Languages should be correctly identified in the preamble1 of QTI (XML) files and/or in file names using  BCP-47 language tags2.</li> <li>XLIFF3 is optional. If XLIFF is used, the XLIFF round-trip should be handled using open-source libraries and filters such as Okapi Rainbow4 or OpenXLIFF5, not hand-writing XLIFF or creating it with home-made routines. cApStAn can provide insight in good practices for the use of these tools.</li> </ul>"}, {"location": "i18n/flip-plus/#3-technical-aspects", "title": "3. Technical aspects", "text": "<p>cApStAn can provide support with regard to translation tools and preparation of translation kits for language tasks.</p>"}, {"location": "i18n/flip-plus/#31-translation-formats", "title": "3.1. Translation formats", "text": "<p>QTI is an ideal format for translation and can [most probably] be imported and translated directly in the translation tool without the need to use XLIFF. The input to translation projects would be a monolingual QTI file in the source language and the output would be the equivalent QTI file in the target language (also monolingual). </p> <p>XLIFF3 has some advantages but also entails further complexity and know-how. If deemed more convenient to use XLIFF, it's possible to convert QTI files to and from XLIFF. The referred open-source libraries and filters should be used to create XLIFF files.  </p> <p>Other monolingual (or bilingual) formats are also possible, such as JSON, either preparing them as XLIFF or translating them directly without intermediary formats.</p>"}, {"location": "i18n/flip-plus/#32-translation-tools", "title": "3.2. Translation tools", "text": "<p>If XLIFF files are to be created, localization engineering tools (such as Okapi Rainbow4 or OpenXLIFF5) must be used. cApStAn can provide insight in good practices for the use of these tools.</p> <p>cApStAn proposes OmegaT6 as the translation editor. OmegaT is a multiplatform computer assisted translation (CAT) tool with fuzzy matching, translation memory, keyword search, glossaries, and translation leveraging into updated projects. cApStAn can provide support and customization7 to optimize its usage.</p> <p>OmegaT's is free software and open source. Its code is freely available online8, which would allow Java developers in OAT to create their own build (installer) with modified functionality to fit their own purposes if needed. </p>"}, {"location": "i18n/flip-plus/#33-language-tasks-and-mt", "title": "3.3. Language tasks and MT", "text": "<p>Machine translation can be implemented in different ways:</p> <ul> <li>integrated in the server (or perhaps the platform)</li> <li>called up by translators in the translation tool on demand</li> </ul> <p>For the first option, cApStAn can provide recommendations for implementation and sample code9 that could be used to translate batches of text in order to provide translation kits with translations ready for review or post-editing. MT vendors provide libraries in the most common programming languages10. </p> <p>A paid subscription to the MT provider is generally required, but if data privacy is not an issue and translation volumes are low (max. 500,000 characters/month), perhaps a DeepL API Free subscription (for Developers) would be sufficient. </p> <p>Raw machine translation should be not be used for final publication, instead it should be post-edited. Linguist working on post-editing tasks need to have received (or be provided) specific training for that.</p>"}, {"location": "i18n/flip-plus/#34-translation-kits", "title": "3.4. Translation kits", "text": "<p>Translation projects could be offline (transferred as zipped packages) or online (handled as Git repositories11). cApStAn can provide OmegaT project templates, in either case12. If translation projects are online, Github can be used to automate them13. </p> <p>Online team projects can be permanent containers (one repository per language pair) where files are added as they become ready for translation and removed as their translation is completed, no need to create a project every time a file must be translated. If there's a variety of different domains or subject fields and it's convenient not to mix them in the same container, a repository can be created for each language pair and domain combo.</p> <p>Permanent containers would greatly simplify TM management and file management in general and would remove the need of workflows on demand, but it of course depends on how translation is to be done. If it's not a problem for a translator to see other files or folders in the project that other translators are busy with, it could work. It they need separate containers for each translation job, then a workflow on demand  seems better. </p>"}, {"location": "i18n/flip-plus/#35-preview", "title": "3.5. Preview", "text": "<p>How preview is implemented depends in fact on the implementation of translation kits, but there are a few options, e.g. </p> <ol> <li>Copying or creating symlinks of the target files to the place in the server where they are expected to generate the preview</li> <li>Posting translations directly from OmegaT to an API endpoint: the request includes the translations and the response with the URL that must be opened in the browser in the local machine.</li> <li>Other options might be feasible too.</li> </ol>"}, {"location": "i18n/flip-plus/#4-support-to-translators", "title": "4. Support to translators", "text": "<p>OAT+ cApStAn may provide training and support to countries wishing to have translation kits prepared for them.  Training would be contingent on the specific implementation so it only makes sense to elaborate materials once the full structure is in place. </p>"}, {"location": "i18n/flip-plus/#references", "title": "References", "text": "<ol> <li> <p>For language identification in the preamble of XML files, see https://www.w3.org/TR/REC-xml/#sec-lang-tag \u21a9</p> </li> <li> <p>See \"related links\" section in https://www.w3.org/International/articles/language-tags/ \u21a9</p> </li> <li> <p>See https://github.com/capstanlqc/i18n_guide/blob/main/xliff-prepp-best-practices.md \u21a9\u21a9</p> </li> <li> <p>See https://okapiframework.org/wiki/index.php/Rainbow \u21a9\u21a9</p> </li> <li> <p>See https://github.com/rmraya/OpenXLIFF \u21a9\u21a9</p> </li> <li> <p>OmegaT's official site: https://omegat.org/ \u21a9</p> </li> <li> <p>Instructions for customizing OmegaT: https://github.com/capstanlqc/omegat_customization \u21a9</p> </li> <li> <p>OmegaT's code is publiclly available at https://github.com/omegat-org/ \u21a9</p> </li> <li> <p>See this piece of code for batch translating text with DeepL (API Pro authentication key for developers required): https://gist.github.com/msoutopico/d3420e68c4ce746351b80bfe0165ea1c . Full documentation available here: https://www.deepl.com/docs-api. \u21a9</p> </li> <li> <p>See the full official documentation for integrating DeepL in Python applications: https://github.com/DeepLcom/deepl-python \u21a9</p> </li> <li> <p>See https://omegat.sourceforge.io/manual-standard/en/howtos.html#howto.useteamproject \u21a9</p> </li> <li> <p>Project package templates available at https://github.com/capstanlqc/omegat_package_templates for XLIFF and Word. @TODO: One more template will be added for QTI. \u21a9</p> </li> <li> <p>See https://capps.capstan.be/doc/team_projects.php \u21a9</p> </li> </ol>"}, {"location": "i18n/hyphenation/", "title": "\u2606 Hyphenation", "text": ""}, {"location": "i18n/hyphenation/#hyphenation-internationalization", "title": "\u2606 Hyphenation internationalization", "text": ""}, {"location": "i18n/hyphenation/#breaking-text-manually", "title": "Breaking text manually", "text": "<p>Ideally, we should produce translations that are independent of the display mode, and therefore render equally well in different kinds of devices and screens, or different sizes of brower or app windows.</p>  Since different browsers and different operating systems might display the text examples below different, this documentation item uses images (taken on Firefox 107.0 64-bit for archlinux) to ensure homogeneous viewing for all audiences. In any case, the original code used is included below (but commented out) so you can fork this article and play with that."}, {"location": "i18n/hyphenation/#hard-hyphens", "title": "Hard hyphens", "text": "<p> In the text below, the excesive horizontal separation between words in the penultimate line could be unpleasant to the eye. </p> <p></p> <p>Translators might be tempted (or even instructed) to use a \"hard\" hyphen character to break the text at the end of the line, and that is likely to seem a good approach to fix layout issues like the one above. In the example below the text looks fine because the hyphen is inserted so as to suit the text box size. </p> <p></p> <p>However, hard hyphens will always be rendered even if they are not needed anymore. That might cause an undesired effect if the size of the text box changes, either because the content must be rendered in another device with a smaller or bigger size screen or simply because the application design turns into a fluid layout, with a dynamic width, to deliver a responsive user experience.</p> <p>See for example the same text box above with a slightly different size:</p> <p></p> <p>Hard hyphens should be avoided both in translations and in the source text.</p>"}, {"location": "i18n/hyphenation/#soft-hyphens", "title": "Soft hyphens", "text": "<p>An invisible, \"soft\" hyphen is not rendered visibly directly. Instead, it marks a place where the browser should break the word if hyphenation is necessary.</p> <p>HTML provides the <code>&amp;shy;</code> named entity to insert a soft hyphen, however for translatability reasons it's always better to use plain Unicode text, i.e. in this case it's invisible character U+00AD (not used here because it's an invisible character). If for any reason it's not possible to use the Unicode character, hexadecimal entityes are always preferable than named entities, e.g. <code>&amp;#x00AD;</code> in this case.</p> <p>See the result in the same text as above in text boxes of identical size. Here the soft hyphen causes hyphenation because the line wraps at that point:</p> <p></p> <p>On the other hand, here hyphenation is unnecessary and therefore no hyphen is produced:</p> <p></p> <p> Authors and translators may use soft hyphens when that seems the only way to cause hyphenation in a preview (and this is always preferable to using hard hyphens). The authoring tool or the translation tool, respectively, should provide a practical means to insert that special character. However, internationalized products can be designed in a way that may make this manual approach unnecessary.  </p>"}, {"location": "i18n/hyphenation/#breaking-text-automatically", "title": "Breaking text automatically", "text": "<p>Whereas soft hyphens can be useful as seen above, that method has a clear limitation: it requires knowing in advance where exactly the text might need to be hyphenated, however it's not always possible to foresee where words might need to hyphenate in all different potential layouts and displays. Automatic hyphenation might be more convenient for that reason.</p>"}, {"location": "i18n/hyphenation/#hyphenating-with-styles", "title": "Hyphenating with styles", "text": "<p>CSS provides properties that specify how words should be hyphenated when text wraps across multiple lines. Styling may be used to prevent hyphenation entirely, use hyphenation in manually-specified points within the text, or let the browser automatically insert hyphens where appropriate. Let's look at the third option.</p>"}, {"location": "i18n/hyphenation/#automatic-hyphenation-by-the-browser", "title": "Automatic hyphenation by the browser", "text": "<p>Letting the browser hyphenate automatically allows authors and translators to focus on the text and not be distracted by layout issues. If the language expert confirms that results are correct, this approach may be prioritized.</p> <p>See what automatic hyphenation yields in the two text box sizes considered (differences highlighted in red):</p> <p></p> <p>And:</p> <p></p> <p>The drowback of the automated approach is that it depends on the browswer having a hyphenation dictionary available for that language, which might not be the case for lesser used languages. Some research might be necessary to know for which language versions this is the case.</p> <p>For language versions for which the browser does not have a hyphenation dictionary (if any!), a good compromise could be to use manual hyphenation based on the review for particular layouts. The person responsible for fixing layout issues (including hyphenation-related ones) may insert the soft hyphens based on the results of previewing the text in the most likely display modes. However, the same thing would need to be done again whenever new displays are foreseen.</p>"}, {"location": "i18n/hyphenation/#hyphenation-requires-engineering", "title": "Hyphenation requires engineering", "text": "<p>In any of the two hyphenation approaches above (both through manual insertion of soft hyphens or based on the browser hyphenation dictionary), the localization engineer must interact with web designers in order to optimize CSS styling in the display application. In the automatically hyphenated language versions, the language tag (e.g. <code>lang=\"de\"</code>) must be correct so that the browser knows settings must be applied.</p>"}, {"location": "i18n/hyphenation/#references", "title": "References", "text": "<p>Code</p>"}, {"location": "i18n/ssmc/", "title": "ITS-based SSMC translation workflows", "text": "<p>SSMC = single-source multiple-channel</p>"}, {"location": "i18n/ssmc/#internationalization-tag-set-its", "title": "Internationalization Tag Set (ITS)", "text": "<p>The example below shows how the Internationalization Tag Set (ITS) data categories (using the Locale Filter data category expressed globally) can be used to filter content based on countries' preferences, to allow a unified authoring process and a homogeneous translation workflow regardless of how content is published afterwards.</p> <p>This sample contains two <code>localeFilterRule</code> elements: The first one specifies that the elements <code>label</code> with a <code>channel</code> attribute set to \"pba\" apply only to the  locales corresponding to countries that take the paper-based administration (PBA). The second one specifies that the elements <code>label</code> with a <code>channel</code> attribute set to \"cba\" apply to all locales corresponding to countries that take the computer-based administration (CBA). </p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;instrument xmlns:its=\"http://www.w3.org/2005/11/its\" its:version=\"2.0\"&gt;\n&lt;info&gt;\n&lt;its:rules version=\"2.0\"&gt;\n&lt;its:localeFilterRule selector=\"//label[@channel='pba']\" localeFilterList=\"*-KH, *-GT, *-IN, *-PY, *-VN\"/&gt;\n&lt;its:localeFilterRule selector=\"//label[@channel='cba']\" localeFilterList=\"*-KH, *-GT, *-IN, *-PY, *-VN\" localeFilterType=\"exclude\"/&gt;\n&lt;/its:rules&gt;\n&lt;response&gt;\n&lt;code&gt;Q03HA&lt;/code&gt;\n&lt;label channel=\"cba\"&gt;Click on the link to fill out the form&lt;/label&gt;\n&lt;label channel=\"pba\"&gt;Turn the page to fill out the form&lt;/label&gt;\n&lt;/response&gt;\n&lt;/info&gt;\n&lt;/instrument&gt;\n</code></pre> <p>More info.</p>"}, {"location": "i18n/trend_math_cg_6b/", "title": "UNIT 234: SEATS IN A CAR", "text": "<p>CM936Q02</p> <p>For security reasons, an extra aisle is created along the centre as shown on the right.</p> <p>This reduces the number of seats in each row by 3.</p> <p>The formula s = 3n + 23 does not apply to the new situation.</p> <p>Enter the new formula which describes the number of seats per row.</p> <p>Coding-0-1-9</p>"}, {"location": "i18n/trend_math_cg_6b/#seats-in-a-theatre-scoring-2", "title": "SEATS IN A THEATRE - SCORING 2", "text": "<p>QUESTION INTENT:</p> <pre><code>Description: Interpret or modify a linear equation in a context\nMathematical content area: Change and relationships\nContext: Occupational\nProcess: Formulate\n</code></pre>"}, {"location": "i18n/trend_math_cg_6b/#full-credit", "title": "Full credit", "text": "<p>Code 1: </p> <p>A linear equation equivalent to s = 3n + 20. </p> <ul> <li>s = 3n + 20  </li> <li>3 \u00d7 n + 20  </li> <li>s = 3 \u00d7 n + 23 \u2013 3</li> <li>s = 3n + 23 \u2013 3</li> </ul>"}, {"location": "i18n/trend_math_cg_6b/#no-credit", "title": "No Credit", "text": "<p>Code 0: </p> <p>Other responses</p> <ul> <li>Old formula minus 3 [not a formula]</li> <li>S \u2013 3 [not sufficient]</li> </ul> <p>Code 9:</p> <p>Missing</p>"}, {"location": "i18n/wrapping/", "title": "Text wrapping", "text": "Wrapping text with CSS General consideration <p>The most important principle is that content and presentation should be independent independent. Linguists (translators, verifiers, etc.) should focus on the text and not be asked to deal with layout and typesetting, which is the job of the publishers (DTP, CSS engineers, etc.). Following that principle helps avoid situations where text is over-fitted to a specific context/medium while at the same time compromising its chances of it being reused in other contexts/media.</p> <p>Of course, that excludes semantic formatting that applies to specific inline elements (e.g. bold, italics, etc.). </p> <p>In a nutshell, asking linguists to insert line breaks, hyphens, extra spacing, etc. to fake a certain visual effect (wrapping, indentation, etc.) in the layout is a bad idea. Instead, in a web publication, styles (CSS) should be used for that, and often that requires language-specific CSS rules. Let me know if you or your CSS crew need more details about this.</p> In action <p>Let's see what the same text looks like both forcing wrapping manually (by explicitly inserting line breaks in the text and letting the browser take care of wrapping automatically (with CSS styles), in different widths.</p> Context 1 -- Width: 25em <p>The text below looks the same when line breaks are inserted manually or when the text is wrapped automatcially through styling rules.</p> With line breaks:  Since the 1970s, scientists have been  worried about the amount of Dioxin, a  toxin in fish caught in Baltic Sea. <p></p>  1970\u5e74\u4ee3\u4ee5\u6765\u3001\u79d1\u5b66\u8005\u305f\u3061\u306f\u30d0\u30eb\u30c8\u6d77\u3067\u6355\u7372\u3055\u308c\u305f\u9b5a\u306b\u542b\u307e\u308c\u308b\u6bd2\u7d20\u3067\u3042\u308b\u30c0\u30a4\u30aa\u30ad\u30b7\u30f3\u306e\u91cf\u3092\u61f8\u5ff5\u3057\u3066\u304d\u305f\u3002 With styles:  Since the 1970s, scientists have been worried about the amount of Dioxin, a toxin in fish caught in Baltic Sea. <p></p>  1970\u5e74\u4ee3\u4ee5\u6765\u3001\u79d1\u5b66\u8005\u305f\u3061\u306f\u30d0\u30eb\u30c8\u6d77\u3067\u6355\u7372\u3055\u308c\u305f\u9b5a\u306b\u542b\u307e\u308c\u308b\u6bd2\u7d20\u3067\u3042\u308b\u30c0\u30a4\u30aa\u30ad\u30b7\u30f3\u306e\u91cf\u3092\u61f8\u5ff5\u3057\u3066\u304d\u305f\u3002 Context 2 -- Width: 18em <p>The same text as above is rendered correctly when the text is wrapped automatcially through styling rules but it scales badly where line breaks were inserted manually.</p> With line breaks (in the same position as above):  Since the 1970s, scientists have been  worried about the amount of Dioxin, a  toxin in fish caught in Baltic Sea. <p></p>  1970\u5e74\u4ee3\u4ee5\u6765\u3001\u79d1\u5b66\u8005\u305f\u3061\u306f\u30d0\u30eb\u30c8\u6d77\u3067\u6355\u7372\u3055\u308c\u305f\u9b5a\u306b\u542b\u307e\u308c\u308b\u6bd2\u7d20\u3067\u3042\u308b\u30c0\u30a4\u30aa\u30ad\u30b7\u30f3\u306e\u91cf\u3092\u61f8\u5ff5\u3057\u3066\u304d\u305f\u3002 With styles:  Since the 1970s, scientists have been worried about the amount of Dioxin, a toxin in fish caught in Baltic Sea. <p></p>  1970\u5e74\u4ee3\u4ee5\u6765\u3001\u79d1\u5b66\u8005\u305f\u3061\u306f\u30d0\u30eb\u30c8\u6d77\u3067\u6355\u7372\u3055\u308c\u305f\u9b5a\u306b\u542b\u307e\u308c\u308b\u6bd2\u7d20\u3067\u3042\u308b\u30c0\u30a4\u30aa\u30ad\u30b7\u30f3\u306e\u91cf\u3092\u61f8\u5ff5\u3057\u3066\u304d\u305f\u3002"}, {"location": "i18n/wrapping/#references", "title": "References", "text": "<p>Code</p>"}, {"location": "i18n/xliff-prepp-best-practices/", "title": "\u2606 Best practices for preparing XLIFF files", "text": ""}, {"location": "i18n/xliff-prepp-best-practices/#document-history", "title": "Document history", "text": "Date Author Comment 2018-01-30 Manuel Souto Pico Creation 2018-02-02 Manuel Souto Pico Encoding entities 2018-05-25 Manuel Souto Pico Segmentation 2021-01-27 Manuel Souto Pico Review and updates 2022-03-21 Manuel Souto Pico Updated OMT project (SVN to Github) and OmegaT version (4.2 to 5.7) 2022-03-23 Manuel Souto Pico Updated credentials of dummy user"}, {"location": "i18n/xliff-prepp-best-practices/#table-of-contents", "title": "Table of contents", "text": "<ul> <li>Document history</li> <li>Introduction<ul> <li>Notation</li> <li>Sample project</li> </ul> </li> <li>1. Requirements</li> <li>2. Recommendations<ul> <li>2.1. Segmentation</li> <li>2.2. Inline codes</li> <li>2.2.1. Suprasentential codes</li> <li>2.2.2. Intrasentential codes</li> <li>2.3. Encoding entities</li> <li>2.3.1. Escaping named character entities</li> <li>2.3.2. Unicode characters and code points</li> </ul> </li> <li>3. Common issues<ul> <li>3.1. Split sentences</li> <li>3.2. Markup nimiety</li> <li>3.3. Ending segments at line breaks</li> </ul> </li> <li>Annexes<ul> <li>Guidelines for creating XLIFF 1.2 files for OmegaT<ul> <li>Check list for translation</li> <li>Check list for bilingual review</li> </ul> </li> </ul> </li> <li>References</li> </ul>"}, {"location": "i18n/xliff-prepp-best-practices/#introduction", "title": "Introduction", "text": "<p>This report includes recommendations for preparing content for translation in the XLIFF format with a view to producing XLIFF files that optimize the different language tasks and language asset management both in the short and the long run. It also focuses on common issues that can be problematic for language experts and how those issues can be avoided.</p> <p>Often, there are no ultimate prescribed solutions, but following or not the recommendations in this document can make all the difference between hindering or crippling language tasks (the work of translators, reconcilers, reviewers, verifiers, etc.) and making their  work enjoyable and bound to good results.</p> <p>Info</p> <p>cApStAn can take care of file preparation regardless of the native format provided that the client provides the original source files, and often that yields better results than what third-party engineers often can do. If you are a third-party engineer or a client, beware that the contents of this guide apply to you only after the possibility of relying on cApStAn for file preparation has been considered and discareded (for a good reason).</p>"}, {"location": "i18n/xliff-prepp-best-practices/#notation", "title": "Notation", "text": "<p>In this document, segments as the linguist sees them in the translation editor are represented as follows (preceded by the segment number):</p> <p>31 This is a segment</p> <p>Also, the cross mark (\u274c) and check mark (\u2714\ufe0f) emojis are used to indicate after each exale what is discouraged or problematic and expected or recommended, respectively. These icons are not part of the text!  </p>"}, {"location": "i18n/xliff-prepp-best-practices/#sample-project", "title": "Sample project", "text": "<p>To illustrate the DO's and DON'T's, an OmegaT sample project is provided, containing:</p> <ul> <li>the original files (XML, HTML, SVG, etc.), in folder <code>original</code></li> <li>the problematic XLIFF files, in folder <code>source/01_haram</code></li> <li>the optimal XLIFF files, in folders <code>source/02_halal_xlf1</code> (for XLIFF version v.1.2)</li> <li>the optimal XLIFF files, in folders <code>source/02_halal_xlf2</code> (for XLIFF version v.2.0)</li> </ul> <p>The original files have been prepared as XLIFF in two different ways (so-called here \"halal\" and \"haram\"), to show the ideal preparation and its antithesis, respectively.  This is the file structure in the project:</p> <pre><code>xliff_bestpractices_omtprj (project)\n.\n\u251c\u2500\u2500 dictionary\n\u251c\u2500\u2500 glossary\n\u251c\u2500\u2500 manifest.rkm\n\u251c\u2500\u2500 omegat\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 omegat.project\n\u251c\u2500\u2500 original\n\u2502   \u251c\u2500\u2500 entities.html\n\u2502   \u251c\u2500\u2500 markup_custom.xml\n\u2502   \u251c\u2500\u2500 markup_inline.svg\n\u2502   \u251c\u2500\u2500 markup_input.html\n\u2502   \u251c\u2500\u2500 markup_span.html\n\u2502   \u2514\u2500\u2500 segmen_para.html\n\u251c\u2500\u2500 source\n\u2502   \u251c\u2500\u2500 01_haram\n\u2502   \u2502   \u251c\u2500\u2500 entities.html.xlf\n\u2502   \u2502   \u251c\u2500\u2500 markup_custom.xml.xlf\n\u2502   \u2502   \u251c\u2500\u2500 markup_inline.svg.xlf\n\u2502   \u2502   \u251c\u2500\u2500 markup_input.html.xlf\n\u2502   \u2502   \u251c\u2500\u2500 markup_span.html.xlf\n\u2502   \u2502   \u2514\u2500\u2500 segmen_para.html.xlf\n\u2502   \u2514\u2500\u2500 02_halal_xlf#\n\u2502       \u251c\u2500\u2500 entities.html.xlf\n\u2502       \u251c\u2500\u2500 markup_custom.xml.xlf\n\u2502       \u251c\u2500\u2500 markup_inline.svg.xlf\n\u2502       \u251c\u2500\u2500 markup_input.html.xlf\n\u2502       \u251c\u2500\u2500 markup_span.html.xlf\n\u2502       \u2514\u2500\u2500 segmen_para.html.xlf\n\u251c\u2500\u2500 target\n\u2514\u2500\u2500 tm\n</code></pre> <p>You can open the XLIFF files and look at them in a text editor, but probably the best way to see the impact of the different preparation is to open the project in OmegaT and compare each haram file with its corresponding halal equivalent(s). The project can be downloaded twice with different names and two instances of OmegaT can be run simultaneously for a handier comparison.</p> <p>To open the project in OmegaT:</p> <ul> <li>Install and customize OmegaT 5.7 as per our installation and customization guide [1]</li> <li>In OmegaT, go to     Project &gt;     Download team project and enter the following details:<ul> <li>Repository URL: <code>https://github.com/capstanlqc/xliff_bestpractices_omt</code></li> <li>New local project folder: your preferred path to your local copy of the project.</li> </ul> </li> </ul> <p>That will create a local version of the project for you and open it. To open files in the translation editor, you may press Ctrl+L and then either type part of the file name or just click on a file to select it and open it. Typing also helps to filter the list of files.</p> <p>Info</p> <p>The project is public, therefore OmegaT should not ask for credentials to download it. It may ask for credentials however if you try to save changes. Please remember that this project is just to show issues in file preparation, the memory is not meant to be writeable. </p> <p>The sample XLIFF files in the project above or the project itself can be re-created using Okapi Rainbow.[2] The Rainbow project, including the settings files, filters, segmentation rules etc., can also be downloaded from this link <code>okapi_rainbow_project.tar.gz</code>, although this is not necessary unless you want to recreate or customize the extraction process. Instructions to use the Rainbow project can be found in the README.md file.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#1-requirements", "title": "1. Requirements", "text": "<p>When creating XLIFF files, the only strict technical requirement is to create well-formed and valid XLIFF files, according to the XML syntax and the XLIFF specification [3]. Created XLIFF files can be validated with the strict XML schema [4] or using the XLIFF Checker [5].</p> <p>Well-formedness and validity are the bare minimum, but of course it is perfectly possible to produce XLIFF files that are valid and compliant with the XLIFF standard but that are not translation-friendly. The main purpose of this report is to promote some best practices, upon which the following recommendations are based.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#2-recommendations", "title": "2. Recommendations", "text": "<p>Based on the localization industry's best practices for preparing files for translation and on cApStAn's experience in localization of international large-scale assessments and questionnaires, we can define a number of important recommendations or expectations.</p> <p>First and foremost, one generic recommendation:</p> <ul> <li>Use the existing technology. There's a rich array of tools and libraries in the localization industry, both commercial and open source, that embody the know-how accumulated over the last decades. If you try to reinvent the wheel, it'll take you much longer and you'll achieve worse results. Use what exists, and improve it if you can, and only then develop your own technology if you see that what </li> </ul> <p>Some of the tools you could use to manage the XLIFF roundtrip (extraction and merge):</p> <ul> <li>Maxprograms' OpenXLIFF filters / XLIFF Manager (open source)</li> <li>Okapi Rainbow (open source)</li> <li>memoQ (commercial)</li> <li>SDL Trados Studio (commercial)</li> </ul> <p>Let's now be a bit more specific, about segmentation and inline codes:</p> <ul> <li>Text must be segmented by sentence. Each segment should contain one single sentence, not a full paragraph or several sentences.</li> <li>All translatable content must be extracted and all untranslatable content must be excluded during the extraction.</li> <li>Inline codes should not be interpreted as end of paragraph or as boundaries between text units/blocks, to avoid breaking down sentences in fragments.</li> <li>Inline codes and markup should ideally be represented using the notation specified by the XLIFF standard so that the translation editor can recognize, lock and display them as placeable tags.</li> <li>If markup is not represented as tags and is escaped instead, then each markup block should be as short as possible, and custom tags might need to be created to protect escaped markup.</li> <li>The number of tags should be as low as possible.</li> <li>Some clean-up of the source files or some back and forth between localization engineers and source content authors is sometimes necessary).</li> </ul> <p>Failure to follow those recommendations hampers language tasks or/and could affect translation quality.</p> <p>There are other, recommendations about characters and whitespace might have a lesser impact on their own, but recurrent and concurrent failure to follow them may also contribute to making the translation process more difficult:</p> <ul> <li>Unicode characters should be used instead escaped HTML entities.</li> <li>Excessive whitespace and inline line breaks should be avoided.</li> <li>To avoid truncations and overflowing text, text should be wrapped dynamically in the publication medium instead of using line break codes in the source text.</li> <li>Comments should not be extracted as translatable text.</li> </ul>"}, {"location": "i18n/xliff-prepp-best-practices/#21-segmentation", "title": "2.1. Segmentation", "text": "<p>Translating or reviewing long paragraphs containing several sentences is inconvenient for several reasons.</p> <p>On the one hand, it requires a higher cognitive effort from the linguist, which reduces productivity and increases the chances of errors, and on the other hand, it reduces the likelihood of propagation and internal reuse of translations within the project, which leads to rework (reducing turnaround time and savings) and to a higher number of inconsistencies, that are difficult to catch or fix afterwards.</p> <p>Sentence-based segmentation boosts the reuse of translations, through the propagation of the translation of a repeated segment to all its repetitions, or through the higher availability of matches to translate similar segments, thus increasing consistency, and reduces the need for the linguist to run concordance searches in search of the different parts that need to be assembled in the final translation. Segmentation contributes both to final quality and satisfaction of the team.</p> <p>Segmentation should occur after each sentence, so that each sentence is included in one segment and each segment contains only one sentence. For example, a paragraph typically contains several sentences, like the following:</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit\u2026 Aliquam ex nisi, mattis pulvinar nulla sed, commodo mattis ligula. Nulla sit amet leo lacinia, pellentesque mi non, aliquam augue? Pellentesque tempor dictum dui in imperdiet. Fusce ligula arcu, hendrerit eu dignissim eget, consequat quis sem! Maecenas eget ligula dapibus, dictum purus vitae, sodales neque.</p> <p>If the text is segmented, this long paragraph can be handled as independent sentences and therefore becomes much more manageable for the linguist. The expected result is:</p> <p>1 Lorem ipsum dolor sit amet, consectetur adipiscing elit\u2026 2 Aliquam ex nisi, mattis pulvinar nulla sed, commodo mattis ligula. 3 Nulla sit amet leo lacinia, pellentesque mi non, aliquam augue? 4 Pellentesque tempor dictum dui in imperdiet. 5 Fusce ligula arcu, hendrerit eu dignissim eget, consequat quis sem! 6 Maecenas eget ligula dapibus, dictum purus vitae, sodales neque.</p> <p>To implement segmentation, you must use segmentation rules. Different tools might have slightly different implementations, but they all use regular expressions to match the patterns that correspond to sentence boundaries. SRX [6] is an XML-based standard of the localization industry used to define segmentation rules, and it can be used by Okapi Framework [7]. Segmentation rulesets can be easily created and customized in Okapi Ratel [8].</p> <p>Existing libraries or tools used to prepare files as XLIFF normally include a basic set of default rules which often cover most of the needs, which can be varied. As you can see in the example above, segments do not only end in full stop, but might end in other punctuation marking the end of a sentence (i.e. in English: interrogation, ellipsis, etc.).</p> <p>Sometimes it is necessary or convenient to create more specific rules to meet the specific needs of the source content, which is relatively easy in SRX. For example, if it's necessary to split the text in some context that the default rules do not cover. Or there are cases where punctuation symbols do not stand for the end of a sentence, such as in the case of abbreviations:</p> <p>1  NBC canceled Mr. Robinson, the freshman comedy series.</p> <p>To avoid segmenting after abbreviations and in other similar cases, exceptions are necessary to prevent or mask the general rule. Without the appropriate exceptions for abbreviations, we would obtain incorrect segmentations such as:</p> <p>1 NBC canceled Mr. 2 Robinson, the freshman comedy series.</p> <p>Luckily, there again, default rulesets used by available tools already include the most frequent abbreviations.</p> <p>\u261e In the sample OmegaT project provided, file <code>01_haram/segment_para.html.xlf</code> shows a text that has been prepared without segmentation, whereas file <code>02_halal/segment_para.html.xlf</code> has been prepared with sentence-based segmentation.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#22-inline-codes", "title": "2.2. Inline codes", "text": "<p>The source content might include inline codes, e.g. any HTML markup tags used to apply a certain behavior or property to part of the text. Often source content is HTML or some sort of similar markup language, where  markup is used to define layout, formatting and/or structure. The preparation of the source files as XLIFF entails dealing with those codes as appropriate.</p> <p>Codes can be of two kinds:</p> <ul> <li>Suprasentential or intersentential codes (i.e. codes that embed a sentence, or stand outside of a sentence, or between sentences, or operate at a higher level than the sentence) should not be included in segments.</li> <li> <p>Intrasentential codes (i.e. codes that are included inside a sentence, often as spanning codes or code pairs) must be represented as inline elements (also called \"content markup\") according to the guidelines of the XLIFF specification [9].</p> <p>The CAT tool will then correctly display inline elements as placeable tags, which translators can easily insert in the appropriate position in the translation of each segment. In the contrary, it is problematic for translators and reviewers to deal with inline codes that have not been protected as placeable tags, which also poses a risk to the integrity of the codes and the document.</p> </li> </ul>"}, {"location": "i18n/xliff-prepp-best-practices/#221-suprasentential-codes", "title": "2.2.1. Suprasentential codes", "text": "<p>A leading opening tag appearing before the beginning of a sentence and its corresponding closing tag appearing after the end of the sentence are an example of suprasentential codes:</p> <pre><code>&lt;p class=\"foo\"&gt;What is the total length of the sticks in the line?&lt;/p&gt;\n</code></pre> <p>Since they are expected to appear in exactly the same position in the target version of that segment, they don't need to appear in the translation editor and the translator does not need to see them:</p> <p>1 What is the total length of the sticks in the line? \u2714</p> <p>1 <code>&lt;g0&gt;</code>What is the total length of the sticks in the line?<code>&lt;/g0&gt;</code> \u274c</p>"}, {"location": "i18n/xliff-prepp-best-practices/#222-intrasentential-codes", "title": "2.2.2. Intrasentential codes", "text": "<p>\u261e The file <code>markup_span.html</code> in the sample project includes the following text:</p> <pre><code>&lt;p&gt;&lt;span style='font-size:12pt;font-family:\"times new roman\",\"serif\"'&gt;Code1:\n&lt;/span&gt;&lt;span style='font-size:12pt;font-family:\"times new roman\",\"serif\"'&gt;3/2 or\n11/2 or 1.5&lt;/span&gt;&lt;/p&gt;\n</code></pre> <p>which should be prepared as follows in the XLIFF file:</p> <pre><code>&lt;source xml:lang=\"en\"&gt;&lt;bpt id=\"1\" ctype=\"x-span\"&gt;&amp;lt;span style='font-size:12pt;\nfont-family:\"times new roman\",\"serif\"'&gt;&lt;/bpt&gt;Code1: &lt;ept id=\"1\"&gt;&amp;lt;/span&gt;&lt;/ept&gt;\n&lt;bpt id=\"2\" ctype=\"x-span\"&gt;&amp;lt;span style='font-size:12pt;font-family:\"times new\nroman\",\"serif\"'&gt;&lt;/bpt&gt;3/2 or 11/2 or 1.5&lt;ept id=\"2\"&gt;&amp;lt;/span&gt;&lt;/ept&gt;&lt;/source&gt;\n</code></pre> <p>which the CAT tool will display as, e.g.:</p> <p>1 <code>&lt;g0&gt;</code>Code1: <code>&lt;g0&gt;&lt;g1&gt;</code>3/2 or 11/2 or 1.5<code>&lt;/g1&gt;</code> \u2714</p> <p>Representing the HTML tags as inline codes as specified in the XLIFF standard  also reduces the length of each tag, thus better legibility is obtained and the segments are much easier to handle.</p> <p>Some CAT tools display a floating tooltip including the original inline codes when the linguist hovers over the placeable tag (e.g. <code>&lt;g0&gt;</code> below) in the segment, thus showing the translator what the tag stands for. For formats like HTML, this can be helpful for the savvy translator, whereas for other more obscure formats like Open XML it is less useful.</p> <p>\u26a0\ufe0f WARNING: Escaping the HTML or XML markup by replacing <code>&lt;</code> and <code>&gt;</code> with <code>&amp;lt;</code> and <code>&amp;gt;</code> respectively, etc. is not a good approach, because the translation editor will consider the escaped markup as editable text rather than as locked codes and therefore the tags can be mishandled, let alone the fact that translation memories will be polluted. Furthermore, that approach does not reduce the length of inline codes, which means that the text is less readable and that can hamper the translation and bring about quality issues.</p> <p>For example, escaping the markup in the above segment would produce the following XLIFF file:</p> <pre><code>&lt;source xml:lang=\"en\"&gt;&amp;lt;span style=&amp;apos;font-size:12pt;font-family:&amp;quot;\ntimes new roman&amp;quot;,&amp;quot;serif&amp;quot;&amp;apos;&gt;Code1: &amp;lt;/span&amp;gt;\n&amp;lt;span style=&amp;apos;font-size:12pt;font-family:&amp;quot;times new roman&amp;amp;\nquot;,&amp;quot;serif&amp;quot;&amp;apos;&gt;3/2 or 11/2 or 1.5&amp;lt;/span&amp;gt;&lt;/source&gt;\n</code></pre> <p>which would produce the following view in the translation editor, which is not translation-friendly:</p> <p>1 <code>&lt;span style='font-size:12pt;font-family:\"times new roman\",\"serif\"'&gt;</code>Code1: <code>&lt;/span&gt;&lt;span style='font-size:12pt;font-family:\"times new roman\",\"serif\"'&gt;</code>3/2 or 11/2 or 1.5<code>&lt;/span&gt;</code> \u274c</p> <p>\u261e In the sample project provided, files <code>markup_custom_xml.xlf</code> and <code>markup_span.html.xlf</code> show what the text looks like when the inline codes have been simply escaped (the ones in the <code>01_haram</code> folder) and when they have been properly encapsulated as XLIFF content markup (the ones in folder <code>02_halal</code>). There are two files to exemplify both standard HTML tags (e.g. <code>&lt;span&gt;</code>) as well as custom-crafted XML tags.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#23-encoding-entities", "title": "2.3. Encoding entities", "text": "<p>HTML source content might contain named character entities (in the form of <code>&amp;char;</code>) which are not allowed in XML and therefore cannot be used in an XLIFF file as such unless they are declared (except for <code>amp</code>, <code>lt</code>, <code>gt</code>, <code>apos</code>, <code>quot</code>). There is more than one possibility to prepare source HTML content containing named character entities, and some ways are preferable to others. Let us consider the <code>&amp;divide;</code> entity as an example, found in the following HTML content:</p> <pre><code>&lt;p&gt;(40 &amp;divide; 10) + (8 &amp;divide; 2)&lt;/p&gt;\n</code></pre>"}, {"location": "i18n/xliff-prepp-best-practices/#231-escaping-named-character-entities", "title": "2.3.1. Escaping named character entities", "text": "<p>One possibility to create a valid XLIFF file is to escape the entities, as follows:</p> <pre><code>&lt;source&gt;(40 &amp;amp;divide; 10) + (8 &amp;amp;divide; 2)&lt;/source&gt; \u274c\n</code></pre> <p>The escaping approach is discouraged, though. Among other reasons, this approach will make the translation editor display the named character entity rather than the actual character itself (which reduces readability and could be misleading or even unintelligible for the linguist), as shown below:</p> <p>1 40 [\u00f7 10) + (8 \u00f7 2)  \u274c</p> <p>Linguists need to see the character, not the code. While <code>&amp;divide;</code> (\u00f7) or <code>&amp;pi;</code> (\u03c0) might be more or less transparent in the appropriate context, other entities such as <code>&amp;le;</code> (\u2264) or <code>&amp;zwnj;</code> (zero-width non-joiner) will be obscure and puzzling. The linguist could think that the named character entity must be maintained and therefore necessarily be used in the translation, whereas it might be the case that the target language spelling rules call for another character in that context. For example, this would be an incorrect translation according to French punctuation rules:</p> <p>source: Punctuation works <code>&amp;quot;</code>differently<code>&amp;quot;</code> in French. target: La ponctuation est <code>&amp;quot;</code>diff\u00e9rente<code>&amp;quot;</code> en fran\u00e7ais.  \u274c </p> <p>Compare with the correct translation:</p> <p>source: Punctuation works <code>&amp;quot;</code>differently<code>&amp;quot;</code> in French. target: La ponctuation est \u00ab diff\u00e9rente \u00bb en fran\u00e7ais. \u2714 </p> <p>Escapes were used to represent (by means of ASCII text only) characters that were not available in the character encoding you are using. The W3C (group in charge of the HTML specification) advises to use an encoding that allows to represent characters in their normal form, rather than using escaped named character entities, because using escapes can make it difficult to read and maintain source code, and can also significantly increase file size.[10] Nowadays, it should be possible to encode any text as UTF-8, which allows to use Unicode characters and removes the need for such escapes.</p> <p>Escapes can be a way of avoiding the use of a character for other reasons (e.g. if they conflict with other elements), in which case, you might want to escape some entities specifically. Escapes might also be useful to represent invisible or ambiguous characters, or characters that would otherwise be difficult to handle, such as whitespace or invisible Unicode control characters (e.g. using <code>&amp;rlm;</code> in HTML source content --and <code>&amp;#x200F;</code> in the prepared XLIFF file-- helps spot these characters).[11] However, in all other cases, it is preferable to avoid the escape.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#232-unicode-characters-and-code-points", "title": "2.3.2. Unicode characters and code points", "text": "<p>A different approach is to represent the same character by means of the universal Unicode code point expressed as a numeric entity (e.g. the hexadecimal entity <code>&amp;#x00F7;</code>) or as the Unicode character itself (e.g. <code>\u00f7</code>). The latter is preferable because it simplifies maintenance and running text searches directly in the raw XLIFF files with, say, grep or any other text-based tool.</p> <p>If it's unavoidable to have named character entities in the source content to represent special characters, a simple pre-processing of the source content can be used to convert them into Unicode code points or Unicode characters. However, the ideal scenario would be to configure the authoring tool where the source content is authored so that special characters or symbols can be inserted directly by means of the Unicode character or the numeric entity. How authors insert symbols or special characters that are not on their keyboard depends on their authoring tool and their platform, but normally they can either pick the character from a special character palette (e.g. the Character Map in Windows or Character Viewer in Mac) or insert it by using a key combination, e.g. ALT+0176 on the keypad to insert the degree symbol (i.e. <code>\u00b0</code>).[12]</p> <p>Both the approaches mentioned in the previous paragraph will produce one of the two following XLIFF codes (depending on the encoding chosen):</p> <pre><code>&lt;source&gt;(40 &amp;#x00F7; 10) + (8 &amp;#x00F7; 2)&lt;/source&gt; \u2714\n</code></pre> <pre><code>&lt;source&gt;(40 \u00f7 10) + (8 \u00f7 2)&lt;/source&gt; \u2714\n</code></pre> <p>which will be displayed as the following in the translation editor:</p> <p>1 (40 \u00f7 10) + (8 \u00f7 2) \u2714</p> <p>In a nutshell, then: using the Unicode characters in their normal form is preferable to representing them with their numeric --preferably hexadecimal-- reference, and any of those two options is preferable to escaping the named character references with <code>&amp;amp;</code>, or declaring them in the preamble of the document.</p> Approach Example Well-formed Recommended Unicode character <code>\u00f7</code> yes yes (more preferable) numeric (hex) character entity <code>&amp;#x00F7;</code> yes yes (less preferable) unescaped named character entity <code>&amp;divide;</code> no (unless declared) no (but feasible if declared in the document) escaped named character entity <code>&amp;amp;divide;</code> yes no <p>When preparing XLIFF files with a localization engineering tool, e.g. Okapi Rainbow, both named and numeric character entities in the source content will be encoded as the Unicode character in the XLIFF file. \u261e In the sample OmegaT project provided, you can see how the three possible inputs (in file <code>original/entities.html</code>) are encoded in the same way (as the Unicode character) using the recommended approach in file <code>02_halal/entities.html.xlf</code> as well as in the discouraged way in file <code>01_haram/entities.html.xlf</code>.</p> <p>With a few negligible exceptions[13], there should be no reason why a UTF-8 encoding and Unicode characters cannot be used any content to be localized.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#3-common-issues", "title": "3. Common issues", "text": "<p>Following the recommendations above is necessary but might not be enough to achieve an optimized process. The source content might present a number of pitfalls that require special attention when creating the XLIFF files. Let us see some of those frequent issues that may hamper language tasks.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#31-split-sentences", "title": "3.1. Split sentences", "text": "<p>Sometimes sentences might be broken in two or more parts because the extraction filter is treating an embedded code as the end of the paragraph. \u261e In the OmegaT project provided, file <code>01_haram/markup_input.html.xlf</code> shows how the sentence is broken at the text input code:</p> <pre><code>&lt;source&gt;An emperor penguin is&lt;/source&gt;\n&lt;source&gt;cm taller than a little penguin.&lt;/source&gt;\n</code></pre> <p>displayed in the translation editor as:</p> <p>1 An emperor penguin is \u274c 2 cm taller than a little penguin.</p> <p>The original content (in file <code>original/markup_input.html</code>) looks like this:</p> <pre><code>&lt;p&gt;An emperor penguin is &lt;input type=\"text\" name=\"fname\" autocomplete=\"off\"\nsize=\"4\" id=\"emperor-penguin-versus-little-penguin\" class=\"height-different\"\npattern=\"[0-9]+\" title=\"How many centimeters.\" formmethod=\"post\" required\nautofocus /&gt; cm taller than a little penguin.&lt;/p&gt;\n</code></pre> <p>That code represents this display in the online questionnaire:</p> <p></p> <p>Here, the expected and recommended preparation is to represent the text input field as content markup, as follows (and file <code>02_halal/markup_input.html.xlf</code> exemplifies):</p> <pre><code>&lt;source xml:lang=\"en\"&gt;An emperor penguin is &lt;ph id=\"1\" ctype=\"x-input\"&gt;&amp;lt;input\ntype=\"text\" name=\"fname\" autocomplete=\"off\" size=\"4\" id=\"emperor-penguin-versus-\nlittle-penguin\" class=\"height-different\" pattern=\"[0-9]+\"\nformmethod=\"post\" required autofocus /&gt;&lt;/ph&gt; cm taller than a little penguin.\n&lt;/source&gt;\n</code></pre> <p>which will appear as follows in the translation editor (see file <code>02_halal/markup_input.html.xlf</code>):</p> <p>1 An emperor penguin is <code>&lt;x0/&gt;</code> cm taller than a little penguin.  \u2714 </p> <p>That preparation makes it very easy for the translator to insert the placeable tag in the translation of that segment in the position where the input field should appear in the target version. For example, in Khmer:</p> <p>1target: \u1796\u17d2\u179a\u17c7\u1785\u17c5\u17a2\u1792\u17b7\u179a\u17b6\u1787\u1797\u17c1\u1793\u1783\u17d2\u179c\u17b8\u1793\u1798\u17b6\u1793\u1780\u17c6\u1796\u179f\u17cb\u1781\u17d2\u1796\u179f\u17cb\u1787\u17b6\u1784\u1797\u17c1\u1793\u1783\u17d2\u179c\u17b8\u1793\u178f\u17bc\u1785\u1787\u17b6\u1784 <code>&lt;x0/&gt;</code> \u17a0\u17d2\u179c\u17b8\u178f\u17d4   \u2714</p> <p>File <code>markup_inline.svg.xlf</code> shows a similar case of text broken down at the two embedding SVG tags <code>&lt;tspan&gt;</code> and <code>&lt;/tspan&gt;</code>.</p> <p>Other similar examples:</p> <p>1 Click  \u274c  2 to move on.</p> <p>1 See uses on  \u274c  2 to show 2 children in her pictograph 3 How many  \u274c  4 will they need to draw?</p> <p>1 Feed 5 penguins for  \u274c  2 zeds.</p> <p>1 Drag  \u274c  2 onto the graph.</p> <p>1 When your drawing is done, click  \u274c  2 to fill the garden with boxes of flowers.</p> <p>In all these cases the original content includes some element (e.g. \"Click <code>[X](BUTTON)</code> to move on.\" or \"Feed 5 penguins for <code>[QUANTITY]</code> zeds.\") that has been interpreted as the end of a paragraph.</p> <p>Apart from the problem that the full sentence will not be stored in the translation memory as one unit, this is also problematic when the target language expresses things in a different order than English, e.g. say, \"T\u00f3 m\u00f3v\u00ea \u00f3n kl\u00efck <code>[X]</code>)\". In that case the linguist is forced to break the expected one-to-one segment correspondence, in order to maintain the correct order.</p> <p>Maintaining the correspondence will produce the wrong order in the final content according to the syntax of the target language:</p> <p>1 kl\u00efck  \u274c  2 T\u00f3 m\u00f3v\u00ea \u00f3n  \u274c </p> <p>Breaking the natural correspondence will produce the right order in the final content but spoils the TM containing these translations, which will not be reusable when the same kind of content  needs to be translated in a subsequent cycle of the same project:</p> # source target 1 Click T\u00f3 m\u00f3v\u00ea \u00f3n \u274c 2 to move on kl\u00efk \u274c <p>or</p> # source target 1 Click T\u00f3 m\u00f3v\u00ea \u00f3n kl\u00efk \u274c 2 to move on <p>Auto-propagation of broken translations can also become problematic if the translation of a repeated segment (corresponding to part of the sentence) must be different in different contexts, for example due to agreement with other parts of the sentence, e.g.</p> <p>1 Front  \u274c  2 wheel 3 Front  \u274c  4 headlamp</p> <p>For example, in Spanish adjectives need to agree in gender and number with the nouns they modify, e.g. the translation of \"front\" is \"delantera\" (feminine) in seg1 to agree with the Spanish equivalent of \"wheel\" (i.e. \"rueda\"), which has feminine grammatical gender, whereas it is \"delantero\" (masculine) in seg3 to agree with the Spanish equivalent of \"headlamp\" (i.e. \"faro\"), which has masculine grammatical gender.</p> <p>Auto-propagation would produce the following translation:</p> # source target 1 Front Rueda (fem.) 2 wheel delantera (fem.) 3 Front Faro (masc.) 4 headlamp delantera (fem.) \u274c <p>In these cases, to achieve the correct translation the linguist might need to disable the default auto-propagation (to prevent the translation of the first occurrence being pulled automatically into the second occurrence), but that manual step could fail or be easily overlooked.</p> # source target 1 Front Rueda (fem.) 2 wheel delantera (fem.) 3 Front Faro (masc.) 4 headlamp delantero (masc.) \u2714 <p>In a nutshell, split sentences can be a nuisance to translate into certain languages with different word order than English -- the linguist might have to work around the translation in difficult or impossible ways. Also, productivity and internal consistency can be compromised if the same text appears later in the same project, or in future cycles, with different or correct segmentation.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#expected-preparation", "title": "Expected preparation", "text": "<p>The expected result in the cases above would have been to use a tag or a placeholder to encode the inline code:</p> <p>1 See uses on <code>%s</code> to show 2 children in her pictograph   \u2714  2 How many <code>%s</code> will they need to draw?   \u2714 </p> <p>1 Click <code>&lt;BUTTON/&gt;</code> to move on.   \u2714 </p> <p>1 Front wheel   \u2714  2 Front headlamp   \u2714 </p> <p>In the examples above where the segment has been properly prepared with placeholders, it is very easy (and common practice) for the translator to insert the placeables tags in the position where the inline codes belong in the target version.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#tip", "title": "Tip", "text": "<p>To avoid this kind of issue, then, ask a translation technologist or a trained linguist to run a source review on your draft XLIFF files and then adjust the extraction filter accordingly, so that the filter knows which inline codes must be extracted along with the surrounding text and protected, and not interpreted as end of a paragraph.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#32-markup-nimiety", "title": "3.2. Markup nimiety", "text": "<p>Segments overloaded with markup make translation and all related subsequent language tasks more difficult, therefore increasing the chance to introduce errors in the translation, especially in right-to-left languages such as Arabic or Hebrew.</p> <p>Some inline codes are unavoidable, e.g. to provide style:</p> <pre><code>Put the lengths in order from &lt;b&gt;shortest&lt;/b&gt; to &lt;i&gt;longest&lt;/i&gt;. \u2714\n</code></pre> <p>However, other tags are unnecessary and should be avoided or cleaned up before preparing the files. For example, closing and opening tags of the same kind in the middle of a sentence or even in the middle of a word:</p> <pre><code>Vehicl&lt;/strong&gt;&lt;strong&gt;es in 2000  \u274c\n</code></pre> <p>When this happens repeatedly, it results in segments that are (unnecessarily) very translation unfriendly. For example:</p> <pre><code>&lt;strong&gt;Star&lt;/strong&gt;&lt;strong&gt;t &lt;/strong&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;strong&gt;i&lt;/strong&gt;&lt;strong&gt;me&lt;/strong&gt;  \u274c\n</code></pre> <p>In that example, there are a lot of <code>&lt;strong&gt;</code> tags there to do the same job that could be achieved with simply one tag pair. This tag multiplicity might arise from adding superfluous formatting in a word processor or a wysiwyg editor to create the source, or from converting with OCR or from PDF.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#expected-preparation_1", "title": "Expected preparation", "text": "<p>The expected design of the source content in the case above would have been to embed the formatted text with one single tag pair.</p> <pre><code>&lt;strong&gt;Start Time&lt;/strong&gt; \u2714\n</code></pre> <p>This tag pair is actually suprasentential markup, which could be excluded from the prepared segment, thus producing the following simple display in the translation editor:</p> <p>1 Start Time   \u2714 </p> <p>The solution of this issue does not affect how the source content is prepared, but instead it relates to the pre-processing of the source content, before it is prepared. The actual preparation (parsing, extraction and segmentation) is the same regardless of whether the issue is present in the source files.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#tip_1", "title": "Tip", "text": "<p>Provide feedback and tips to content authors and item developers and run some tag clean-up before extracting the text that must be included in the XLIFF files (tools like CodeZapper or TransTools Document Cleaner can be used for that in Word)[14].</p>"}, {"location": "i18n/xliff-prepp-best-practices/#33-ending-segments-at-line-breaks", "title": "3.3. Ending segments at line breaks", "text": "<p>In some cases, line breaks are used to limit the length of each line in the source text. During extraction, the text might be split down at these line break tags.</p> <p>For example:</p> <p>1 Since the 1970s, scientists have been 2 <code>&lt;br/&gt;</code>  \u274c  3 worried about the amount of Dioxin, a 4 <code>&lt;br/&gt;</code> \u274c  5 toxin in fish caught in Baltic Sea.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#expected-preparation_2", "title": "Expected preparation", "text": "<p>One potential approach would be to represent the line break tags are as placeholders:</p> <p><code>1</code> Since the 1970s, scientists have been <code>&lt;g0/&gt;</code> worried about the amount of Dioxin, a <code>&lt;g1/&gt;</code> toxin in fish caught in Baltic Sea.   \u2714 </p> <p>However, a much better approach would be to get rid of those line breaks, which were there probably to hard wrap the text at a certain width to adapt to some expected space, and soft wrap the translation by other more convenient and dynamic means (e.g. styles) in the actual final publication medium. In general it is recommended to separate content from layout.</p> <p>In any case it should not be assumed that the translator will keep the line break tags in the translation or that their location will need to be equivalent to the source</p> <p>Therefore, our recommendation, in the first place, would be to avoid using line break tags in the source text. Secondly (assuming we are dealing with HTML content), the width of the text can be defined by means of CSS styles. That approach  achieves the same exact results without introducing any noise in the source text and without affecting the work of the translator. See https://jsfiddle.net/msoutopico/3p7x8ryr/1/ or the screenshot below:</p> <p></p>"}, {"location": "i18n/xliff-prepp-best-practices/#tip_2", "title": "Tip", "text": "<p>To avoid this kind of issue, then, ask a translation technologist or a trained linguist to run a source review on your draft XLIFF files and/or your original source content and then clean up your source content (prefereably) to avoid hard-coding text wrapping or (less preferably) adjust the extraction filter accordingly, so that the line break element is treated as an inline code (extracted along with the surrounding text and protected) and not as the end of the paragraph.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#annexes", "title": "Annexes", "text": "<p>Preparing XLIFF files for translation in OmegaT entails some additional tweaks due to the special characteristics of this CAT tool.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#guidelines-for-creating-xliff-12-files-for-omegat", "title": "Guidelines for creating XLIFF 1.2 files for OmegaT", "text": ""}, {"location": "i18n/xliff-prepp-best-practices/#check-list-for-translation", "title": "Check list for translation", "text": "<p>There are two possibilities for creating new XILFF files for translation tasks.</p> <p>A. Using the Okapi XLIFF filter:</p> <ul> <li>The <code>target</code> element must be empty or missing, like so:</li> </ul> <p><pre><code>  &lt;trans-unit id=\"1086880\"&gt;\n&lt;source&gt;This is the source text.&lt;/source&gt;\n&lt;target/&gt;\n&lt;/trans-unit&gt;\n</code></pre> Also, the <code>trans-unit</code> must have property <code>xml:space=\"preserve\"</code>.</p> <p>B. Using the default OmegaT XLIFF filter:</p> <ul> <li>The <code>target</code> element must exist and be populated with the source text.</li> </ul> <p>For example:</p> <pre><code>  &lt;trans-unit id=\"1086880\"&gt;\n&lt;source&gt;This is the source text.&lt;/source&gt;\n&lt;target&gt;This is the source text.&lt;/target&gt;\n&lt;/trans-unit&gt;\n</code></pre>"}, {"location": "i18n/xliff-prepp-best-practices/#check-list-for-bilingual-review", "title": "Check list for bilingual review", "text": "<p>Make sure your bilingual/translated XLIFF files meet the following criteria:</p> <ul> <li>The <code>trans-unit</code> must have attribute <code>xml:space</code> with value <code>preserve</code> if leading and trailing space included in the source text must be replicated in the translation.</li> <li>The <code>trans-unit</code> must have attribute-value pair <code>approved=\"yes\"</code>.</li> </ul> <p>For example:</p> <pre><code>  &lt;trans-unit id=\"1086880\" xml:space=\"preserve\" approved=\"yes\"&gt;\n&lt;source&gt;This is the source text.&lt;/source&gt;\n&lt;target&gt;Esto es la traducci\u00f3n.&lt;/target&gt;\n&lt;/trans-unit&gt;\n</code></pre> <p>In this case the OmegaT project must use the Okapi XLIFF filter.</p>"}, {"location": "i18n/xliff-prepp-best-practices/#references", "title": "References", "text": "<ol> <li> <p> OmegaT is a free and open source computer-assisted translation tool (CAT-tool) that cApStAn uses to translate and review/edit XLIFF files in international large-scale translation projects. It offers many more technical possibilities than OLT. See our  OmegaT installation and customization guide: https://slides.com/capstan/omegat-installation-and-customization-guide/fullscreen \u23ce</p> </li> <li> <p> See https://okapiframework.org/wiki/index.php?title=Rainbow \u23ce</p> </li> <li> <p> See http://docs.oasis-open.org/xliff/xliff-core/xliff-core.html \u23ce</p> </li> <li> <p> XML schema: https://docs.oasis-open.org/xliff/v1.2/os/xliff-core-1.2-strict.xsd \u23ce</p> </li> <li> <p> The XLIFF checker can be downloaded from https://www.maxprograms.com/products/xliffchecker.html \u23ce</p> </li> <li> <p> See https://okapiframework.org/wiki/index.php?title=SRX. \u23ce</p> </li> <li> <p> Okapi Framework is a set of libraries that can be used to prepare files for translation, among other things. \u23ce</p> </li> <li> <p> See http://okapiframework.org/wiki/index.php?title=Ratel \u23ce</p> </li> <li> <p> See http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html#Struct_InLine and http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2-cd02.html. \u23ce</p> </li> <li> <p> See https://www.w3.org/International/questions/qa-escapes#not \u23ce</p> </li> <li> <p> See https://www.w3.org/International/questions/qa-escapes \u23ce</p> </li> <li> <p> See https://support.office.com/en-us/article/insert-ascii-or-unicode-latin-based-symbols-and-characters-d13f58d3-7bcb-44a7-a4d5-972ee12e50e0 and https://support.apple.com/en-us/HT201586 for Mac. \u23ce</p> </li> <li> <p> See https://www.w3.org/International/questions/qa-chars-vs-markup#not \u23ce</p> </li> <li> <p> See http://kb.memoq.com/article/AA-00485/0/Cleaning-unnecessary-tags-with-TransTools-Document-Cleaner.html \u23ce</p> </li> <li> <p> Microsoft's Best Practices for Developing World-Ready Applications</p> </li> </ol>"}, {"location": "projects/", "title": "Projects", "text": "<p>adlkfj</p>"}, {"location": "projects/flash/", "title": "IPSOS -- Eurograduate FLASH", "text": ""}, {"location": "projects/flash/FLASH_style-guide_pol-POL/", "title": "FLASH: style guide [pl-PL]", "text": ""}, {"location": "projects/flash/FLASH_style-guide_pol-POL/#feminine-gender-abbreviation", "title": "Feminine gender abbreviation", "text": "<p>According to the Polish local agency, gender inflection in the translation of pronoun 'you' (in all declensions) and second-person verbs must be done using the male form with any additional suffix (one or more lettrs) in brackets for the feminine form. In case of substitution the dash must be used before the new letter(s).</p> <p>Examples:</p> <ol> <li> <p>Creating female form by adding letters: \u201cYou (polite, in terms of Mr./Mrs.) did\u201d = \u201cPan zrobi\u0142\u201d for male and \u201cPani zrobi\u0142a\u201d for female = \u201cPan(i) zrobi\u0142(a)\u201d compressed.</p> </li> <li> <p>Creating female form by substituting letters: \u201cYou (polite, in terms of Mr./Mrs.) are willing\u201d = \u201cPan jest sk\u0142onny\u201d for male and \u201cPani jest sk\u0142onna\u201d for female = \u201cPan(i) jest sk\u0142onny(-a) compressed. </p> </li> </ol> <p>In the case of the genitive (your) \u201cPana/Pani\u201d, it should be written \u201cPana(-i)\u201d, meaning that we substitute \"a\" by \"i\". </p> <p>DO:</p> <ul> <li>Nie jest Pan(i) pewien/pewna... </li> </ul> <p>DON'T:</p> <ul> <li>jakie wydatki obejmuje Pana/Pani ubezpieczenie</li> </ul>"}, {"location": "projects/flash/flash_automation/", "title": "FLASH: Workflow automation \u2606", "text": "<p>This document outlines the steps that the PM must take to automate the translation of the Flash surveys, as well as what is the outcome of every step.</p> <p>To make changes in this document, edit /docs/flash_automation.md</p>"}, {"location": "projects/flash/flash_automation/#changes-history", "title": "Changes history", "text": "Date Person Summary 2021.03.29 Manuel Creation of first version of the document 2021.04.27 Manuel Added TM management, ADA config, updated triggered actions, general review 2021.10.08 Manuel Updated <code>_tech/processed.txt</code>'s name to <code>_tech/post.complete</code>. 2022.05.23 Manuel Review. 2023.10.15 Manuel Updates in language codes and logic to flag unaltered matches 2024.02.13 Manuel Updated to Python 3.10."}, {"location": "projects/flash/flash_automation/#recommended-tools", "title": "Recommended tools:", "text": "<ul> <li>7-zip for zipping, unzipping and opening packages (without unpacking)</li> <li>Total Commander for transferring files from one folder to another (especially from server to local and vice versa)</li> <li>Notepad (or any other text editor such as Sublime Text or Atom) to edit text files. DO NOT use Microsoft Word or Wordpad and the like instead of a text editor to edit text files.</li> <li>Typora for reading or editing markdown files.</li> </ul>"}, {"location": "projects/flash/flash_automation/#0-general", "title": "0. General", "text": ""}, {"location": "projects/flash/flash_automation/#some-notions-and-conventions", "title": "Some notions and conventions", "text": "<p>Here is a short list of common terms used in this document:</p> Term Explanation Project The container or generic project name (i.e. Eurobarometer) to which each translation workflow belongs. Survey Each actual translation request (e.g. <code>FLASH-001</code>, etc.) OmegaT project The folder containing all the OmegaT files, folders and project settings. Note: this is not a package, it's a folder. OmegaT package An OmegaT project that has been packed with extension <code>.omt</code>. Aka the OMT file. Reference Any materials that the client might have sent containing translations that we should use as reference. Language assets Any TMs, glossaries, etc. that we prepare to include in the OmegaT project or in MemoryLn. Version A language variant for which a whole language task is executed <p>Reminder: Every info item in file names must be separated with underscore (_). Hyphens or dashes (-) are reserved for separating parts in a compound item (e.g. <code>FLASH-001</code> or <code>fra-FRA</code>). Do not use underscores (_) inside items.</p>"}, {"location": "projects/flash/flash_automation/#project-folders", "title": "Project folders", "text": "<p>The project's root folder is located at <code>.../data/company/IPSOS/EUROBAROMETER_FLASH_2.0</code> (or <code>U:/IPSOS/EUROBAROMETER_FLASH_2.0</code>, if that's how the share is mounted in your machine).</p> <p>The project's root folder contains the following subfolders:</p> Folder Purpose <code>_tech</code> Tech team stuff (warning: beware of the dog!) <code>00_ADMIN</code> Budgets, bid information, SOW, etc. <code>01_SOURCE_MRT</code> Location of the source files handed off by the client. <code>02_AUTOMATION</code> Any files used by the autoamation that either TT or PM need to keep up to date. <code>03_INTERNAL</code> Internal resources for REF <code>04_REF</code> Any resources the client has provided as a reference or/and that could be converted into language assets. <code>05_MEETINGS</code> Meeting minutes <code>06_EHR</code> Resources related to Linguists <code>07_PROJECT_MANAGEMENT</code> PM stuff <code>08_FLASH_PROJECTS</code> All the workflow folders. <code>09_ASSETS</code> Any language assets (TMs, glossaries, etc.) used or produced in the project. <code>Z_outdated</code> Anything that won't be needed unless this statement is proved wrong... <p>For the sake of shortness, this document uses relative paths inside the project's root folder.</p>"}, {"location": "projects/flash/flash_automation/#1-pre-processing", "title": "1. Pre-processing", "text": "<p>Pre-processing and post-processing refer to any automation that takes place in the server before and after the language tasks.</p> <p>There is a translation workflow for every survey the client wants to translate. To initiate the workflow, the PM must put a new initiation bundle in the folder <code>/02_AUTOMATION/Initiation/</code> of the project. The name of the initiation bundle will be also the name of the survey folder under <code>/08_FLASH_PROJECTS</code> (e.g. if the initiation bundle is called <code>FLASH-005.zip</code>, the folder <code>/08_FLASH_PROJECTS/FLASH-005</code> will be created).</p> <p>The name of the initiation bundle (and survey folder) is expected to be something like, say, \"FLASH-420\" (it should contain the word \"FLASH\" in upper case followed by a three-digit number and an optional letter at the end).</p>"}, {"location": "projects/flash/flash_automation/#configuration", "title": "Configuration", "text": "<p>The configuration file (or config file for short) is available at <code>/02_AUTOMATION/Config/config.ods</code> and it contains certain more or less constant pieces of data that the automation needs to know about the project, the survey, the monitoring form, the source file or the deliverable, to either find or generate certain files in a certain location with a certain name.</p> <p>The PM (in consultation with TT) is responsible for keeping this config file up to date if there are any changes throughout the project. If there are no such changes, the config file does not need to be modified.</p>"}, {"location": "projects/flash/flash_automation/#initiation-bundle", "title": "Initiation bundle", "text": "<p>The initiation bundle must contain folders <code>00_source</code>, <code>10_deliverables</code> and then one folder for each language task (e.g. <code>01_TRA</code>, <code>02_ADA</code>, etc.).</p> <p>The <code>00_source</code> must contain the source MRT file (one <code>.xlsm</code> file only is expected), where all rows out of scope for translation have been hidden. The target MRT file will be generated in the folder <code>10_deliverables</code> and updated with every version that is processed.</p> <p>In other words:</p> <pre><code>\u251c\u2500\u2500 00_source\n\u251c\u2500\u2500 01_TASK\n\u251c\u2500\u2500 02_TASK\n\u251c\u2500\u2500 03_TASK (etc.)\n\u2514\u2500\u2500 10_deliverables\n</code></pre> <p>Each language task folder (e.g. <code>01_TRA</code>, <code>02_ADA</code>, etc.) must contain one file <code>lll-CCC.txt</code> containing the list of languages (one cApStAn language code per line) to which that language task applies and one file <code>lll-CCC.zip</code> containing the version folder structure to be replicated for each version.</p> <p>In particular for the adaptation task, a third file must be included under the <code>02_ADA</code> folder, called <code>ada_lang_mapping.ods</code>, containing the correspondences between base and borrowing versions.</p>"}, {"location": "projects/flash/flash_automation/#examples", "title": "Examples", "text": "<p>An example of <code>lll-CCC.zip</code> file would be:</p> <pre><code>Archive:  lll-CCC.zip\nName\n----\n01_To_Translator\n02_From_Translator\n03_From_Verifier\n04_Verif_Review\n05_Machine_Translation\n-------\n5 files\n</code></pre> <p>An example of the contents of the <code>lll-CCC.txt</code> file would be:</p> <pre><code>bul-BGR\nces-CZE\ndeu-DEU\nell-GRC\nesp-ESP\nest-EST\nfra-FRA\nhun-HUN\nita-ITA\npol-POL\nslo-SVK\nron-ROU\nrus-EST\n</code></pre> <p>An example of the contents of the <code>ada_lang_mapping.ods</code> file would be (base version code on the left, borrowing version code on the right):</p> 01_TRA 02_ADA deu-DEU deu-AUT nld-NLD nld-BEL fra-FRA fra-BEL swe-SWE swe-FIN rus-EST rus-LVA fra-FRA fra-LUX deu-DEU deu-LUX ell-GRC ell-CYP eng-ZZZ eng-IRL eng-ZZZ eng-MLT <p>In the example below, showing the contents to be zipped inside a fictitious initiation bundle, <code>01_TRA</code> and <code>02_ADA</code> are the task folders for the translation+verification and for adaptation tasks, respectively:</p> <pre><code>\u251c\u2500\u2500 00_source\n\u2502   \u251c\u2500\u2500 [source_MRT_file].xlsm\n\u251c\u2500\u2500 01_TRA\n\u2502   \u251c\u2500\u2500 lll-CCC.txt\n\u2502   \u2514\u2500\u2500 lll-CCC.zip\n\u251c\u2500\u2500 02_ADA\n\u2502   \u251c\u2500\u2500 ada_lang_mapping.ods\n\u2502   \u251c\u2500\u2500 lll-CCC.txt\n\u2502   \u2514\u2500\u2500 lll-CCC.zip\n\u2514\u2500\u2500 10_deliverables\n</code></pre> <p>A template can be found under <code>/02_AUTOMATION/Initiation/Templates/FLASH-XXX-Template.zip</code>. It may be used as the basis for the initiation bundle for a new survey translation workflow (after updating the various details to the characteristics of the new survey (e.g. the list of languages for each task, the source MRT file, the bundle's name, etc.), which must be put it in the folder <code>/02_AUTOMATION/Initiation/</code> of the project.</p> <p>The PM is responsible for preparing the survey's initiation bundle, e.g. updating the list of languages for the translation of every survey, etc. Tips: Use a text editor (e.g. Notepad, Notepad++, Sublime Text, etc.) to edit the list of languages. The tool 7zip is recommended to pack the <code>lll-CCC.zip</code> files and the contents of the initiation bundle.</p> <p>IMPORTANT: The <code>lll-CCC.zip</code> file should include the contents of the version subfolder, not the version subfolder itself. The best way to create the <code>lll-CCC.zip</code> file is to simply go into the model <code>lll-CCC</code> folder, select all subfolders and zip them, and then rename the zip file created as <code>lll-CCC.zip</code> if necessary. Do not zip the <code>lll-CCC/</code> folder itself. The same applies to the initiation bundle itself.</p>"}, {"location": "projects/flash/flash_automation/#pm-steps-to-prepare-the-initiation-bundle", "title": "@PM - Steps to prepare the initiation bundle", "text": "<p>In a nutshell:</p> <ol> <li>Copy the new MRT for translation and the initiation bundle template to a local folder in your machine.</li> </ol> <ul> <li> <p>The initiation bundle template can be fetched from <code>/EUROBAROMETER_FLASH_2.0/02_AUTOMATION/Initiation/Templates/FLASH-XXX-Template.zip</code>. </p> </li> <li> <p>A previously used initiation bundle may be used as a template instead.</p> </li> </ul> <ol> <li> <p>Open the new MRT in Excel and filter out rows that are not for translation. Only rows to be extracted for translation should be visible. Save and close.</p> <ul> <li>In the column that indicates whether translation is needed, there should be only digits (0, 1 or 2).</li> </ul> </li> <li> <p>Unzip the initiation bundle template (or simply open it in 7-zip, if you prefer).</p> </li> <li> <p>Put the new MRT file inside the <code>00_source</code> folder of the initiation bundle.</p> </li> <li> <p>Update the list of languages under each language task folder.</p> <ul> <li>Use a text editor to edit the <code>lll-CCC.txt</code>.</li> <li>You may use the Locale checker app in cApps to make sure the language codes are correct.</li> </ul> </li> <li> <p>Under the <code>ADA</code> task folder, make sure the file that maps the correspondences between base versions and their corresponding borrowing versions (e.g. <code>ada_lang_mapping.ods</code>) is complete and up to date.</p> </li> <li> <p>Zip the contents of the initiation bundle (or just close it if you had simply opened it in 7-zip in step 3).</p> <ul> <li>If you zip them, make sure you select the folders and pack them as a new zip file. Please DO NOT zip the main initiation bundle folder, but its contents!</li> </ul> </li> <li> <p>Rename the initiation bundle as the new survey name, e.g. <code>FLASH-005</code> (see above about character restrictions for this name).</p> </li> <li> <p>Copy the new initiation bundle you have created to the <code>/02_AUTOMATION/Initiation/</code> folder in the project in the server.</p> </li> </ol> <p>That's it. The process will start, the workflow will be created and, after a couple of minutes, the packages should be ready for dispatch.</p> <p>You can watch a hands-on demo of the above steps (or this whole section) in the video below:</p>"}, {"location": "projects/flash/flash_automation/#actions-triggered", "title": "Actions triggered", "text": "<p>When the initiation bundle is put in the folder <code>/02_AUTOMATION/Initiation/</code>,  several things happen within a few minutes: all version folders are created and the OmegaT project packages are created inside them.</p> <p>More in detail:</p> <p>Firstly, the survey folder structure is generated:</p> <ul> <li>The initiation bundle is uncompressed in <code>/08_FLASH_PROJECTS</code> thereby creating the survey workflow folder.</li> <li>It is also archived under <code>/02_AUTOMATION/Initiation/_done</code> (in case it needs to be reused).</li> <li>Inside each task folder under the survey folder, one version folder will be generated for each version in the list of languages (i.e. <code>lll-CCC.txt</code>) including the contents of the version project template (i.e. <code>lll-CCC.zip</code>).</li> <li>The list of languages and the version folder template are archived (for further reference, if needed) under the <code>_tech</code> folder inside the task folder.</li> <li>Any translations found in the source MRT file will be extracted and saved in TMs under <code>09_ASSETS/01_Incoming/FLASH_MRT_TM</code>.</li> </ul> <p>Secondly, the OmegaT project packages are generated for each version under the <code>/08_FLASH_PROJECTS/[survey]/[task]/[version]/01_To_Translator</code> folder, including:</p> <ul> <li>The right project settings (including segmentation rules, filter settings, etc.)</li> <li>The source file in HTML format, with perhaps a shortened name (a copy remains under <code>/08_FLASH_PROJECTS/[survey]/00_source</code> for reference).</li> <li>Any glossaries, if available under <code>09_ASSETS/01_Incoming/*_glossary</code>.</li> <li>Any TMs, if available under <code>09_ASSETS/01_Incoming/*_TM</code>.</li> </ul> <p>Thirdly, for the <code>eng-ZZZ</code> version, OmegaT will run in the background to translate the project with the source text.</p>"}, {"location": "projects/flash/flash_automation/#examples_1", "title": "Examples", "text": "<p>For example, for a fictitious \"FLASH-005\" survey with a file for translation called <code>S21007984_x0_multi.xlsm</code>, the following contents will be created under <code>/08_FLASH_PROJECTS/FLASH-005</code> when the initiation bundle <code>FLASH-005.zip</code> appears in <code>/02_AUTOMATION/Initiation/</code>:</p> <pre><code>\u251c\u2500\u2500 00_source\n\u2502   \u251c\u2500\u2500 Eurobarometer_FLASH-005_xxx-XXX_OMT.omt\n\u2502   \u251c\u2500\u2500 S21007984.html\n\u2502   \u2514\u2500\u2500 S21007984_x0_multi.xlsm\n\u251c\u2500\u2500 01_TRA\n\u2502   \u251c\u2500\u2500 _tech (...)\n\u2502   \u251c\u2500\u2500 bul-BGR\n\u2502   \u2502   \u251c\u2500\u2500 01_To_Translator\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Eurobarometer_FLASH-005_bul-BGR_OMT.omt\n\u2502   \u2502   \u251c\u2500\u2500 02_From_Translator\n\u2502   \u2502   \u251c\u2500\u2500 03_From_Verifier\n\u2502   \u2502   \u251c\u2500\u2500 04_Verif_Review\n\u2502   \u2502   \u2514\u2500\u2500 05_Machine_Translation\n\u2502   \u251c\u2500\u2500 fra-FRA\n\u2502   \u2502   \u251c\u2500\u2500 01_To_Translator\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 Eurobarometer_FLASH-005_fra-FRA_OMT.omt\n\u2502   \u2502   \u251c\u2500\u2500 (... etc. same for other versions)\n\u251c\u2500\u2500 02_ADA\n\u2502   \u2514\u2500\u2500 _tech (...)\n\u2514\u2500\u2500 10_deliverables\n    \u2514\u2500\u2500 S21007984_x0_multi.xlsm\n</code></pre> <p>The OMT packages generated under the <code>01_To_Translator</code> folder are named according to the pattern specified in the configuration file. They should not be renamed. Likewise, the expected name of the monitoring form is specified in the config file.</p>"}, {"location": "projects/flash/flash_automation/#2-diff-reports", "title": "2. Diff reports", "text": "<p>Diff reports showing verifier's interventions will be automatically generated when both the project package handed back by the translator and the project package handed back by the verifier are available.</p> <p>The process will permanently watch for the project package under the <code>03_From_Verifier</code> folder. When it appears there, if the package from the translator is found under <code>02_From_Translator</code>, both packages are sent to xDiff and a diff report is generated.</p> <p>The process will watch the paths specified in file <code>/02_AUTOMATION/Diff/flash_steps_for_xdiff.xlsx</code>.</p> <p>More information available here, under section 2. Background service.</p>"}, {"location": "projects/flash/flash_automation/#pm-steps-to-generate-the-xdiff-reports", "title": "@PM - Steps to generate the xDiff reports", "text": "<p>At the kickoff of the project (once-off), confirm that paths specified in the <code>flash_steps_for_xdiff.xlsx</code> are correct.</p> <p>Then, to generate each report, the PM doesn't really need to do anything special other than:</p> <ul> <li>Make sure that project packages haven't been renamed</li> <li>Put the package from translation under <code>02_From_Translator</code></li> <li>Put the package from verification under <code>03_From_Verifier</code></li> <li>Wait a few seconds</li> </ul> <p>If for any reasons the xDiff report is not generated, please check with TT or drag the packages manually to xDiff.</p>"}, {"location": "projects/flash/flash_automation/#3-post-processing", "title": "3. Post-processing", "text": "<p>When the files have been handed back by the linguists, some post-processing takes place.</p>"}, {"location": "projects/flash/flash_automation/#pm-steps-to-post-process-the-packages", "title": "@PM - Steps to post-process the packages", "text": "<p>When the verification review is complete, the PM must simply copy the OMT package and the monitoring form to the <code>05_Machine_Translation</code> folder.</p> <p>If for any reasons the files need to be post-procssed again, the PM can delete the <code>_tech</code> folder (or any specific file inside it) to let the post-processing step run again.</p>"}, {"location": "projects/flash/flash_automation/#actions-triggered-per-version", "title": "Actions triggered per version", "text": "<p>When both the finalized OMT package and the monitoring form (as an <code>.xlsm</code> file) are copied to the <code>05_Machine_Translation</code> folder for a specific version (i.e. under path <code>/08_FLASH_PROJECTS/[survey]/[task]/[version]/05_Machine_Translation</code>), that version is post-processed, which means that several things happen inside that folder within a few minutes:</p>"}, {"location": "projects/flash/flash_automation/#version-wise", "title": "Version wise:", "text": "<ul> <li>Before anything else, OmegaT is run on the project behind the scenes to generate the target HTML file with the translation and export the project as a bilingual Excel.</li> <li>Last, a <code>_tech</code> folder is generated in the <code>05_Machine_Translation</code>, containing these files:</li> <li><code>omt.complete</code>, which indicates that the target files have been produced,</li> <li><code>mt.complete</code>, which indicates that the translation has been back-translated,</li> <li><code>post.complete</code>, which indicates that this version has been processed and the MRT populated with it.</li> </ul> <p>Those files stop the corresponding automation steps from running again on a version that has already been post-processed. </p> <p>Tip: If for any reason any of the post-processing steps needs to be repeated for one version, simply delete the corresponding <code>*.complete</code> file (or just the whole <code>_tech</code> folder).</p>"}, {"location": "projects/flash/flash_automation/#monitoring-form-wise", "title": "Monitoring form-wise:", "text": "<ul> <li>The target-language column in the Excel export is machine translated to English (by the engine defined in the config file), to be used as the back-translation.</li> <li>The target-language column from the Excel export and its back-translation are added to the monitoring form, in the two columns specified in the config file.</li> <li>A zip file called <code>[survey]_TAVF_all.zip</code> under <code>10_deliverables</code> is updated with the monitoring form (TAVF file) for this version.</li> </ul> <p>Warning: If the MT engine does not cover that language, the back-translation will be empty.</p>"}, {"location": "projects/flash/flash_automation/#target-file-wise", "title": "Target file-wise:", "text": "<ul> <li>The target (HTML) file is converted back to Excel (kind of monolingual MRT, with the same structure as the source-language column in the original MRT). Both files (HTML and Excel) contain one same target version of the survey. Both are:<ul> <li>archived for reference under the <code>05_Machine_Translation/_done</code> folder</li> <li>added to a <code>done</code> folder inside the OMT package.</li> </ul> </li> <li>The column in the target  MRT file (under <code>10_deliverables</code>) corresponding to the version being post-processed is updated with the translation.</li> </ul> <p>For example:</p> <pre><code>10_deliverables:\n\u251c\u2500\u2500 FLASH-005_TAVF_all.zip     (&lt;---- containing all monitoring forms)\n\u2514\u2500\u2500 S21007984_x0_multi.xlsm    (&lt;---- containing all target versions, one per column)\n</code></pre> <p>When all versions have been post-processed, all columns in the target MRT are populated and all the monitoring forms are included in final TAVF bundle.</p>"}, {"location": "projects/flash/flash_automation/#tm-wise", "title": "TM-wise:", "text": "<ul> <li>The master TM (<code>-level2</code> flavour) from each OmegaT project is added to <code>09_ASSETS/02_Outgoing/[survey]_TM.zip</code>.</li> <li>The master TM (<code>-omegat</code> flavour) from each OmegaT project is added to <code>09_ASSETS/01_Incoming/FLASH_OMT_TM</code>.</li> </ul>"}, {"location": "projects/flash/flash_automation/#formatting-in-the-mrt", "title": "Formatting in the MRT", "text": "<p>Updating the target MRT file with all the translations removes the formatting from all worksheets. It's possible to re-apply the same formatting on each worksheet by opening the source MRT and the target MRT, and copying the formatting from the former and pasting it in the target (for the several worksheets in the file). If this becomes a nuisance, we could look again into a possible solution.</p>"}, {"location": "projects/flash/flash_automation/#validation-and-updates", "title": "Validation and updates", "text": "<p>Before delivery, the validation macro must be run in the target MRT file. If the macro highlights any required changes in a translation to make it pass the validation, the changes should not be entered directly in the target MRT file. Instead, the translation in the OmegaT project under <code>05_Machine_Translation</code> should be updated, and then the <code>_tech/post.complete</code> deleted so that that version is post-processed again.</p>"}, {"location": "projects/flash/flash_automation/#4-language-asset-management", "title": "4. Language asset management", "text": "<p>The project has a <code>09_ASSETS</code> folder, that contains language assets used or produced in the project. Folder <code>09_ASSETS/01_Incoming</code> contains TMs and glossaries what will be added to each new OmegaT project package, and folder <code>09_ASSETS/02_Outgoing</code> contains the archived TMs containing all the translations we\u2019re producing, for the purpose of, say, sharing them with the client, adding them to MemoryLn, etc.</p>"}, {"location": "projects/flash/flash_automation/#incoming-assets", "title": "Incoming assets", "text": "<p>The <code>09_ASSETS/01_Incoming</code>  folder has several subfolders. On the one hand, there\u2019s one for each batch of TMs or glossaries we prepare out of separate resources or reference materials that the client sends. That\u2019s the case of folders like <code>COFOE_glossary</code> or <code>FL419_TM</code>.</p> <p>On the other hand, there are two more folders:</p> <ul> <li> <p><code>FLASH_MRT_TM</code>: This hosts TMs with the translations that each source MRT file we receive contains for a specific survey, which are extracted when the translation workflow for that survey is initiated. When the OmegaT project packages are compiled for each version, if this folder contains a TM for that version, it is included in the package.</p> </li> <li> <p><code>FLASH_OMT_TM</code>: This contains the master TMs (exported from each OmegaT project) from all previous surveys, which will be also added to OMT packages for new surveys. For example, right now (after having handled two surveys) there are only TMs for FLASH-001 and FLASH-002, which will be added for OMT packages for FLASH-003. Master TMs from the OMT packages for FLASH-003 will be added to this folder when a version reaches step <code>05_Machine_Translation</code> (see above), which will thereby be available for FLASH-004. And so on and so forth.</p> </li> </ul>"}, {"location": "projects/flash/flash_automation/#outgoing-assets", "title": "Outgoing assets", "text": "<p>The main purpose of the <code>02_Outgoing</code> folder and the zip files inside is to store the master TMs from all surveys in this project in case they need to be shared with other tools (MemoryLn, a CAT tool, etc.), other parties, etc. (e.g. to include as deliverable to the client). There is one zip per survey containing all the TMs for all the languages for that survey.</p>"}, {"location": "projects/flash/flash_automation/#checks", "title": "Checks", "text": "<p>Delete issues files.</p>"}, {"location": "projects/flash/flash_automation/#todo", "title": "TODO", "text": "<ul> <li>Check that eng* versions are not sent to MT (instead the translation itself should be used as \"pseudo-backtranslation\")</li> <li>Update xDiff docs</li> <li>Check for completion in folders <code>02_From_Translator</code> and <code>03_From_Verifier</code> -&gt; completion.txt/pending.txt</li> <li>Check contents of initialization bundle -&gt; warning.txt</li> <li>Check whether any version is missing in the TAVF bundle under 10_deliverables -&gt; completion.txt/pending.txt</li> <li>Check whether a file in a folder has an unexpected name -&gt; warning.txt</li> <li>Check name of init bundle -&gt; warning.txt</li> <li>Prevent formatting loss when updating the target MRT file (not sure it's possible)</li> <li>Create merged TMs with newer-first/older-last order for OT5</li> <li>Get wordcount stats for all versions</li> <li>Use pyenv or similar to use a python installation other than the system's default version</li> </ul>"}, {"location": "projects/flash/flowchart/", "title": "FLASH: automation diagram \u2606", "text": ""}, {"location": "projects/flash/flowchart/#scripts", "title": "Scripts:", "text": "<pre><code>crontab -&gt; launcher.sh\n            \u251c\u2500\u2500&gt; flash_init.sh\n            \u2502    \u251c\u2500\u2500&gt; flash_prepp_extract.py\n            \u2502    \u251c\u2500\u2500&gt; conv_mrt2tmx.py\n            \u2502    \u2514\u2500\u2500&gt; flash_version.sh (loop)\n            \u2502         \u2514\u2500\u2500&gt; flash_create_omtprj.py\n            \u251c\u2500\u2500&gt; flash_post.sh\n            \u2502    \u251c\u2500\u2500&gt; flash_mk_ada_pkgs.py\n            \u2502    \u251c\u2500\u2500&gt; flash_mt_omtexp_to_mf.py\n            \u2502    \u251c\u2500\u2500&gt; flash_prepp_merge.py\n            \u2502    \u2514\u2500\u2500&gt; checker.sh\n            \u251c\u2500\u2500&gt; xdiff_poster.sh\n            \u2514\u2500\u2500&gt; update_docs.sh\n                 \u2514\u2500\u2500&gt; update_docs.py\n</code></pre>"}, {"location": "projects/flash/flowchart/#docs", "title": "Docs:", "text": "<pre><code>flash_prepp_help (original Ur)\n\u2514\u2500\u2500&gt; docs/\n     \u2514\u2500\u2500&gt; post to https://capps.capstan.be/doc/ (doc online)\n          \u2514\u2500\u2500&gt; save to U:\\IPSOS\\EUROBAROMETER_FLASH_2.0\\02_AUTOMATION\\Doc\n</code></pre>"}, {"location": "projects/flash/flowchart/#explanation-of-each-script", "title": "Explanation of each script", "text": "Abbrev Explanation init initialization prepp preparation extract extraction omtprj OmegaT project mrt2tmx conversion of translation found in the MRT into the TMX files flash_version.sh Loops through all version folders found and calls <code>flash_create_omtprj.py</code>. post post-processing (merge etc.) mk make ada adaptation pkgs packages mt machine translation omtexp Excel export of the OmegaT project mf monitoring form merge merge"}, {"location": "projects/ipsos/workflow_automation/", "title": "IPSOS \u2013 workflow automation", "text": "<p>This document outlines the process to automate the creation of the workflow folders and packages for an IPSOS project (other than FLASH).</p> <p>If you're a PM in a rush to create the workflow (or if you have already read this document once), you can go straight to section 1 How to use the automation: quick steps below. However, reading the whole document is recommended to understand what you're doing.</p> <p>The latest version of this document: https://capps.capstan.be/doc/workflow_automation.php. This document must be edited in github.</p>"}, {"location": "projects/ipsos/workflow_automation/#01-changes-history", "title": "0.1 Changes history", "text": "Date Person Summary 12.05.2021 Manuel Creation of first version of the document 25.05.2021 Manuel Replacing <code>lll-CCC.txt</code> with task sheets in the config file 06.09.2021 Manuel Simplified and restructured the document to better separate quick steps and detailed info. 15.09.2021 Manuel Added information about creating the root folder of the project and scheduling the automation for a new root."}, {"location": "projects/ipsos/workflow_automation/#02-recommended-tools", "title": "0.2 Recommended tools:", "text": "<ul> <li>7-zip for zipping, unzipping and opening packages (without unpacking).</li> <li>Total Commander for transferring files from one folder to another (especially from server to local and vice versa).</li> <li>Notepad (or any other text editor such as Sublime Text or Atom) to edit text files. DO NOT use Microsoft Word or Wordpad and the like instead of a text editor to edit text files!</li> </ul>"}, {"location": "projects/ipsos/workflow_automation/#03-terminology", "title": "0.3 Terminology", "text": "<p>You are expected to understand the following concepts: workflow, workflow folder, workflow initiation, configuration file (or config file), initiation bundle (or init bundle), (source) files, (OMT) packages, language tasks, versions, version folders.</p> <p>In this document, curly braces are used for <code>{placeholders}</code>. </p>"}, {"location": "projects/ipsos/workflow_automation/#04-preconditions", "title": "04. Preconditions", "text": "<p>This document presumes that the root folder of the project already exists. If the root folder of the project doesn't exist yet, it must be created before you can follow the steps below, and it must contain a <code>02_AUTOMATION</code> folder. Ask TT to add it or copy it from  <code>u:\\IPSOS\\_tech\\02_AUTOMATION</code>.</p> <p>The FLASH project (see <code>u:\\IPSOS\\EUROBAROMETER_FLASH_2.0</code>) is a good source of inspiration to create a root folder for your project with a neat structure. </p>"}, {"location": "projects/ipsos/workflow_automation/#1-how-to-use-the-automation-quick-steps", "title": "1. How to use the automation: quick steps", "text": "<p>The PM must prepare the initiation bundle and maintain the configuration file. </p> <p>This document presumes that the root folder of the project already exists. If that's not the case (e.g. because it's a new project), please see 0.4 Preconditions above. </p>"}, {"location": "projects/ipsos/workflow_automation/#11-configuration", "title": "1.1. Configuration", "text": "<p>Unless there are changes throughout the project, this configuration should be a once-off step. In the config file (located at <code>{root}/02_AUTOMATION/Config/config.xlsx</code>), do:</p> <ol> <li>Review and update the list of languages per task.<ul> <li>You may use the Locale checker app in cApps to make sure the language codes are correct.</li> </ul> </li> <li>Review and update options and parameters.</li> </ol>"}, {"location": "projects/ipsos/workflow_automation/#12-adding-new-root-folders-to-the-automation", "title": "1.2 Adding new root folders to the automation", "text": "<p>Please send the path to the root folder of the project to manuel.souto@capstan.be to request scheduling the automation (which by default will run every minute unless you have a different preference). This path is the value of the \"root\" parameter in the config file.</p> <p>Handover tip for TT: root paths (absolute paths, unix form) must be added to the file <code>/media/data/data/company/cApStAn_Tech/20_Automation/Scripts/cli_automation/workflow_creation/paths/roots.txt</code>.</p>"}, {"location": "projects/ipsos/workflow_automation/#13-workflow-initiation", "title": "1.3. Workflow initiation", "text": "<p>To initiate the workflow (i.e. to create a new workflow folder containing all the necessary subfolders and files), create a new initiation bundle:</p> <ol> <li>Copy the initiation bundle template (i.e. <code>{root}/02_AUTOMATION/Initiation/Templates/init_bundle_template.zip</code>) or the initiation bundle used for a previous workflow, to a local folder in your machine, and unzip it there (or simply open it in 7-zip, if you prefer).</li> <li>If necessary, update the list of subfolders in the version folder template (i.e. <code>lll-CCC.zip</code>) under each language task. </li> <li>Zip again the contents of the initiation bundle (or just close it if you are using 7-zip).</li> <li>Rename the initiation bundle as what you want to call the new workflow (use only letters, numbers and dash, avoid underscore). The name of workflow folder is taken from the init bundle.</li> <li>Copy your new initiation bundle to the <code>{root}/02_AUTOMATION/Initiation/</code> folder in the server.</li> </ol>"}, {"location": "projects/ipsos/workflow_automation/#14-files", "title": "1.4. Files", "text": "<p>To create the OMT packages for dispatch:</p> <ol> <li>Export the XLIFF files from memoQ or Trados</li> <li>Copy them to folder <code>{root}/05_WORKFLOWS/{workflow}/00_source/files</code></li> </ol> <p>It's also possible to add the XLIFF files to the <code>00_source</code> folder of the initiation bundle (steps above) before initiating the workflow to have the packages created at the same time as the workflow folders.</p>"}, {"location": "projects/ipsos/workflow_automation/#2-workflow-and-package-creation-in-detail", "title": "2. Workflow and package creation in detail", "text": "<p>The root folder of the project (referred here as <code>{root}</code> or as the leftmost <code>/</code>, full path specified in the config file) contains a folder called <code>02_AUTOMATION</code>, which in turn contains folders <code>Initiation</code> and <code>Config</code>, where the initiation bundle and the config file are expected, respectively.</p> <pre><code>/path/to/project/root\n\u251c\u2500\u2500 02_AUTOMATION\n\u2502   \u251c\u2500\u2500 Config\n\u2502   \u2502   \u2514\u2500\u2500 config.xlsx\n\u2502   \u2514\u2500\u2500 Initiation\n\u2502       \u2514\u2500\u2500 {init-bundle}.zip\n...\n</code></pre> <p>The name and location under <code>{root}</code> of the <code>02_AUTOMATION</code> folder are not customizable. </p>"}, {"location": "projects/ipsos/workflow_automation/#21-configuration-file", "title": "2.1. Configuration file", "text": "<p>The configuration file (or config file for short) is available at <code>{root}/02_AUTOMATION/Config/config.xlsx</code> and it contains some information that the automation needs to know about the project, e.g. to either find or generate certain files in a certain location with a certain name. </p> <p>The configuration file is common for all workflows of the project.</p> <p>The PM (in consultation with TT) should update the config file whenever there are any changes throughout the project, but it might be left as it is throughout the project if there are no such changes.</p> <p>The config file contains several worksheets:</p> Sheet Purpose options You can indicate whether an action must be carried out or not. Please do not rename. params A number of parameters (like folder names, package name template, etc.) that might change across projects. Please do not rename. 01_TRA The list of versions (cApStAn language codes) for language task <code>01_TRA</code> (the sheet name must match the folder name for this task in the init bundle). 02_ADA The list of versions (cApStAn language codes) for language task <code>02_ADA</code> (the sheet name must match the folder name for this task in the init bundle). <p>There must be one worksheet for each language task. Each task folder (and the corresponding worksheet in the config file) must match pattern <code>\\d\\d_[A-Z]{3}</code>(i.e. two digits - underscore - three upper-case letters), e.g. <code>01_TRA</code>, <code>02_ADA</code>.</p> <p>The PM can edit this file any time, e.g. to add new rows for new versions to the language task sheets or to change the values of options or parameters.</p> <p>The lists of language codes in the config file determines what version folders will be created inside the language task folders. Version folders will be created only for language versions included in the config file.</p>"}, {"location": "projects/ipsos/workflow_automation/#22-initiation-bundle", "title": "2.2. Initiation bundle", "text": "<p>The initiation bundle (or init bundle for short) is a zipped template of the hierarchy of folders that the workflow folder must contain. It must contain folders <code>00_source</code> for the source files and a folder for each language ask (e.g. <code>01_TRA</code>, <code>02_ADA</code>, etc.).</p> <p>The <code>00_source</code> folder contains an OmegaT package template and a <code>files</code> folder, which might contain source files or not.</p> <p>Each language task folder (e.g. <code>01_TRA</code>, <code>02_ADA</code>, etc.) in the init bundle must contain one file <code>lll-CCC.zip</code> that is a zipped template of the version folder structure to be replicated for each version.</p> <pre><code>workflow:\n\u251c\u2500\u2500 00_source\n\u2502   \u251c\u2500\u2500 omtpkg_template_ipsos.omt\n\u2502   \u2514\u2500\u2500 files\n\u2502       \u251c\u2500\u2500 project_blabla.xlsm_ar.mqxliff\n\u2502       \u2514\u2500\u2500 project_blabla.xlsm_de-AT.mqxliff (etc.)\n\u251c\u2500\u2500 01_TRA\n\u2502   \u2514\u2500\u2500 lll-CCC.zip\n\u2514\u2500\u2500 02_ADA\n    \u2514\u2500\u2500 lll-CCC.zip\n</code></pre> <p>If the <code>00_source/files</code> folder of the init bundle contains any source files (e.g. memoQ XLIFF files), packages for the corresponding versions will be created at the time of workflow initiation. However, the <code>00_source/files</code> folder in the init bundle may be left empty and the PM can add source files to <code>00_source/files</code> any time. Packages will only be created if a version folder exists for that language.</p> <p>An example of <code>lll-CCC.zip</code> file would be:</p> <pre><code>Archive:  lll-CCC.zip\nName\n----\n01_To_Translator\n02_From_Translator\n03_From_Verifier\n04_Verif_Review\n05_Machine_Translation\n-------\n5 folders\n</code></pre> <p>To create the initiation bundle for a new workflow, the PM can use a template or reuse the init bundle used to create a previous workflow. The template is at <code>{root}/02_AUTOMATION/Initiation/Templates/init_bundle_template.zip</code>. Deployed workflows' init bundles are under <code>{root}/02_AUTOMATION/Initiation/</code> (or <code>{root}/02_AUTOMATION/Initiation/_done</code>, if they are archived).</p> <p>To initiate the workflow, the init bundle must be put in the folder <code>{root}/02_AUTOMATION/Initiation/</code>.</p>"}, {"location": "projects/ipsos/workflow_automation/#23-automated-actions", "title": "2.3. Automated actions", "text": "<p>When the initiation bundle is put in the folder <code>{root}/02_AUTOMATION/Initiation/</code>,  several things happen: all version folders are created for the specified versions and the OmegaT project packages are created inside them for any source files found in the <code>00_source</code> folder.</p> <p>More in detail:</p> <ol> <li>The workflow folder structure is generated:</li> <li>The initiation bundle is deployed in <code>{root}/08_WORKFLOWS</code> thereby creating the  workflow folder.<ul> <li>It is also archived under <code>{root}/02_AUTOMATION/Initiation/_done</code> (in case it needs to be reused).</li> </ul> </li> <li> <p>Inside each task folder under the workflow folder, one version folder will be generated for each version in the list of languages specified in the config file, including the contents of the version project template (i.e. <code>lll-CCC.zip</code>).</p> <ul> <li>The version folder template is archived (for further reference, if needed) under the <code>_tech</code> folder inside the task folder.</li> </ul> </li> <li> <p>The OMT packages are generated for each version in the folders specified in the config file, including the file(s) for that version found in the <code>00_source</code> folder. Packages will be named according to the pattern specified in the config file and should not be renamed.</p> </li> <li>The source files can be added to the <code>00_source</code> folder before or after initiating the workflow.</li> </ol>"}, {"location": "projects/ipsos/workflow_automation/#24-achtung", "title": "2.4 Achtung", "text": "<p>Unlike in FLASH, the list of languages for each task is fetched from the config file, not from a <code>lll-CCC.txt</code> file.</p> <p>Unlike in other workflow automations, packages for adaptation are created using source files exported from memoQ, not tweaking packages for a base version.</p> <p>The list of languages and the source files can be updated at any point. New version folders and new packages will be created accordingly if they don't exist.</p>"}, {"location": "projects/ipsos/workflow_automation/#3-faq", "title": "3. FAQ", "text": ""}, {"location": "projects/ipsos/workflow_automation/#31-are-packages-automatically-created-when-i-drop-the-source-files-in-the-00_source-folder", "title": "3.1. Are packages automatically created when I drop the source files in the <code>00_source</code> folder?", "text": "<p>Yes, as long as they are named correctly (including the language code that memoQ adds to the file) and as long as the version folder exists for that language version.</p>"}, {"location": "projects/ipsos/workflow_automation/#32-is-the-list-of-language-versions-updated-automatically-in-the-config-file-when-i-drop-the-source-files-in-the-00_source-folder", "title": "3.2. Is the list of language versions updated automatically in the config file when I drop the source files in the <code>00_source</code> folder?", "text": "<p>No, the list must be updated manually in the config file.</p>"}, {"location": "projects/ipsos/workflow_automation/#33-will-the-omt-package-be-updated-automatically-if-a-source-file-in-folder-00_source-is-replaced-with-a-newer-version", "title": "3.3. Will the OMT package be updated automatically if a source file in folder <code>00_source</code> is replaced with a newer version?", "text": "<p>No, the package needs to be deleted manually, so that it can be created again with the new source file(s).</p>"}, {"location": "projects/ipsos/workflow_automation/#34-where-does-the-name-of-the-workflow-folder-come-from", "title": "3.4. Where does the name of the workflow folder come from?", "text": "<p>The workflow folder takes its name from the initiation bundle used to initiate that workflow.</p>"}, {"location": "projects/ipsos/workflow_automation/#35-i-cant-find-the-init-bundle-template-where-is-it", "title": "3.5. I can't find the init bundle template. Where is it?", "text": "<p>If the root folder of the project already exists, it can be found at <code>{root}/02_AUTOMATION/Initiation/Templates/</code>. If the root folder of the project hasn't been created or has just been created but it's not complete, see 0.4 Preconditions above.</p>"}, {"location": "projects/pisa/", "title": "PISA 2025", "text": "<p>asdfasdf</p>"}, {"location": "projects/pisa/errors/", "title": "Errors", "text": ""}, {"location": "projects/pisa/errors/#previewer", "title": "Previewer", "text": "<p>TO BE DOCUMENTED WHAT THIS MEANS... (OR REMOVE IF NOT FREQUENT)</p> <p>Call Error:Could not store translation: TypeError: Cannot read property 'innerHTML' of null Reference number:168587138967440</p> <p>TO BE DOCUMENTED WHAT THIS MEANS... (OR REMOVE IF NOT FREQUENT)</p> <p>Request failed with status code 504 Reference number:16859089327889</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/", "title": "PISA 2025 -- trend translation transfer", "text": "<p>Summarised steps: </p> <ul> <li>Traverse the project with <code>Ctrl+U</code></li> <li>Retrieve the trend translation from the trend TMs and populate every segment with it</li> </ul>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#cases", "title": "Cases", "text": "<p>Possible cases: </p> <ol> <li>pre-translated segment</li> <li>untranslated segment but a fuzzy match</li> <li>untranslated segment and no fuzzy match</li> </ol> <p>Relative actions for each case: </p> Case Action Exact match Nothing to do, the segment is pre-translated Fuzzy match Insert and update if needed No fuzzy match Concordance search, possibly insert fragments"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#1-pre-translated-segment-with-fuzzy-match", "title": "1. Pre-translated segment with fuzzy match", "text": "<p>When that's the case, the pre-translated segment will have a pink shade, and there's nothing to do at this stage. While moving through the project with <code>Ctrl+U</code> these pre-translated will be skipped. </p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#2-untranslated-segment-with-fuzzy-matches", "title": "2. Untranslated segment with fuzzy match(es)", "text": "<p>In some cases, the segment will not be pre-translated but there will be one or more valid fuzzy match (with a high score (or high enough) so that it is displayed in the Matches pane. This is the easy case, unfortunately not that frequent. </p> <p>In those cases, press <code>Ctrl+I</code> to insert the match. </p> <p>Not likely, but it could happen that several matches (or parts of matches) need to be combined to translate a segment. If you need to insert different matches or different part of several matches, press <code>Ctrl+#</code> to select the match (where <code>#</code> is the match number) or double click the match before pressing <code>Ctrl+I</code>. If you want to insert part of a match only, select the fragment in the match with your mouse before pressing <code>Ctrl+I</code>.</p> <p>demo needed?</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#21-special-cases", "title": "2.1. Special cases", "text": ""}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#a-exact-match-with-only-a-difference-in-case", "title": "a) Exact match with only a difference in case", "text": "<p>Steps: </p> <ul> <li>Press <code>Ctrl+i</code> to insert the match</li> <li>Press <code>Ctrl+A</code> to select the whole target text</li> <li>Press <code>Shift+F3</code> to cycle through case options</li> </ul>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#3-untranslated-segment-with-no-useful-fuzzy-matches", "title": "3. Untranslated segment with no useful fuzzy matches", "text": "<p>In some cases, the Matches pane will not have any valid fuzzy match. In that case, after inspecting the matches pane and confirming that there's nothing there that you can use, you must search for the source text in the TMs to find the translation. </p> <p>To do that:</p> <ul> <li> <p>Select the source text that you want to search in the TMs.</p> <p>To select the source text in the segment without using your keyboard, press <code>F2</code> and then hold the <code>Shift</code> and press the upwards and leftwards arrows.</p> </li> <li> <p>Press <code>Ctrl+F</code> to launch the text search window. The previously selected source text will be filled in automatically. Press the Search button to get results. </p> </li> </ul> <p>Make sure you've marked the right options: TMs, translated, source text, etc.</p> <ul> <li>Copy the target text or the relevant part in the search results and paste it as the translation of the relevant segment(s).</li> </ul>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#tips-and-tricks", "title": "Tips and tricks", "text": "<p>Let's see different strategies to deal with each case a bit more in detail.</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#split-matches", "title": "Split matches", "text": "<p>It may be the case that a fuzzy match or a TM search result contains the translations for several segments, in which case you need to split the match in several parts. In other words, you will find the translation of the segment you\u2019re looking for as part of a longer text chunk. </p> <p>That's typically the case when a TM contains the translation of a paragraph -- the translation found in the TM will have to be split among all the segments belonging to that paragraph.</p> <p>Tip: If you find the translation of a whole paragraph containing several segments, you might be handy to copy the translation of the whole paragraph from the search results once, and then use copy-paste to distribute the fragments in the segment they belong.</p> <p>For example: </p> <p></p> <p>Or here's a demo where every step is spelled out:</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#tm-searches", "title": "TM searches", "text": "<p>If you cannot find a concordance, try searching for a smaller part or removing certain elements that might be preventing the match. For example:</p> <p></p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#markup", "title": "Markup", "text": "<p>Tags must be inserted as normal. The recommended approach to insert paired tags around formatted words or expressions is to use the auto-completer: </p> <ol> <li>Select the word or expression that must be formatted</li> <li>Press <code>Ctrl+Space</code> to cycle through the auto-completer until you see the tags section</li> <li>Press <code>Enter</code> to insert the tag pair. </li> </ol> <p></p> <p>Of course, <code>Ctrl+T</code> can also be used to insert individual tags.</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#legacy-tags", "title": "Legacy tags", "text": "<p>There are two versions of each TM: one original version and one where markup has been removed. </p> <p>Legacy markup must be removed anyway (and replaced with new tags) and also lower the matching score, so it's better to insert the match or copy the translation without legacy tags. </p> <p>However, the original TMs including legacy markup are kept because legacy tags could be useful to give you an idea of what part of the text was formatted in the trend version.</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#removing-legacy-tags", "title": "Removing legacy tags", "text": "<p>If you happen to insert a match that contains legacy HTML tags (e.g. <code>&lt;b&gt;</code>) and you find it cumbersome or unreliable to remove them manually (e.g. because there are many of them), you can run script 6 - Strip HTML tags (<code>Ctrl+Shift+6</code>).</p> <p></p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#replacements", "title": "Replacements", "text": "<p>If you find yourself making some edits repeatedly, it might be possible to batch process all instances at the end in one go.  </p> <p>For example, if you're inserting a superscript 2 (i.e. \u00b2) for every instance of square meters units, you could just leave \"m2\" and then search all instances \"m2\" and replace with \"m\u00b2\" in one go as a post-processing step when all segments are translated.</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#case", "title": "Case", "text": "<p>If you need to change the case of a translation (e.g. it is expected to be in Title Case but the match available comes in UPPER CASE), you can do with shortcut <code>Shift+F3</code>. Follow these steps: </p> <ol> <li>Insert the match or paste the translation</li> <li>Select the part you want to change the case of</li> <li>Press <code>Shift+F3</code> to cycle through case options.</li> </ol> <p>You can choose upper case, lower case, all capitals or title case. </p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#glossary", "title": "Glossary", "text": "<p>To optimise the translation of certain segments where you need to assemble several fragments, you may find useful to add some fragments to the glossary if they are always the same. </p> <p>This is typically the case of the prompt \"Refer to X on the right\", where X is new every time but the rest is repeated for every unit. </p> <p>Demo:</p>"}, {"location": "projects/pisa/pisa2025_trend-transfer_guide/#references", "title": "References", "text": "<ul> <li>cApStAn's OmegaT guides</li> </ul>"}, {"location": "projects/pisa/trainings/", "title": "OmegaT trainings", "text": ""}, {"location": "projects/pisa/trainings/#omegat-for-pisa25-translatorsreconcilers", "title": "OmegaT for PISA25 translators/reconcilers", "text": "<p>This was a 2-hour OmegaT training for the Uzbeq team.</p> <p>The slides used in the training: </p>"}, {"location": "projects/pisa/trainings/#handling-and-fixing-tags-in-omegat", "title": "Handling and fixing tags in OmegaT", "text": "<p>10' video about the issue we saw yesterday. It's to share with users but it can be even more useful for us, please watch it unless you are 100% sure that you know how to advise the user in this kind of issue:  </p>"}, {"location": "projects/ysc/gender-adaptation/", "title": "YSC -- gender adaptation", "text": ""}, {"location": "projects/ysc/gender-adaptation/#1-source-3-target-files", "title": "1 source =&gt; 3 target files", "text": ""}, {"location": "projects/ysc/gender-adaptation/#source-file", "title": "Source file:", "text": "<pre><code>  &lt;data name=\"dc.foo.bar.qux\"&gt;\n        &lt;value&gt;I am an architect&lt;/value&gt;\n    &lt;/data&gt;\n</code></pre>"}, {"location": "projects/ysc/gender-adaptation/#target-files", "title": "Target files:", "text": "<p>Masculine; <pre><code>  &lt;data name=\"dc.foo.bar.qux\"&gt;\n        &lt;value&gt;Je suis un achitect&lt;/value&gt; \n    &lt;/data&gt;\n</code></pre> Feminine; <pre><code>  &lt;data name=\"dc.foo.bar.qux\"&gt;\n        &lt;value&gt;Je suis une achitecte&lt;/value&gt; \n    &lt;/data&gt;\n</code></pre> Neutral: <pre><code>  &lt;data name=\"dc.foo.bar.qux\"&gt;\n        &lt;value&gt;Je suis un.e achitect.e&lt;/value&gt; \n    &lt;/data&gt;\n</code></pre></p>"}, {"location": "projects/ysc/project-setup/", "title": "YSC -- project setup", "text": "<ul> <li>Responsible TT: Valentina</li> <li>Backup TT: Manuel (or Kos, in Manuel's absence)</li> </ul>"}, {"location": "projects/ysc/project-setup/#summary-of-the-project-setup", "title": "Summary of the project setup", "text": "<ul> <li>All team projects are hosted in github repositories under organization https://github.com/capstanlqc-ysc. </li> <li>They pull settings and assets from https://github.com/capstanlqc-ysc/ysc_settings and https://github.com/capstanlqc-ysc/ysc_assets </li> <li>They pull source files from the DevBridge's repository https://dev.azure.com/YSCConsulting/Pheme/_git/Pheme%20Inbox</li> <li>The project settings include segmentation rules and filter parameters.</li> </ul>"}, {"location": "projects/ysc/project-setup/#project-requirements-include", "title": "Project requirements include:", "text": "<ul> <li>extracting label's keys (resnames) as text unit IDs</li> </ul>"}, {"location": "projects/ysc/project-setup/#potential-tt-actions", "title": "Potential TT actions", "text": ""}, {"location": "projects/ysc/project-setup/#1-update-filter-parameters-to-capture-new-nodes-keys", "title": "1. Update filter parameters to capture new node's keys", "text": "<ul> <li>DevBridge is expected to notify of any changes in source files in the Inbox repo. Whenever there are updates in source files, we must verify that the updates haven't affected the key extraction. </li> <li>That check can be done exporting any of the projects as Excel and looking for keys that are pure segment IDs rather than resnames. </li> <li>To fix any found issues, new xpaths must be added to the XML filter parameters to capture the key in the added/updated element nestings.</li> </ul> <p>For example, the ResX filter parameters include an extraction rule that matches the key (i.e. <code>name</code> attribute) of items in unordered lists (i.e. <code>&lt;ul&gt;</code> element). <pre><code> &lt;its:translateRule itsx:idValue=\"../../../@name\" selector=\"//data/value/ul/li\" translate=\"yes\" itsx:whiteSpaces=\"default\"/&gt;\n</code></pre> If the files are updated and ordered lists (i.e. <code>&lt;ol&gt;</code> element) are added, a new extraction rule must be added to the ResX filter parameters accordingly to match the new content:  <pre><code> &lt;its:translateRule itsx:idValue=\"../../../@name\" selector=\"//data/value/ol/li\" translate=\"yes\" itsx:whiteSpaces=\"default\"/&gt;\n</code></pre> In the above examples, the <code>selector</code> matches the text node that must be translated and the <code>idValue</code> matches the key to identify that node. There must be one <code>translateRule</code> (extraction rule) for each text node that must be extracted for translation, including children of other extracted nodes.</p> <p>The filter includes some working examples, if more rules are needed it's just a matter of finding what nodes are not matched in the new files and then reuse any of the working examples in the filter parameters and change it to match the new case.</p>"}, {"location": "projects/ysc/project-setup/#2-create-mirror-projects-for-gender-adaptation", "title": "2. Create mirror projects for gender adaptation", "text": "<p>For some files three versions will be produced to address the target audience in three different ways: in a gender-neutral way, as a female respondent and as a male respondent. There will be: </p> <ul> <li>one translation project, to produce the gender-neutral base version (which already exists)</li> <li>two adaptation projects, to produce the female and male versions, adapting the base version (to be created)</li> </ul> <p>The two projects for the gender-oriented adaptation will include only specific files, not the whole set of source files, and will pull the base version dynamically through a repository mapping.</p> <p>What to do:</p> <ol> <li> <p>For every locale, create the two repositories, which could be called:</p> </li> <li> <p>ysc_LOCALE_fem_omt</p> </li> <li> <p>ysc_LOCALE_mas_omt</p> <p>For example, for the female-target pt-PT project, if you use gh-cli, you would use the command <code>gh repo create capstanlqc-ysc/ysc_pt-PT_fem_omt --private --clone --team translators</code>. </p> </li> <li> <p>Make sure the \"translators\" team has write permissions to the projects you create. </p> </li> <li> <p>In each of the repos, create the OmegaT project and copy all the settings of the base version.</p> </li> <li> <p>In order to pull just one file (or specific files) for the adaptation, modify the repository mapping that pulls the whole Pheme%20Inbox repo containing the source files to pull just the file(s) you want.</p> <p>In order words, remove the base mapping to the whole inbox repo and add the mapping for the file(s) you want: </p> <pre><code>            &lt;repository type=\"git\" url=\"https://dev.azure.com/YSCConsulting/Pheme/_git/Pheme%20Inbox\"&gt;\n                &lt;mapping local=\"source/IdentityService/IdentityServerResources.en.resx\" repository=\"IdentityService/IdentityServerResources.en.resx\" /&gt;\n            &lt;/repository&gt;\n</code></pre> </li> <li> <p>Add the repository mapping to get the base version, which we want to be dynamic from the working TM of the base project: </p> <pre><code>        &lt;repository type=\"git\" url=\"https://github.com/capstanlqc-ysc/ysc_&amp;LOCALE;_omt.git\"&gt;\n            &lt;mapping local=\"tm/auto/base/&amp;LOCALE;.tmx\" repository=\"omegat/project_save.tmx\" /&gt;\n        &lt;/repository&gt;\n</code></pre> </li> </ol> <p>That's it. </p> <p>The steps above are recorded in this video: https://player.vimeo.com/video/874375423 (password: Y$C)</p>"}, {"location": "projects/ysc/project-setup/#references", "title": "References", "text": "<ul> <li>https://capps.capstan.be/doc/team_projects.php</li> </ul>"}, {"location": "projects/ysc/project-setup/#3-reuse-es-es-version-as-base-for-adaptation-into-es-mx", "title": "3. Reuse es-ES version as base for adaptation into es-MX", "text": "<p>The starting point is two projects for two Spanish versions:</p> <ul> <li>ysc_es-MX_omt (adapting/borrowing)</li> <li>ysc_es-ES_omt (base/borrowed)</li> </ul> <p>One third of the es-MX version has been produced (through adaptation of a es-ES base version). Now we want to do the same for the other two thirds, and we want the Mexican adaptor to focus only on on those two thirds (because the rest should be already good as it is). </p> <p>Follow these steps: </p> <ol> <li>Once the es-ES translation is finalized, export the master TM of that project (<code>Ctrl+D</code> produces three master TMs, the one which ends with  <code>-omegat.tmx</code> is the one we need. Rename the TM as <code>es-ES.tmx</code>.</li> <li>In this TMX file, replace whatever values the attributes <code>tuv/@changeid</code> and <code>tuv/@creationid</code> with <code>base_es-ES</code>.</li> <li>Put that TM in the <code>tm/auto/base/</code>folder of the es-MX project.</li> <li>Instruct the es-MX adaptor to filter by author <code>base_es-ES</code> and adapt the visible segments.</li> </ol>"}, {"location": "tech/", "title": "Internal usage", "text": ""}, {"location": "tech/misc/", "title": "Misc", "text": "<p>Install Java?? https://docs.oracle.com/en/java/javase/11/install/installation-jdk-macos.html#GUID-7EB4F697-F3D1-40EA-ACDF-07FA90F02D57 https://adoptium.net/temurin/releases/?version=11 https://www.azul.com/downloads/?version=java-11-lts&amp;os=macos&amp;package=jre#zulu change default Java version?</p>"}, {"location": "tech/mk_dir_strukt/", "title": "AUTOMATION: CREATE FOLDER STRUCTURE", "text": "<p>Script name: <code>mk_dir_skrukt.sh</code></p>", "tags": ["Audience\ua789User"]}, {"location": "tech/mk_dir_strukt/#description", "title": "Description", "text": "<p>This automation can be used to create folder structures in the project folder, including one subfolder per version (language variant). The name of each version subfolder will be the locale of the version (e.g. <code>ron-ROU</code> for Romanian, etc.).</p>", "tags": ["Audience\ua789User"]}, {"location": "tech/mk_dir_strukt/#preparation", "title": "Preparation", "text": "<p>Required input from the PM: * Zip file, whose name must be (or end in) <code>lll-CCC.zip</code> containing the contents of the version subfolder that need to be replicated, * A text file, whose name must be (or end in) <code>lll-CCC.txt</code>, containing a list of locales (as cApStAn language codes) for which the version subfolder must be created, one locale per file.</p> <p>Those two files must be included under a <code>_tech</code> subfolder, which must sit in the path where the version subfolders must be generated.</p> <p>IMPORTANT: The zip file should include the contents of the version subfolder, not the version subfolder itself. The best way to create the <code>lll-CCC.zip</code> file is to simply go into the model <code>lll-CCC</code> folder, select all subfolders and zip them, and then rename the zip file created as <code>lll-CCC.zip</code>. Do not zip the <code>lll-CCC/</code> folder itself.</p>", "tags": ["Audience\ua789User"]}, {"location": "tech/mk_dir_strukt/#examples", "title": "Examples", "text": "<p>An example of <code>lll-CCC.zip</code> file would be:</p> <pre><code>Archive:  lll-CCC.zip\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n        0  2020-02-07 16:55   00_source/\n        0  2020-02-07 16:55   01_translator_1/\n        0  2020-02-07 16:55   02_translator_2/\n        0  2020-02-07 16:55   03a_to_reconciler/\n        0  2020-10-19 14:50   03b_from_reconciler/\n        0  2020-02-07 16:56   04a_to_proofreader/\n        0  2020-10-19 14:51   05a_from_proofreader/\n        0  2020-10-19 14:51   06_delivered/\n---------                     -------\n        0                     8 files\n</code></pre> <p>An example of <code>lll-CCC.txt</code> file would be:</p> <pre><code>bul-BGR\nces-CZE\ndeu-DEU\nell-GRC\nesp-ESP\nest-EST\nfra-FRA\nhun-HUN\nita-ITA\npol-POL\nslo-SVK\nron-ROU\nrus-EST\n</code></pre>", "tags": ["Audience\ua789User"]}, {"location": "tech/mk_dir_strukt/#request", "title": "Request", "text": "<p>To accomplish this automation, the PM must do the following:</p> <ol> <li>Define the path to the folder where the version subfolders are to be generated, e.g. <code>U:\\IPSOS\\ETUI\\01_PILOT_FIELD</code>.</li> <li>Create the <code>_tech</code> subfolder in the path above, e.g. <code>U:\\IPSOS\\ETUI\\01_PILOT_FIELD\\_tech</code>.</li> <li>Create the two <code>lll-CCC</code> files above and put them in the <code>_tech</code> subfolder.</li> <li>Send an email to <code>manuel.souto@capstan.be</code> to request the automation, providing the path above.</li> </ol>", "tags": ["Audience\ua789User"]}, {"location": "tech/mk_dir_strukt/#questions", "title": "Questions", "text": "<p>To be addressed to Manuel or Adrien. Danina could probably help as well with the preparation steps above, as she has followed them for a few projects in 2020/2021.</p>", "tags": ["Audience\ua789User"]}, {"location": "tech/odooks/", "title": "Odooks", "text": ""}, {"location": "tech/odooks/#how-to-add-a-page-to-odoo-ks", "title": "How to add a page to Odoo KS", "text": ""}, {"location": "tech/oneliners/", "title": "Terminal oneliners", "text": ""}, {"location": "tech/oneliners/#bash-pipelines", "title": "Bash pipelines", "text": "<p>Shared in KS here.</p>"}, {"location": "tech/oneliners/#check-completion-of-project", "title": "Check completion of project", "text": "<p>Gives you the number of remaining segments in an OmegaT project, if it\u2019s not 0 that means that not all segments are translated. It\u2019s not advisable to match literally the word \u201cRemaining:\u201d in that line because when the user has changed the UI language, this word might be localized. <pre><code>head -6 project_stats.txt | tail -1 | sed -E 's/[[:space:]]+/#/g' | cut -d# -f2\n</code></pre></p>"}, {"location": "tech/oneliners/#avoid-concurrent-omegat-execution", "title": "Avoid concurrent OmegaT execution", "text": "<p>This loop can be used to delay the execution of a new OmegaT.jar while there's already one running: <pre><code>while [[ $(expr $(ps aux | grep OmegaT.jar | wc -l)) -gt 1 ]]; do sleep 1; done\n</code></pre></p>"}, {"location": "tech/oneliners/#perl-replace", "title": "Perl replace", "text": "<p>Replaces in text file. <pre><code>perl -pi -e 's/foo/bar/g' file\n</code></pre></p>"}, {"location": "tech/oneliners/#watch-for-event", "title": "Watch for event", "text": "<p>Watches folder for events: <pre><code>inotifywait -r -m . [-e create] [-e delete] [-e etc]\n</code></pre></p>"}, {"location": "tech/oneliners/#update-zip-bundle", "title": "Update zip bundle", "text": "<p>Updates a zip with files from a number of directories: <pre><code>here=\"$(pwd)\"; for d in $(find $here -name dir_name*); do cd $d; \\\nzip -ur /media/data/data/company/path/to/zipfile.zip file*; done; cd $here\n</code></pre></p>"}, {"location": "tech/oneliners/#count-elements", "title": "Count elements", "text": "<p>Gets the number of translation units in PISA TMs for French: <pre><code>/var/www/capps/TM_by_container$ for f in $(find . -name \"*PISA*fra-FRA*.tmx\"); \\\ndo grep '&lt;/tu&gt;' $f; done | wc -l\n</code></pre></p> <p>Gets the number fo translation units in TMs that are not PISA for French: <pre><code>/var/www/capps/TM_by_container$ for f in $(find . -name \"*fra-FRA*.tmx\"); \\\ndo if [[ \"$f\" == *\"PISA\"* ]]; then :; else grep '&lt;/tu&gt;' $f; fi; done | wc -l\n</code></pre></p>"}, {"location": "tech/oneliners/#send-request-to-xdiff", "title": "Send request to xDiff", "text": "<p>Posts two OMT packages to xDiff to produce a diff report: <pre><code>curl -L -X POST 'https://capps.capstan.be/xdiff_cg_api.php' \\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\n-F 'omt_pkg_1=@\"file1.omt\"' \\\n-F 'omt_pkg_2=@\"file2.omt\"' \\\n-F '{\"token\": \"202020\", \"app\": \"xdiff\", \"rows\": \"different\"}'\n</code></pre></p>"}, {"location": "tech/oneliners/#set-file-access-control-lists", "title": "Set file access control lists", "text": "<p>Removes the extended permissions from the Windows domain: <pre><code>setfacl -bR /your/file\n</code></pre></p>"}, {"location": "tech/oneliners/#finding-stuff", "title": "Finding stuff", "text": "<p>Finds subfolders which are not empty</p> <pre><code>find /path/to/dir ! -empty -maxdepth 1 -type d\n</code></pre>"}, {"location": "tech/oneliners/#list-files-in-project-package", "title": "List files in project package", "text": "<p>Lists external TMs added to a series of OMT packages: <pre><code>for o in $(ls *.omt); do echo \"#\" $o; unzip -l $o | grep '\\.tmx' | \\\ntr -s ' ' | cut -d ' ' -f5; echo \"---------------------------\"; done\n</code></pre></p>"}, {"location": "tech/oneliners/#copy-and-transforms", "title": "Copy and transforms", "text": "<p>Reads what is in your clipboard, modifies it, and puts it back in your clipboard (can be put in a function in ~/.bashrc), after doing some replacements: <pre><code>xsel -o -b | sed -r 's#\\\\+#/#g' | sed 's#192.168.67.50#media/data#' | \\\nsed 's#U:#/media/data/data/company#' | xsel -i -b\n</code></pre></p>"}, {"location": "tech/oneliners/#from-and-to-server", "title": "From and to server", "text": "<p>Downloads files from Ur: <pre><code>scp user@192.168.67.50:dir_or_ln_in_home/foo/bar/files*.ext .\n</code></pre> Source: here</p> <p>Uploads files to Ur: <pre><code>scp file(s) user@192.168.67.50:dir_or_ln_in_home/foo/bar\n</code></pre></p>"}, {"location": "tech/oneliners/#replaces-in-text-files", "title": "Replaces in text files", "text": "<p>Removes line breaks in markdown files, only in the middle of sentences but not anywhere else: <pre><code>perl -i -00pe 's/^(?!```)(.+[a-z),])\\p{Zs}*[\\r\\n](?=[a-z{])/$1 /gm' *\n</code></pre></p>"}, {"location": "tech/oneliners/#matches-in-files", "title": "Matches in files", "text": "<p>Find files that contain a certain pattern: <pre><code>grep -rnw '/path/to/somewhere/' -e 'pattern'\n</code></pre></p>"}, {"location": "tech/oneliners/#move-files-to-their-batch-folder", "title": "Move files to their batch folder", "text": "<p>The following loop gets the batch (key) including each file in the YAML config and copies the file from <code>new-keys/03_lint</code> to the batch folder that corresponds under <code>RELEASE_A</code>:</p> <pre><code>for f in $(cat pisa25_files.yaml | shyaml get-value releaseA | sed 's/^- //' | \\\ncut -d':' -f1); do b=$(grep -Poh \"(?&lt;=${f}: ).+\" pisa25_files.yaml) &amp;&amp; echo $b \\\n&amp;&amp; find new-keys/03_lint -name $f &amp;&amp; cp new-keys/03_lint/$f RELEASE_A/$b; done\n</code></pre> <p>Note</p> <p>File and folder names can be probably simplified.</p>"}, {"location": "tech/oneliners/#edit-subnodes-in-xhtml-files", "title": "Edit subnodes in XHTML files", "text": "<p>The following command finds HTML files that do not (<code>-L</code>) contain <code>&lt;meta charset=\"utf-8\"/&gt;</code> and adds that node to them at the bottom of the head section:</p> <pre><code>find $work_path -name \"*.html\" -type f -exec grep -L '&lt;meta charset=\"utf-8\"/&gt;' \\\n{} \\; -exec xmlstarlet ed --inplace --subnode \"/html/head\" --type elem -n meta \\\n-i /html/head/meta -t attr -n charset -v \"utf-8\" {} \\;\n</code></pre>"}, {"location": "tech/oneliners/#extract-key-and-text", "title": "Extract key and text", "text": "<p>Given a number of XML files containing labels such as:</p> <pre><code>&lt;label key=\"item1_93cba07454f06a4a960172bbd6e2a435_25\"&gt;\n&lt;text&gt;Yes&lt;/text&gt;\n&lt;/label&gt;\n</code></pre> <p>The following oneliner extracts filename, key and text:</p> <pre><code>pcregrep -Mo --color \\\n'(?&lt;=key=\")[^\"]+?(?=\")(?:[\\s\\S\\n]+?&lt;text&gt;)[\\s\\S]+?(?=&lt;/text&gt;)' *.xml | \\\nperl -0777 -pe 's/\"&gt;[\\s\\n]+&lt;text&gt;/:/gm' | xsel -ib\n</code></pre>"}, {"location": "tech/oneliners/#adds-node-in-htmlxml", "title": "Adds node in HTML/XML", "text": "<p>Adds <code>&lt;meta charset=\"utf-8\"/&gt;</code> when missing in HTML files: <pre><code>find $work_path -name \"diffte*t.html\" -type f \\\n-exec grep -L '&lt;meta charset=\"utf-8\"/&gt;' {} \\; \\\n-exec xmlstarlet ed --inplace --subnode \"/html/head\" --type elem -n meta \\\n-i /html/head/meta -t attr -n charset -v \"utf-8\" {} \\;\n</code></pre></p>"}, {"location": "tech/oneliners/#git-restore-tms", "title": "Git / restore TMs", "text": "<p>Steps to restore translations deleted in the previous commit:</p> <pre><code>git checkout [previous-commit-before-the-commit-that-deleted-translations]\ncp omegat/project_save.tmx ../03d9f5e.tmx # where 03d9f5e is the commit hash\ngit checkout main\nmkdir tm/auto/restored\nmv ../03d9f5e.tmx tm/auto/restored git pull &amp;&amp; git add . &amp;&amp; git commit -m \"Restored translations from day Nov 3, accidentally removed\" &amp;&amp; git push </code></pre>"}, {"location": "tech/oneliners/#resources", "title": "Resources", "text": "<p>https://linuxcommandlibrary.com/basic/oneliners</p>"}, {"location": "tech/python/", "title": "Python tricks", "text": ""}, {"location": "tech/python/#virtual-environments", "title": "Virtual environments", "text": ""}, {"location": "tech/python/#poetry-cheatsheet", "title": "Poetry cheatsheet", "text": ""}, {"location": "tech/python/#to-create-poetry-project", "title": "to create poetry project", "text": "<p>cd app-folder poetry init</p>"}, {"location": "tech/python/#to-install-dependencies", "title": "to install dependencies", "text": "<p>poetry add package  or:  cat requirements.txt | xargs poetry add </p>"}, {"location": "tech/python/#create-venv", "title": "create venv", "text": "<p>poetry install</p>"}, {"location": "tech/python/#misc", "title": "misc", "text": "<p>poetry show poetry env list poetry env info poetry env info --path</p>"}, {"location": "tech/python/#activate-venv", "title": "activate venv", "text": "<p>poetry shell</p>"}, {"location": "tech/python/#to-deactivate", "title": "to deactivate", "text": "<p>exit</p>"}, {"location": "tech/regex/", "title": "Regex", "text": "<p>regex collection</p>"}, {"location": "tech/support/", "title": "Support", "text": ""}, {"location": "tech/support/#teamviewer-quicksupport", "title": "TeamViewer -- QuickSupport", "text": "<p>When the support agent sends the QuickSupport utility link to the user, the user must simply click on it to download the utility, then double click the utility to run it, then authorize the support agent's access.</p> <p>If the user is an employee or member of the team, they might already have TeamViewer installed by Harras. In that case, they will not be able to run the QuickSupport utility. They might not be able to provide a password together with their ID.</p> <p>What to do:</p> <ul> <li>Instruct the user to close TeamViewer in their machine before running the QuickSupport utility.</li> <li>To close TeamViewer, they must right click on the icon in the system tray, then select Exit.</li> <li>After that, double click the QuickSupport utility and authorize access.</li> </ul> <p>https://odoo.capstan.be/web#id=20354&amp;action=565&amp;active_id=111&amp;model=project.task&amp;view_type=form&amp;cids=1&amp;menu_id=375</p> <p>@todo: mac? TV mac https://imgur.com/a/Xioi5kc https://i.imgur.com/CVExC18.png</p>"}, {"location": "tech/utils/", "title": "Utilities", "text": ""}, {"location": "tech/utils/#chinese-script-conversion", "title": "Chinese script conversion", "text": "<p>See the new (2024) steps to convert Chinese traditional spelling to simplified spelling.</p>"}, {"location": "tech/utils/#xdiff-helper", "title": "xDiff helper", "text": ""}, {"location": "tech/utils/#source-xml-linter", "title": "Source XML linter", "text": "<p>tool for bulk updates in translation files:  https://github.com/capstanlqc/source-xml-linter</p> <p>TODO: restrict replacements inside the target text nodes</p>"}, {"location": "tech/utils/#target-xml-diff", "title": "Target XML diff", "text": "<p>Some background... </p> <p>Repo: https://github.com/capstanlqc/pisa25-diff-target-xml</p>"}, {"location": "tech/utils/#py-update-tmx", "title": "py-update-tmx", "text": "<p>web api: - input:      - TMX file or URL to it     - Excel config ...</p>"}, {"location": "tech/utils/#xlst-convert-xliff-to-tmx", "title": "XLST convert XLIFF to TMX", "text": ""}, {"location": "tech/utils/#pisa-convert-trend-xliff-to-tmx", "title": "PISA -- convert trend XLIFF to TMX", "text": ""}, {"location": "tech/xls2tmx/", "title": "Convert Excel to TMX", "text": ""}, {"location": "tech/xls2tmx/#summary", "title": "Summary:", "text": "<ul> <li>Input: a spreadsheet containing source text in one column and at least one more column with the translation. </li> <li>Expected output: a TMX file for each language pair</li> </ul>"}, {"location": "tech/xls2tmx/#approaches", "title": "Approaches", "text": "<p>We have different ways to conduct this task: </p>"}, {"location": "tech/xls2tmx/#bilingual-input", "title": "Bilingual input", "text": "<p>If the spreadsheet contains one language pair, then it's okay to do in TMX Editor:</p> <ul> <li>Go to File &gt; Convert Excel file to TMX</li> </ul>"}, {"location": "tech/xls2tmx/#multilingual-input", "title": "Multilingual input", "text": "<p>If the spreadsheet contains many language pairs, then it's more efficient to use this script.</p> <p>This approach requires running a Python script, if you're not comfortable with that, do not hesitate to ask the TTT to do this conversion for you.</p> <p>In this case, attention must be paid to the configuration (either with a <code>config.json</code> file or in the first worksheet, called <code>config</code>, of the spreadsheet -- example provided here).</p>"}, {"location": "tools/", "title": "Tools", "text": "<p>a\u00f1dlkj</p>"}, {"location": "tools/aux/", "title": "Auxiliary tools (installation)", "text": "<p>This page lists instructions about installing some tools that don't have a straight-foward installation process.</p>", "tags": ["Audience\ua789Tech", "Audience\ua789User"]}, {"location": "tools/aux/ahk/", "title": "AutoHotKey", "text": "<p>AutoHotKey can be used to create global autotext macros. In particular, if you need to insert non-breaking spaces or other special characters, you might find this AutoHotKey script helpful.</p> <ol> <li> <p>Download and install AutoHotKey.</p> </li> <li> <p>Press Win+R on your keyboard and type <code>shell:startup</code> to open the Startup folder. Copy the path to that folder (e.g. <code>C:\\Users\\USER\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>, where <code>USER</code> would be your Windows user name).</p> </li> <li> <p>Right click on this link, choose \u201cSave link as\u201d and paste the path to the Startup folder before the file name, to download the script file in that folder.</p> </li> <li> <p>Right click the script file (<code>insert_unicode_char.ahk</code>) in the Startup folder and choose Run script.</p> </li> </ol> <p>This script will be run automatically the next time your machine starts.</p>", "tags": ["Audience\ua789Tech", "Audience\ua789User"]}, {"location": "tools/aux/tmx-editor/", "title": "TMX Editor", "text": "", "tags": ["Audience\ua789Tech"]}, {"location": "tools/aux/tmx-editor/#unix-like-systems-linux-or-mac", "title": "Unix-like systems (Linux or Mac)", "text": "<p>Just RTD.</p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/aux/tmx-editor/#windows", "title": "Windows", "text": "<p>You will need:</p> <ul> <li>a Github account (tip: log in to it in the default browser)</li> <li>admin rights in your machine</li> </ul>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/aux/tmx-editor/#installing-dependencies", "title": "Installing dependencies", "text": "<p>Before installing TMX Editor you must:</p> <ul> <li>Install JDK 21 from Temurin (and add it to PATH).</li> <li>Run PowerShell as administrator.</li> <li>Install Chocolatey for Individual Use.</li> <li>Restart PowerShell as admin and run:     <pre><code>choco install git -y \nchoco install gh -y\nchoco install ant -y\nchoco install nodejs-lts -y\n</code></pre></li> <li>Restart PowerShell as admin, and run <code>npm install typescript</code> (or <code>choco install typescript</code>).</li> <li>Optional: update npm</li> <li>Check all versions: <code>node -v</code>, <code>npm -v</code>, <code>ant -version</code>, <code>java -version</code></li> </ul>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/aux/tmx-editor/#installing-tmx-editor", "title": "Installing TMX Editor", "text": "<ul> <li>Restart PowerShell as admin, finally:     <pre><code>mkdir C:\\Users\\USER\\Apps\ncd C:\\Users\\USER\\Apps\ngh repo clone rmraya/TMXEditor\ncd TMXEditor\nant\nnpm install\n</code></pre></li> </ul>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/aux/tmx-editor/#running-tmx-editor", "title": "Running TMX Editor", "text": "<p>To run TMX Editor:</p> <ul> <li><code>npm start</code></li> </ul>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/aux/tmx-editor/#desktop-launcher", "title": "Desktop launcher", "text": "<p>If you want a Desktop icon that you can double-click to launch TMX Editor, please contact Valentina.</p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/okapi/building/", "title": "Building", "text": ""}, {"location": "tools/okapi/building/#how-to-build-the-okapi-filter-plugin", "title": "How to build the Okapi filter plugin", "text": "<p>Three steps are required to create a new okapi plugin:</p> <ul> <li>build okapi framework</li> <li>build the okapi plugin</li> <li>deploy the okapi plugin build</li> </ul>"}, {"location": "tools/okapi/building/#1-getting-the-okapi-repo-code-and-making-a-build", "title": "1. Getting the Okapi repo code and making a build", "text": "<p>Go to the dedicated folder where you'll do the building work: <pre><code>cd ~/Repos/okapiframework\n</code></pre></p> <p>To get a fresh fresh copy, clone the Okapi general repository:</p> <pre><code>git clone https://bitbucket.org/okapiframework/okapi.git\n</code></pre> <p>Change directory to local clone and check out the <code>dev</code> branch: <pre><code>cd okapi\ngit checkout dev\n</code></pre></p> <p>Optionally, to get updates:  <pre><code>git pull origin dev\n</code></pre></p> <p>Build the Okapi framework from the <code>dev</code> branch: <pre><code>mvn clean install --update-snapshots -DskipTests\n</code></pre> Note: <code>-DskipTests</code> option just skips unit tests.</p>"}, {"location": "tools/okapi/building/#2-getting-the-okapi-omegat-plugin-repo-code-and-making-a-build", "title": "2. Getting the Okapi OmegaT Plugin repo code and making a build", "text": "<p>Go to the dedicated folder where you'll do the building work: <pre><code>cd ~/Repos/okapiframework\n</code></pre></p> <p>To get a fresh clone: <pre><code>git clone https://bitbucket.org/okapiframework/omegat-plugin.git\n</code></pre></p> <p>Change directory to the filters folder and checkout the <code>dev</code> branch: <pre><code>cd omegat-plugin/filters\ngit checkout dev\n</code></pre></p> <p>Optionally, to get updates:  <pre><code>git pull origin dev\n</code></pre></p> <p>Make a build: <pre><code>mvn clean package\n</code></pre></p>"}, {"location": "tools/okapi/building/#3-deploying-the-okapi-omegat-plugin-build", "title": "3. Deploying the Okapi OmegaT Plugin build", "text": "<p>Navigate to the OmegaT Plugin folder first if you're not there yet: <pre><code>cd ~/Repos/okapiframework/omegat-plugin/filters\n</code></pre> Nove the JAR file to your OmegaT user configuration folder (e.g. by default <code>~/.omegat</code> on Linux or <code>%APPDATA%\\OmegaT</code> on Windows):</p> <pre><code>cp target/okapiFiltersForOmegaT-1.12-1.44.0-SNAPSHOT.jar YOUR_OMEGAT/plugins\n</code></pre>"}, {"location": "tools/okapi/filters/", "title": "Filters", "text": "<p>file okf_xml@ysc-key-based-wc.fprm :</p> <p> <p> </p> <p></p> <p>Code finder: </p> <pre><code>&lt;okp:codeFinder useCodeFinder=\"yes\"&gt;#v1\ncount.i=4\nrule0=\\{\\{[^}\\n]+?\\}\\}\nrule1=\\{[^}\\n]+?\\}\nrule2=\\&amp;lt;(/?)\\w+[^&amp;gt;]*?&amp;gt;\nrule3=\\\"(?![:,\\n])([^\\\"]*?)\\\"(?=:)\n&lt;/okp:codeFinder&gt;\n&lt;/its:rules&gt;\n</code></pre>"}, {"location": "tools/okapi/filters/#to-match-text-units-with-a-certain-key", "title": "to match text units with a certain key:", "text": "<p>\\n\\s+&lt;data name=\".(app.pageTitle.participantsDashboard|app.pageTitle.yscqClientDashboard|app.pageTitle.yscqDashboard|dashboard.aggregatedSummary.no|dashboard.aggregatedSummary.placeholder|dashboard.aggregatedSummaryComponent|dashboard.barChartNoDataPlaceholder.resultsTooNarrow|dashboard.clientGoalForm|dashboard.createClient|dashboard.createDevelopmentGoalContainer|dashboard.createDevelopmentGoalForm|dashboard.createDevelopmentGoalPulseForm|dashboard.createExperiencesForm|dashboard.cultureBarChart|dashboard.customIndividual|dashboard.dashboardFeedback|dashboard.dashboardGoal|dashboard.dashboardPlaceholder|dashboard.dashboardShareButton|dashboard.development|dashboard.edit|dashboard.executive|dashboard.explore|dashboard.(indiv|man|not|organ|overall|pageTitle|personal|potential|recomm|score|sidebar|team|update|view)|edpTest.pageTitle.participantsDashboard|feedback.feedbackResponded.viewDashboard|feedback.sharedDashboard|finder.finderContainer.button.viewTeamDashboard|global.dashboard|global.feedbackTabs.sharedDashboards|lsqParticipantReport|app.participantReport.(name|date|jobTitle|how|leaders|know)|global.(lsq|report|judgment|drive|influence)|app.[b-n]|app.pageTitle.[a-nv]|app.pageTitle.(?!yscqClientDashboard|yscqDashboard|participantsDashboard)|app.[s-z]|baseLineChart|clientPeople.|clients.[cu]|edpParticipant|edpTest.c-s|(?&lt;!Stakeholder)feedback.[apru]|feedback.feedback(?!Responded.viewDashboard)|feedbackLine|finder.finder(?!Container.button)|finder.(fit|pag)|global.[abc]|global.d(?!ashboard|rive)|global.ef|global.ghi|global.j-z|profilesOfSuccess.(pageTitle|profiles?OfSuccess)|project.[a-z]|shared.|(?&lt;!Error.)surveys.|tasks.a|team.(pageTitle|team)|teamDynamicsLineChart.p|(?&lt;!Error.)Demographics.(Age|CurrentLength|Disability|EthnicOrigin|Gender|Industry|Job|Language|Last|Level|Location|Sexual|Transgender)|app.clientUser|app.demo|clientPeople.userDemo).\" [^&gt;]+&gt;[\\n\\s]+[\\s\\S]*?[\\n\\s]+</p> <p>\\n\\s+&lt;trans-unit id=\".(app.pageTitle.participantsDashboard|app.pageTitle.yscqClientDashboard|app.pageTitle.yscqDashboard|dashboard.aggregatedSummary.no|dashboard.aggregatedSummary.placeholder|dashboard.aggregatedSummaryComponent|dashboard.barChartNoDataPlaceholder.resultsTooNarrow|dashboard.clientGoalForm|dashboard.createClient|dashboard.createDevelopmentGoalContainer|dashboard.createDevelopmentGoalForm|dashboard.createDevelopmentGoalPulseForm|dashboard.createExperiencesForm|dashboard.cultureBarChart|dashboard.customIndividual|dashboard.dashboardFeedback|dashboard.dashboardGoal|dashboard.dashboardPlaceholder|dashboard.dashboardShareButton|dashboard.development|dashboard.edit|dashboard.executive|dashboard.explore|dashboard.(indiv|man|not|organ|overall|pageTitle|personal|potential|recomm|score|sidebar|team|update|view)|edpTest.pageTitle.participantsDashboard|feedback.feedbackResponded.viewDashboard|feedback.sharedDashboard|finder.finderContainer.button.viewTeamDashboard|global.dashboard|global.feedbackTabs.sharedDashboards|lsqParticipantReport|app.participantReport.(name|date|jobTitle|how|leaders|know)|global.(lsq|report|judgment|drive|influence)|app.[b-n]|app.pageTitle.[a-nv]|app.pageTitle.(?!yscqClientDashboard|yscqDashboard|participantsDashboard)|app.[s-z]|baseLineChart|clientPeople.|clients.[cu]|edpParticipant|edpTest.c-s|(?&lt;!Stakeholder)feedback.[apru]|feedback.feedback(?!Responded.viewDashboard)|feedbackLine|finder.finder(?!Container.button)|finder.(fit|pag)|global.[abc]|global.d(?!ashboard|rive)|global.ef|global.ghi|global.j-z|profilesOfSuccess.(pageTitle|profiles?OfSuccess)|project.[a-z]|shared.|(?&lt;!Error.)surveys.|tasks.a|team.(pageTitle|team)|teamDynamicsLineChart.p|(?&lt;!Error.)Demographics.(Age|CurrentLength|Disability|EthnicOrigin|Gender|Industry|Job|Language|Last|Level|Location|Sexual|Transgender)|app.clientUser|app.demo|clientPeople.userDemo)[\"]*\"[&gt;]&gt;[\\n\\s]+[\\s\\S]*?[\\n\\s]+</p>"}, {"location": "tools/omegat/", "title": "OmegaT tips and tricks", "text": "<p>Some stuff...</p> <p>conflict resolution dialog  https://imgur.com/Tv4ynAY.png</p>", "tags": ["Audience\ua789User"]}, {"location": "tools/omegat/99_automation/", "title": "\u2606 Reconciliation packages", "text": ""}, {"location": "tools/omegat/99_automation/#automate-creating-reconciliation-packages", "title": "Automate creating reconciliation packages \u2606", "text": "<p>This script creates an OmegaT package for a reconciliation task, including the two master TMs that come from the double translation.</p>"}, {"location": "tools/omegat/99_automation/#user-pm-input", "title": "User (PM) input", "text": "<p>The PM must request the automation of this process, by providing the following information:</p> <ul> <li>Path of the working folder containing all the version folders (one folder per language version)</li> <li>The properties for this project (i.e. the name of the folders and files involved) as key-value pairs in a text file</li> </ul> <p>The properties file should be called <code>proj_props.txt</code> and should be found in the <code>_tech</code> folder, which is at the same level as all the version folders. For example:</p> <pre><code>@Ur:working_directory$\n.\n\u251c\u2500\u2500 _tech\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 CONTAINER_lll-CCC.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lll-CCC.zip\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 proj_props.txt &lt;------------------ props file\n\u251c\u2500\u2500 ara-ZZZ\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 00_source\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_translator_1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_translator_2\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 03a_to_reconciler\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 04_etc...\n\u251c\u2500\u2500 ben-IND\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 00_source\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 01_translator_1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 02_translator_2\n...\n</code></pre> <p>The properties file must have the following list of key-value pairs (only the parts after <code>=</code> should be modified, if necessary, e.g. replacing <code>CONTAINER</code> with the actual project name, etc.):</p> <pre><code>t1_dir=01_translator_1\nt2_dir=02_translator_2\nrec_dir=03a_to_reconciler\nt1_pkg_tmpl=CONTAINER_lll-CCC_OMT_Translator1.omt\nt2_pkg_tmpl=CONTAINER_lll-CCC_OMT_Translator2.omt\nt1_tmx_tmpl=CONTAINER_lll-CCC_Translator1.tmx\nt2_tmx_tmpl=CONTAINER_lll-CCC_Translator2.tmx\n</code></pre> <p>Explanation of each property: </p> <ul> <li><code>t1_dir</code> and <code>t1_dir</code>: the folders inside the <code>lll-CCC</code> folder containing the OMT packages from T1 and T2</li> <li><code>rec_dir</code>: the folder inside the <code>lll-CCC</code> folder where the OMT package for reconciliation should be created.</li> <li><code>t1_pkg_tmpl</code> and <code>t2_pkg_tmpl</code>: The names of the OMT package files from T1 and T2 that must be used.</li> <li><code>t1_tmx_tmpl</code> and <code>t2_tmx_tmpl</code>: The names that the two TM files must have in the project for reconciliation.</li> </ul> <p>The above assumes that the three folders are directly found inside the language version folder.</p> <p>A template for the <code>proj_props.txt</code> can be downloaded from here. To use that template, right-click on the link and choose \"Save link as\" (or whatever your browser calls it) in the context menu that appears. After you download the file, please edit it only with Notepad on Windows.</p>"}, {"location": "tools/omegat/99_automation/#business-logic", "title": "Business logic", "text": "<p>As a pre-condition, the script will check for the existence and contents of the properties file. If the file is not found or some key is not found in it, the process will stop.</p> <p>Then, for each version folder under the working directory: 1. The script will check whether there is a subfolder for reconciliation (i.e. with key <code>rec_dir</code> in the properties).     * If there is no such folder, it is assumed that no reconciliation happens for that version and nothing will be done for that version. 2. If reconciliation applies for that version, the script will check inside the reconciliation folder whether there is a OMT package there.     * If there is a OMT package inside the reconcilation subfolder, it is assumed that the package for reconciliation has already been created, and nothing else will be done for that version. 3. If there is no OMT package inside the reconciliation subfolder, the script will check whether there is one OMT package inside the translation 1 subfolder (i.e. with key <code>t1_dir</code> in the properties) and one OMT package inside the translation 2 subfolder (i.e. with key <code>t2_dir</code> in the properties).     * If one or both of the translation packages are not found there, nothing else can/will be done for that version. 4. If the two translation packages are found in the translation 1 and 2 subfolders, (here comes the real action) the package for reconciliation will be created under the reconciliation subfolder including the master TMs from each translation.</p>"}, {"location": "tools/omegat/LQE/", "title": "LQE backend", "text": "<p>Backend application in cApps to store and serve linguistic quality evaluation (LQE) reports</p>"}, {"location": "tools/omegat/LQE/#introduction", "title": "Introduction", "text": "<p>The purpose of this project is create a new interface in the translation/review environment that allows the reviewer (the language expert responsible for evaluating the quality of the translation) to document their interventions within that environment (the CAT tool). OmegaT is the CAT tool used at the moment for LQE reviews (such as verification tasks).</p>"}, {"location": "tools/omegat/LQE/#lqe-plugin-for-omegat", "title": "LQE plugin for OmegaT", "text": "<p>This new interface is a new dialog in OmegaT that allows the user to document their interventions (issues they find and edits they apply in the translation, or just confirm the translation conforms to expected requirements), entering:</p> <ul> <li>intervention category and subcategory, </li> <li>comment (based on a template for each subcategory), and</li> <li>severity code</li> </ul> <p>These categories and subcategories are determined by the LQE configuration, included in the user configuration files in OmegaT.</p>"}, {"location": "tools/omegat/LQE/#installation", "title": "Installation", "text": "<p>To have the LQE dialog an OmegaT plugin needs to be installed. It will be installed or updated when the OmegaT customization is updated.</p>"}, {"location": "tools/omegat/LQE/#authentication", "title": "Authentication", "text": "<p>The verifier must make sure their name/ID in OmegaT is either \u201cVER\u201d or something that starts with \u201cVER\u201d. The username for authentication will be a combination of OmegaT user's name/ID and the target language code (e.g. \u201cfr-FR\u201d), joined by an underscore. </p> <p>So for example, the verifier of the French (France) version could have OmegaT name/ID <code>VER</code>, which will become username <code>VER_fr-FR</code> in the report, or the verifier of the Galician version could have name/ID <code>VER_manuel</code>, which would become username <code>VER_gl-ES_manuel</code> in the report, etc.</p> <p>The plugin would register the user (with <code>username</code> and <code>password</code>), and will receive an authentication token, which each request will then include in the HTTP header.</p>"}, {"location": "tools/omegat/LQE/#lqe-reports", "title": "LQE reports", "text": "<p>Apart from including the LQE dialog in the OmegaT interface, the LQE plugin is also responbible for producting a LQE report in several forms.</p> <ul> <li>As a JSON file</li> <li>As an Excel file</li> <li>As as a number of HTTP requests to the restful server</li> </ul> <p>The JSON report is created at <code>lqe/project-lqe.json</code> when a verifier opens an OmegaT project. </p> <p>Even if no issues are registered (in other words, if no interventions are documented), a report will be created for the OmegaT project with an empty list of segments with issues.</p>"}, {"location": "tools/omegat/LQE/#api", "title": "API", "text": "<p>The POST request that initializes the report in the database adds a new row in the \"reports\" table, and the PUT requests that create or update segments add or update a row in the \"segments\" table and as many new rows as issues the segment has in the \"issues\" table. With every segment update request, all existing issues are deleted and saved again.</p> <p>The report is created with a POST request to URL <code>{{ url }}/lqe/report/&lt;report_uuid&gt;</code>, containing the following properties in the payload:</p> KEY DESCRIPTION report_uuid Hash value that uniquely identifies the report: e.g. <code>fd928793-eae5-4115-acb5-9bf4c586e91d</code> tool LQE plugin version lqe_config The name of the set of categories used in the LQE report. project_name The name of the project folder when the LQE report is created. timestamp <code>YYYYMMDD_HHMMSS</code> source_lang OmegaT or BCP47 language code: e.g. <code>en-ZZ</code> target_lang OmegaT or BCP47 language code: e.g. <code>fr-CA</code> segments Array of key-value objects (one object per segment). When initializing the report, it must be empty. <p>The report's <code>report_uuid</code> property is a hash number that uniquely identifies the report. This property is saved in the <code>project-lqe.json</code> persistently and can be used between different user sessions to identify all issues that are saved to the database as part of the same report. This number could be used by another client to get all issues for one report.</p> <p>Example of report object: </p> <pre><code>{\n  \"report_uuid\" : \"17abf070-329c-4804-81c7-3d4684763955\",\n  \"tool\" : \"LQE Plugin 0.4.0\",\n  \"lqe_config\" : \"capstan-standard-pisa\",\n  \"project_name\" : \"lqe_test_omtprj\",\n  \"timestamp\" : \"2020-03-28T12:08:53.833\",\n  \"source_lang\" : \"en\",\n  \"target_lang\" : \"gl\",\n  \"segments\" : [ ]\n}\n</code></pre> <p>Issues will be grouped per segment and a group of issues will be created or updated with a PUT request to url <code>{{ url }}/lqe/report/&lt;report_uuid&gt;/segment/&lt;segment_id&gt;</code>, including an issues array is a property of the segment.</p> <p>Each <code>segment</code> object will have the following properties:</p> KEY DESCRIPTION segment_id Hash value tied to the segment key (source + file + prev + next) report_uuid Foreign key that links the segment to the report. segment_number One of the correlative integer values that enumerate segments. transunit_id Value of ID attribute of the trans-unit element in an XLIFF file. It must be Null for other file types. filename Name of the file where the segment appears. source_text Source text. target_orig Original translation before verification. target_edit Edited translation that includes changes made by the verifier. translator Name/ID of the user who registered the original translation. issues Array of key-value objects (one object per issue). See table below. <p>Caveat: In order to have constant segment numbers (which don't change even if the user alters the order of files), the <code>files_order.txt</code> file must be deleted on project load (and therefore before the plugin is run).</p> <p>Each <code>issue</code> object will have the following properties:</p> KEY DESCRIPTION issue_uuid Auto-increment identifier for each issue/intervention. segment_uuid Foreign key that links the issue to the segment. category One value from the list of categories for each LQE config. subcategory One value from the list of subcategories for each category. comment Open-ended text inserted or modified by the user. severity One value from the list of severity codes allowed for a certain category. reviewer Name/ID of the user who edits the translation during the LQE. <p>Example of segment object:</p> <pre><code>{\n    \"segment_id\" : \"1276287c\",\n    \"segment_number\" : 1,\n    \"transunit_id\" : null,\n    \"filename\" : \"source_file.txt\",\n    \"source_text\" : \"This is the first sentence.\",\n    \"target_orig\" : \"Esta \u00e9 a primeira frase.\",\n    \"target_edit\" : \"Esta \u00e9 a primeira oraci\u00f3n.\",\n    \"translator\" : \"souto_translator\",\n    \"issues\" : [ {\n      \"issue_uuid\" : \"c7178fb7-e6f9-44c5-a262-ce6c409571b6\",\n      \"category\" : \"Adaptation issue\",\n      \"subcategory\" : \"Missed adaptation\",\n      \"comment\" : \"\u201csentence\u201d was not adapted.\",\n      \"severity\" : 1,\n      \"reviewer\" : \"VER_manuel\"\n    }, {\n      \"issue_uuid\" : \"798470ac-3aac-4f64-9206-116ee3eb72cc\",\n      \"category\" : \"Adaptation issue\",\n      \"subcategory\" : \"Wrong adaptation\",\n      \"comment\" : \"Wrong adaptation in target \u201c\u2026\u201d + EXPLANATION\",\n      \"severity\" : 5,\n      \"reviewer\" : \"VER\"\n    } ]\n}\n</code></pre>"}, {"location": "tools/omegat/LQE/#backend-deployment", "title": "Backend deployment", "text": "<p>For the time being, the API is deployed as a Heroku app in the following address: https://capps-lqe-backend.herokuapp.com/lqe/. That URL must be included in the OmegaT preferences (Options &gt; Preferences &gt; Plugins &gt; Linguistic Quality), so that the LQE plugin knows where to sent the requests.</p>"}, {"location": "tools/omegat/LQE/#no-license", "title": "No license", "text": "<p>This software doesn\u2019t have a license, which means you have no permission from the creators of the software to use, modify, or share the software for any purpose.</p>"}, {"location": "tools/omegat/autotext/", "title": "Autotext", "text": "<p>You may insert any special character in OmegaT using autotext.</p> <p>To see the list of special characters and their shortcuts in OmegaT, go to Options &gt; Preferences &gt; Auto-completion &gt; Autotext (or check them out online here).</p> <p>If there is a special character that you would like to have added to the list (for all users), please create a ticket in the OmegaT helpdesk to let us know.</p> <p>Info</p> <p>See a specific example: how to insert no-break spaces.</p>", "tags": ["Audience\ua789User"]}, {"location": "tools/omegat/autotext/#autotext-shortcut", "title": "Autotext shortcut", "text": "<p>In OmegaT we include the custom autotext shortcut <code>\\shy</code> to insert a soft hyphen. A soft hyphen character will be inserted in the position in the text where <code>\\shy</code> was typed. </p>", "tags": ["Audience\ua789User"]}, {"location": "tools/omegat/autotext/#word-joiners", "title": "Word joiners", "text": "<p>It's also possible to use a special character in a specific position to produce the opposite result (adjacent characters should be joined together as a single word, without the possibility of a line break between them) but we haven't added any autotext shortcut for that in OmegaT yet. We will if needed.</p>", "tags": ["Audience\ua789User"]}, {"location": "tools/omegat/autotext/#more-info-about-wrapping-text-with-cs-i18nwrappingmd", "title": "More info about Wrapping text with CS: i18n/wrapping.md", "text": "", "tags": ["Audience\ua789User"]}, {"location": "tools/omegat/cli/", "title": "CLI commands", "text": ""}, {"location": "tools/omegat/cli/#copy-source-to-target-for-an-en-adaptation-project", "title": "Copy source to target (for an en-* adaptation project)", "text": "<pre><code>java -jar /path/to/omegat/build/install/OmegaT/OmegaT.jar /path/to/omegat/project --config-dir=/path/to/config/dir --mode=console-createpseudotranslatetmx --pseudotranslatetmx=/path/to/omegat/project/tm/auto/base.tmx --pseudotranslatetype=equal\n</code></pre>"}, {"location": "tools/omegat/errors/", "title": "Errors", "text": "", "tags": ["Audience\ua789 Tech"]}, {"location": "tools/omegat/errors/#unable-to-read-project-file-ref-originhash-cannot-be-resolved", "title": "Unable to read project file! Ref origin/HASH cannot be resolved", "text": "<p>The user gets this error when opening the team project:</p> <p>Unable to read project file! org.eclipse.jgit.api.errors.RefNotFoundException: Ref origin/{hash} cannot be resolved</p> <p></p> <p>Likely cause: The user has downloaded the team project in a sync'ed folder (under OneDrive, Dropbox, etc.).</p>", "tags": ["Audience\ua789 Tech"]}, {"location": "tools/omegat/errors/#unable-to-download-team-project", "title": "Unable to download team project!", "text": "<p>The user gets this error when downloading the team project:</p> <p>Unable to download team project! java.util.concurrent.ExecutionException: org.eclipse.jgit.api.errors.RefNotFoundException: Ref origin/master cannot be resolved</p> <p>x</p> <p>Likely cause: lack of support for <code>main</code> branches in git projects, it may happen with omegat versions below 5.5.</p>", "tags": ["Audience\ua789 Tech"]}, {"location": "tools/omegat/errors/#unable-to-download-team-project-authentication-exception", "title": "Unable to download team project: authentication exception", "text": "<p>The user gets this error when downloading the team project:</p> <p>Unable to download team project! java.util.concurrent.ExecutionException: org.tmatesoft.svn.core.SVNAuthenticationException: svn: E170001: OPTIONS of '{URL}': 403 Forbidden..</p> <p></p> <p>Likely cause: Incorrect credentials.</p>", "tags": ["Audience\ua789 Tech"]}, {"location": "tools/omegat/errors/#unable-to-download-team-project-project-file-was-not-a-file", "title": "Unable to download team project: project file was not a file", "text": "<p>The user gets this error when downloading the team project:</p> <p>Unable to download team project!  java.util.concurrent.ExecutionException: java.lang.IllegalArgumentException: Project file /path/to/project/omegat.project was not a file</p> <p></p> <p>Likely cause: The OmegaT project does not exist in that branch or is corrupted.</p>", "tags": ["Audience\ua789 Tech"]}, {"location": "tools/omegat/errors/#socket-closed", "title": "Socket closed???", "text": "<p>https://imgur.com/v8MGPqd.png</p> <p></p> <p>https://imgur.com/klbhChr.png</p> <p>The error shows that OmegaT failed to upload with credential problem. The user may not have write permissions. </p> <p>TransportException =&gt;  https authentication or communication error</p> <p>git-upload-pack not permitted -&gt; git service deny to accept upload command.</p> <p>https://docs.aws.amazon.com/codecommit/latest/userguide/troubleshooting-ae.html https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-ide-ec.html https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-without-cli.html</p> <p>--</p> <p>https://imgur.com/2VeicWe.png</p>", "tags": ["Audience\ua789 Tech"]}, {"location": "tools/omegat/fonts/", "title": "Recommended fonts in OmegaT \u2606", "text": "<p>Recommended font for Latin script: Noto Serif High legibility and readability font: https://brailleinstitute.org/freefont</p> Language Font Comment Korean UnDotum, Malgun Gothic Chinese NSimSun Aalso: Source Han Sans or Source Han Serif -- untested! Amharic, Tigrinya Ebrima Thai Leelawadee UI Japanese Meiryo, NSimSun Japan recomments font Meiryo for the PISA preview -- untested in Windows or OmegaT Khmer Khmer UI Info sent by Adrien to Alex for PISA GCM Tamil Vijaya or Nirmala UI"}, {"location": "tools/omegat/fonts/#how-to-install-suplemental-fonts-on-windows-10", "title": "How to install suplemental fonts on Windows 10", "text": "<p>Some languages with complex scripts require suplemental fonts, e.g. Korean, Khmer, etc.</p> <p>For example, to install Korean suplemental fonts, go to Windows Settings &gt; Apps &gt; Optional Features &gt; + Add a feature &gt; Korean Suplemental Fonts. Install that and restart OmegaT.</p>"}, {"location": "tools/omegat/fonts/#references", "title": "References", "text": "<ul> <li>Noto Sans Ethiopic for Amharic</li> <li>Fonts Standard for Ethiopian</li> </ul>"}, {"location": "tools/omegat/hunspell/", "title": "! Spell checking", "text": "<p>Source of truth:</p> <p>capstanlqc/omegat-hunspell</p> <p>pull from there to Hammurabi</p> <p>(path in omegat.prefs)</p>"}, {"location": "tools/omegat/match-sorting-specs/", "title": "OmegaT: match sorting specification", "text": ""}, {"location": "tools/omegat/match-sorting-specs/#introduction", "title": "Introduction", "text": "<p>The goal of this document is to document match ranking (or sorting) criteria and make them explicit and clear. Documented criteria can help gear new developments, patches and fixes.</p> <p>To define each criteria, we'll consider two matches and how OmegaT should determine which one is ranked on top of which.</p> <p>The ranking criteria have an impact on two things: </p> <ul> <li>sorting the matches (that is, what match is displayed above which)</li> <li>selecting the match that is used to auto-populate or pretranslate a segment</li> </ul> <p>The match selected for auto-population or pretranslation will always be the first one, the one on top. In other words, the match selected for auto-population or pretranslation must be ranked higher than any other matches.</p>"}, {"location": "tools/omegat/match-sorting-specs/#criteria", "title": "Criteria", "text": "<p>The different criteria are: </p> <ol> <li>similarity score</li> <li>auto-population precedence</li> <li>context binding</li> <li>position of the file in the list of files</li> <li>position of the match in the file</li> </ol>"}, {"location": "tools/omegat/match-sorting-specs/#1-similarity-score", "title": "1. Similarity score", "text": "<p>One obvious criteria is similarity score.</p>"}, {"location": "tools/omegat/match-sorting-specs/#decision", "title": "Decision:", "text": "<p>When considering two matches with different score, the one with higher score must be ranked higher than the one with lower score. </p> <p>When two matches have the same score, then other criteria must be used to discriminate between them. </p>"}, {"location": "tools/omegat/match-sorting-specs/#2-auto-population-precedence", "title": "2. Auto-population precedence", "text": "<p>Segments can be auto-populated by there mechanisms: </p> <ul> <li>Pretranslation (overwriting) and locking with exact matches from <code>/tm/enforce</code></li> <li>Pretranslation with exact matches from <code>/tm/auto</code></li> <li>Auto-population with a match from any other folder under <code>/tm</code> with a score higher than the threshold defined in the preferences when option \"Insert the best fuzzy match\" is checked in Preferences &gt; Editor.</li> </ul> <p>We'll refer to each of the three locations above as \"auto-population tier\".</p> <p>An exact match is an identical match, with 100/100/100% score plus no differences in terms of spacing, case or punctuation. Therefore, \"exact\" is a higher score than \"100/100/100%\".</p> <p>The only difference between the first two (<code>x-enforce</code> and <code>x-auto</code>, respectively) is that the second one (<code>x-auto</code>) only happens on untranslated segments, whereas for the first one (<code>x-enforce</code>) it makes no difference whether the segment is translated or not.</p> <p>In any case, the criteria to discriminate between two matches with same score (exact for pretranslation, whatever above the threshold but identical for auto-population) coming from a TM in the same location (any of the three above) must be the same.</p>"}, {"location": "tools/omegat/match-sorting-specs/#decision_1", "title": "Decision:", "text": "<p>When considering two matches</p> <ul> <li>with the same score,</li> </ul> <p>but one coming from <code>/tm/enforce</code> and the other coming from any other location under <code>/tm</code>, the match coming from <code>/tm/enforce</code> must be ranked higher than the other one. </p> <p>When considering two matches </p> <ul> <li>with the same score,</li> <li>one coming from <code>/tm/auto</code> and the other coming from any other location under <code>/tm</code> other than <code>/tm/enforce</code>, </li> </ul> <p>the match coming from <code>/tm/auto</code> must be ranked higher than the other one.</p> <p>Pretranslation vs auto-population</p> <p>Pretranslation is a type of auto-population that happens when the project is loaded, before the use enters a segment and is always based on exact matches. Auto-population stricto sensu happens when the user enters a segment and it can be based on matches of any score above the pre-defined threshold.</p> <p>When two matches have the same score and come from the same TMX file, then other criteria must be used to discriminate between them. </p>"}, {"location": "tools/omegat/match-sorting-specs/#3-context-binding", "title": "3. Context binding", "text": "<p>Note</p> <p>Only considered for auto-population, not for sorting. See screenshot below:</p> <p></p> <p>Matches can be based on:</p> <ul> <li>the source text</li> <li>context<ul> <li>filename</li> </ul> </li> </ul> <p>The context of the segment can be either prev/next segments or some identifier, such as the segment ID or a resname. The filename is an optional part of the context. If both the source text and the context match when comparing the match with the segment, then the match is said to have context binding.</p> <p>Matches in a TMX file under <code>/tm</code> may have context added as properties (<code>&lt;prop&gt;</code> elements): </p> <pre><code>    &lt;tu tuid=\"xyz456_0\"&gt;\n      &lt;prop type=\"file\"&gt;filename.xlf&lt;/prop&gt;\n      &lt;prop type=\"id\"&gt;xyz456_0&lt;/prop&gt;\n      &lt;tuv xml:lang=\"en\"&gt;\n        &lt;seg&gt;foo&lt;/seg&gt;\n      &lt;/tuv&gt;\n      &lt;tuv xml:lang=\"ta\"&gt;\n        &lt;seg&gt;bar&lt;/seg&gt;\n      &lt;/tuv&gt;\n    &lt;/tu&gt;\n</code></pre> <p>ICE matches\" vs \"alternative translations</p> <p>Context-bound matches are generally called \"in-context exact matches\" (or ICE matches). In OmegaT jargon, they are called \"alternative translations\".</p>"}, {"location": "tools/omegat/match-sorting-specs/#decision_2", "title": "Decision:", "text": "<p>When considering two matches that:</p> <ul> <li>have the same score </li> <li>come from the same auto-population tier</li> </ul> <p>and one match has context binding, then the match with context binding must be ranked higher than the other one.</p> <p>The match with context binding will be ranked higher than the other one even if it has a lower auto-population tier (context-binding wins).</p> <p>When the two matches have the same score, come from the same auto-population tier and none of them has context binding (or both have the same context binding, i.e. same context properties), then other criteria must be used to discriminate between them. </p>"}, {"location": "tools/omegat/match-sorting-specs/#4-position-of-the-tmx-file-in-the-list-of-files", "title": "4. Position of the TMX file in the list of files", "text": "<p>Files under <code>/tm</code> are sorted by descending alphabetical order. Assuming that only ASCII characters are used in the file path, descending order means a top-to-bottom order going from <code>0</code> to <code>9,</code> then <code>A</code> to <code>Z</code>, then <code>a</code> to <code>z</code>.</p> <p></p> <p>Question</p> <p>What happens with non-Latin or non-ASCII characters? how are they sorted? This should not be left to the OS's default behaviour.</p>"}, {"location": "tools/omegat/match-sorting-specs/#decision_3", "title": "Decision:", "text": "<p>When considering two matches that </p> <ul> <li>have the same score</li> <li>come from the same auto-population tier</li> <li>have no context binding (or the same binding properties)</li> </ul> <p>but they don't come from the same TMX file, then the match with the file path sorted higher will be ranked higher than the match with the file path sorted lower.</p> <p>When the two matches have the same score, come from the same auto-population tier, have no context binding (or the same binding properties) and come from the same TMX file, then other criteria must be used to discriminate between them. </p>"}, {"location": "tools/omegat/match-sorting-specs/#5-position-of-the-match-in-the-file", "title": "5. Position of the match in the file", "text": "<p>Entries (<code>&lt;tu&gt;</code> elements) in a TMX file appear sequentially in different lines, insde the body. </p> <pre><code>  &lt;body&gt;\n&lt;!-- Default translations --&gt;\n&lt;tu&gt;\n&lt;tuv lang=\"en\"&gt;\n&lt;seg&gt;Hello world&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;tuv lang=\"ta\"&gt;\n&lt;seg&gt;NUMBERS top&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;/tu&gt;\n&lt;tu&gt;\n&lt;tuv lang=\"en\"&gt;\n&lt;seg&gt;Hello world&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;tuv lang=\"ta\"&gt;\n&lt;seg&gt;NUMBERS bottom&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;/tu&gt;    &lt;/body&gt;\n</code></pre> <p>The TMX file is read top to bottom, and the corresponding matches are displayed in the Matches pane in the same order that they appear in the TMX file</p> <p></p>"}, {"location": "tools/omegat/match-sorting-specs/#decision_4", "title": "Decision:", "text": "<p>When considering two matches that </p> <ul> <li>have the same score</li> <li>come from the same auto-population tier</li> <li>have no context binding (or the same binding properties)</li> <li>come from the same TMX file, </li> </ul> <p>then the match that appears closer to the top of the TMX file will be ranked higher than the match which appears closer to the bottom of the file.</p>"}, {"location": "tools/omegat/match-sorting-specs/#summary", "title": "Summary", "text": ""}, {"location": "tools/omegat/mk_ta_notes_omt/", "title": "How to create T&amp;A notes in OmegaT (second source)", "text": ""}, {"location": "tools/omegat/mk_ta_notes_omt/#first-time", "title": "First time", "text": "<p>Steps:</p> <ol> <li>Create an OmegaT project with language pair <code>en</code> - <code>ta</code>, remove tags in the settings</li> <li>Add source file</li> <li>Write T&amp;A notes as the translation whenever appropriate</li> <li>Run script \"Write Project to Excel\" to export source text and notes to Excel</li> <li>Run script \"TA - Create T&amp;A Notes TM\" to copy the notes to the second source space (in <code>/tm/tmx2source</code>)</li> </ol>"}, {"location": "tools/omegat/mk_ta_notes_omt/#updates", "title": "Updates", "text": "<p>If a new version of the source file is submitted:</p> <ol> <li>Add it to the previous project (optionally remove the old version).</li> <li>Optional: Ctrl+D and move exported TM to <code>/tm/auto</code> to have background color in 100% matches</li> <li>Tweak preferences to insert T&amp;A notes for updated segments (up to a certain limit) -&gt; draft notes</li> <li>Go to next translated segment (Ctrl+Shift+U) to review the original notes (now drafts) in updated segments</li> <li>When all drafts are reviewed, run steps 4 and 5 above if appropriate</li> </ol>"}, {"location": "tools/omegat/mk_ta_notes_omt/#finally", "title": "Finally", "text": "<p>If the same project needs to be used for a real translation or as a template:</p> <ul> <li>Run script \"Flush Working TM\" to flush the project's internal working TM (remove all translations)</li> </ul>"}, {"location": "tools/omegat/mk_translatability_report_omt/", "title": "How to obtain an automated translatability report in OmegaT", "text": ""}, {"location": "tools/omegat/mk_translatability_report_omt/#preconditions", "title": "Preconditions", "text": "<p>Get the \"TA - Translatability Assessment\" script and install it in OmegaT (in the user configuration &gt; <code>scripts</code> folder).</p>"}, {"location": "tools/omegat/mk_translatability_report_omt/#steps", "title": "Steps", "text": "<ol> <li>Create an OmegaT project with language pair <code>en</code> - <code>ta</code> and remove tags in the settings.</li> <li>Add source file(s).</li> <li>Run the <code>TA - Translatability Assessment</code> script. It might take a while depending on the volume. Check the status bar to see when the script is done.</li> <li>When the script execution is completed, press Ctrl+S to register all translations.</li> <li>Run script \"Write Project to Excel\" to export source text and notes to Excel.</li> <li>Fetch the report from the <code>script_output</code> folder in the project.</li> </ol>"}, {"location": "tools/omegat/nbsp/", "title": "No-break spaces", "text": "<p>To insert a non-breaking space in OmegaT, follow these steps:</p> <ol> <li>Type <code>\\nbsp</code> in the position you want to insert the non-breaking space.</li> <li>Press Enter on your keyboard to accept the AutoText entry and covert <code>\\nbsp</code> to an actual non-breaking space.</li> </ol> <p>Info</p> <p>Check the Autotext section for general information about inserting special characters.</p>", "tags": ["Audience\ua789User"]}, {"location": "tools/omegat/omegat-main-capstan/", "title": "OmegaT main-capstan", "text": "<p>We maintain our own fork of OmegaT, where we merge features/enhancements and bug fixes developed by Briac Pilpr\u00e9 and Thomas Cordonnier. </p> <p>We used version 5.7.2 in PISA 2025 FT and other projects, while we worked on patches to be included in 5.7.3 (to be released for PISA 2025 MS).</p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/omegat-main-capstan/#summary-of-what-was-done", "title": "Summary of what was done:", "text": "<p>In our clone: <pre><code>cd capstanlqc/omegat\ngit checkout releases/5.7.2-capstan\n</code></pre></p> <p>Created the new <code>main-capstan</code> branch based on the branch we used to create the 5.7.2 build: <pre><code>git checkout releases/5.7.2-capstan -b main-capstan\n</code></pre> Added Thomas' clone as remote (it needs to be done locally in any new clone of capstanlqc/omegat): <pre><code>git remote add thomas https://github.com/t-cordonnier/omegat.git\n</code></pre></p> <p>Got all Thomas' current branches (it needs to be done to fetch updates in Thomas' code): <pre><code>git fetch thomas\n</code></pre></p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/omegat-main-capstan/#to-merge-a-feature-branch", "title": "To merge a feature branch", "text": "<p>Check out the branch where to start merging feature branches: <pre><code>git checkout main-capstan\n</code></pre></p> <p>To add feature branch, do <code>git pull thomas BRANCH</code>. For example, to add the functuality commit target files on close, it was done:</p> <pre><code>git pull thomas compile-on-close\n</code></pre> <p>Then, committed changes: <pre><code>git push origin main-capstan\n</code></pre></p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/omegat-main-capstan/#tags", "title": "Tags", "text": "<p>We tagged the commit we used to create the 5.7.2 build: <pre><code>git tag -a v5.7.2-capstan a978d82 -m \"Version based on 5.7.1...\" \ngit push origin v5.7.2-capstan\n</code></pre></p> <p>The same thing will be done with next build, which will tagged as <code>v5.7.3-capstan</code>, and so on.</p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/omegat5_testing/", "title": "OmegaT 5 - installation and testing guide", "text": ""}, {"location": "tools/omegat/omegat5_testing/#version-history", "title": "Version history", "text": "Date Person Description 2021-08-18 Manuel Souto Pico Creation 2022-11-03 Manuel Souto Pico Update version 5.5.0 to 5.7.1"}, {"location": "tools/omegat/omegat5_testing/#introduction", "title": "Introduction", "text": "<p>OmegaT 5 is the current latest version, where a few bugs found while using OmegaT 4 have been fixed (not always fixed retroactively in version 4.x) and a number of enhancements and new features have been added.</p>"}, {"location": "tools/omegat/omegat5_testing/#installation-of-omegat-5", "title": "Installation of OmegaT 5", "text": "<p>If you have OmegaT 4 (probably 4.2.0 to be precise) or other versions installed in your machine, you can install OmegaT 5 in parallel without needing to remove other OmegaT installations, if that's what you want (and probably that's what you want for testing purposes).</p> <p>You may proceed as follows:</p> <ul> <li>Click here to download OmegaT 5.7.1.</li> </ul> <ul> <li>Double click the executable file you have downloaded to start the installation.</li> <li>Follow all steps as usual but in the Select Destination Location, where you might see the path of your current installation (e.g. <code>C:\\Program Files\\OmegaT</code>), make sure you enter a different path (e.g. <code>C:\\Program Files\\OmegaT_5.7.1</code>) so that OmegaT does not overwrite your existing installation of OmegaT 4.2.0.</li> <li>Once the installation is complete, make a shortcut to file <code>C:\\Program Files\\OmegaT_5.5.0\\OmegaT.exe</code> and put it on your desktop or your taskbar, in a way that it doesn't get confused with shortcuts for any other versions.</li> </ul> <p>Your user configuration folder is common for all your OmegaT installations (unless you change it), so all your recent projects and customization should be available in OmegaT 5.x as well. As of today (2021-08-18), the customization version is 69.</p>"}, {"location": "tools/omegat/omegat5_testing/#testing", "title": "Testing", "text": "<p>This is an ad-hoc testing task, you are free to test the functionalities that you normally use and explore as you see fit. </p> <p>Some functions will be a bit different and you might find new features, which should be fine, and might simply entail updates in user guides and documentation. </p> <p>If it is the case that you are unable to produce the expected outcome by doing one of your current actions does or a slight variation of it, then it would be a good idea that you create a ticket in our OmegaT Helpdesk.</p> <p>Of course, any obvious bugs or errors should also deserve a ticket.</p>"}, {"location": "tools/omegat/omegat5_testing_adhoc/", "title": "OmegaT 5 - installation and testing guide", "text": ""}, {"location": "tools/omegat/omegat5_testing_adhoc/#version-history", "title": "Version history", "text": "Date Person Description 2021-08-18 Manuel Souto Pico Creation 2022-11-03 Manuel Souto Pico Update version 5.5.0 to 5.7.1"}, {"location": "tools/omegat/omegat5_testing_adhoc/#introduction", "title": "Introduction", "text": "<p>OmegaT 5 is the current latest version, where a few bugs found while using OmegaT 4 have been fixed (not always fixed retroactively in version 4.x) and a number of enhancements and new features have been added.</p>"}, {"location": "tools/omegat/omegat5_testing_adhoc/#installation-of-omegat-5", "title": "Installation of OmegaT 5", "text": "<p>If you have OmegaT 4 (probably 4.2.0 to be precise) or other versions installed in your machine, you can install OmegaT 5 in parallel without needing to remove other OmegaT installations, if that's what you want (and probably that's what you want for testing purposes).</p> <p>You may proceed as follows:</p> <ul> <li>Click here to download OmegaT 5.7.1.</li> </ul> <ul> <li>Double click the executable file you have downloaded to start the installation.</li> <li>Follow all steps as usual but in the Select Destination Location, where you might see the path of your current installation (e.g. <code>C:\\Program Files\\OmegaT</code>), make sure you enter a different path (e.g. <code>C:\\Program Files\\OmegaT_5.7.1</code>) so that OmegaT does not overwrite your existing installation of OmegaT 4.2.0.</li> <li>Once the installation is complete, make a shortcut to file <code>C:\\Program Files\\OmegaT_5.5.0\\OmegaT.exe</code> and put it on your desktop or your taskbar, in a way that it doesn't get confused with shortcuts for any other versions.</li> </ul> <p>Your user configuration folder is common for all your OmegaT installations (unless you change it), so all your recent projects and customization should be available in OmegaT 5.x as well. As of today (2021-08-18), the customization version is 69.</p>"}, {"location": "tools/omegat/omegat5_testing_adhoc/#testing", "title": "Testing", "text": "<p>This is an ad-hoc testing task, you are free to test the functionalities that you normally use and explore as you see fit. </p> <p>Some functions will be a bit different and you might find new features, which should be fine, and might simply entail updates in user guides and documentation. </p> <p>If it is the case that you are unable to produce the expected outcome by doing one of your current actions does or a slight variation of it, then it would be a good idea that you create a ticket in our OmegaT Helpdesk.</p> <p>Of course, any obvious bugs or errors should also deserve a ticket.</p>"}, {"location": "tools/omegat/omt2xliff/", "title": "Outsource project as XLIFF", "text": ""}, {"location": "tools/omegat/omt_custom_roadmap/", "title": "\u2606 OmegaT customization roadmap", "text": "<p>Estimated Reading Time: 15 min</p> Person Date Update Manuel 2019-08-19 Creation <p>This document aims to give an overview about the evolution and the current situation of the OmegaT installation and customization process for all kinds of users in PISA and PIAAC. In general you can live without knowing all this, but perhaps this information can be useful to answer some questions you might have sometimes. I try to be brief and not too technical. </p> <p>I say \u2018evolution\u2019 because the approach has changed since the beginning of these respective cycles, even thought that evolution has not affected all users equally. </p> <p>Why is the customization needed? There are two main reasons: First and most important, the customization is necessary to be able to work with non-standard XLIFF files produced by ETS (or potentially, by other partners). Secondly, it is convenient to select automatically (i.e. without the user having to think or spend time or have the chance to overlook anything) a number of parameters in the OmegaT interface that will make the work of users easier and safer, and also because having homogeneous settings across different users makes it much easier for us (tech team) to train users and provide support to them. </p> <p>That second reason hasn\u2019t changed since the initial approach and is unlikely to change, which means that some means to customize will always be desirable even if ETS or any other partner produce valid XLIFF files. At the moment, given the non-valid XLIFF files, customization is not only desirable but also necessary. </p> <p>Pros of each step below refer to the customization process only and are in relation to the previous approach. Cons refer to future improvements. You might want to think of those \"pros\" and \"cons\" as \"improvements\" and \"remaining challenges\".</p>"}, {"location": "tools/omegat/omt_custom_roadmap/#1-initial-approach-omegat-for-pisa-and-omegatcp", "title": "1. Initial approach: OmegaT for PISA and OmegaTcp", "text": "<p>We have abandoned the initial approach we had a few years ago where we provided the user with a complete bundle including the OmegaT standard installation files and specific configuration for one specific project or others (i.e. either PISA or other projects that were not PISA, through two kinds of installers: \u201cOmegaT for PISA\u201d and \u201cOmegaTcp\u201d, where \u201ccp\u201d means \u201ccApStAn projects\u201d, which means that we prepare files ourselves, properly). That specific configuration was indispensable to work with non-standard XLIFF files produced by ETS, but can be incompatible with other projects where we do have standards files. The main disadvantage of this approach was that updates were slow, as the 200~300 MB bundle took some time to download, and erased any user settings. Besides, the customization was Windows-specific (which means we were forcing Linux and Mac users to use Windows). </p> <p>In a nutshell:</p> <ul> <li>One Windows-specific installer for PISA</li> <li>OmegaTcp: Another Windows-specific installer for cApStAn projects</li> </ul> <p>Pros:</p> <ol> <li>The custom installer for PISA allowed us to handle XLIFF files prepared by ETS</li> </ol> <p>Cons:</p> <ol> <li>The user needed to download the full installer every time there was an update</li> <li>The custom files are saved in the default location in the installation folder and need writing permissions to run the customization utility</li> <li>A separate installation of OmegaT was needed to handle other projects</li> </ol>"}, {"location": "tools/omegat/omt_custom_roadmap/#2-new-approach-separate-customization", "title": "2. New approach: separate customization", "text": "<p>We have now (2018-2019) moved towards an approach where, instead of providing a bundle that contains all needed files for the installation, we provide the original link to the OmegaT standard installer, and we provide the customization (to have that specific configuration) separately. </p>"}, {"location": "tools/omegat/omt_custom_roadmap/#21-omegat-for-participants-customization-utility", "title": "2.1. OmegaT for participants: customization utility", "text": "<p>For PISA and PIAAC participants, apart from the link to download OmegaT, we have thus provided a separate utility that would try to guess the default installation folders and user configuration folders and put custom files there as appropriate. This approach proved challenging, mostly because OmegaT\u2019s default installation folders are often not writeable without the appropriate permissions, and because it wasn\u2019t possible for the customization utility to guess where those folders were when the user had to use non-default folders, for whatever reason. We had expected a limitation due to lack of permissions, rightly noted by some PMs, but the process brought about too many unexpected situations and a lot of support requests from users. Another disadvantage of this approach is that every new update erases user settings, such as recent projects, which can be a problem for some users. </p> <p>In a nutshell:</p> <ul> <li>Default OmegaT installer and one Windows-specific customization utility for PISA</li> <li>OmegaTcp: (The installation for cApStAn projects hasn\u2019t changed)</li> </ul> <p>Pros:</p> <ol> <li>The user doesn\u2019t need to download the full installer and re-install the whole of OmegaT whenever there\u2019s an update in the custom files</li> <li>The user downloads the original OmegaT installer directly from the OmegaT website, minimizing any malware infection that could have happened during our manipulation and bundling</li> </ol> <p>Cons:</p> <ol> <li>Some custom files are saved in the installation folder and the user doesn\u2019t always have writing permissions to do the customization in that folder</li> <li>The customization utility erases user settings</li> <li>A separate installation of OmegaT is needed to handle other projects</li> <li>The customization is Windows-dependent </li> </ol> <p>We had a couple of fallback plans for when the default approach proved too challenging or for other operating systems other than Windows, and we kept looking for a better approach, which we found. However, since PISA/PIAAC participants (and their IT teams) had already been trained this way and made an effort to accommodate this customization process, we have kept this approach for PISA/PIAAC participants (translators, reconcilers, etc.) in general, and for most of them it is expected to be valid. For those who have issues, we had fallback plans before and we have a new approach now, which is:</p>"}, {"location": "tools/omegat/omt_custom_roadmap/#22-omegat-for-verifiers-and-all-users-going-forward-customization-script", "title": "2.2. OmegaT for verifiers and all users going forward: customization script", "text": "<p>The new and current (2019.08.21) approach is very similar, but instead of downloading and running a separate executable utility outside OmegaT, the user should run a script from inside OmegaT. Another difference is that, to overcome potential limitations in permissions, we don\u2019t use the default location for scripts and plugins any more (inside the installation folder), but we have moved scripts and plugins to the user configuration folder, which should always be writable for the user and therefore no rights issues are expected. The advantages of this are (i) that the script doesn\u2019t have to guess the location of those folders, because OmegaT already knows and the script uses that knowledge; and (ii) that we can safely assume that the user has enough permissions to run the script; (iii) also, this approach does not erase user settings, such as shortcuts to recent projects. </p> <p>In a nutshell:</p> <ul> <li>Default OmegaT installer and one platform-independent customization script for PISA/PIAAC</li> <li>OmegaTcp: (The installation for cApStAn projects hasn\u2019t changed)</li> </ul> <p>Pros:</p> <ol> <li>Platform independent, i.e. the user can use the operating system of their preference</li> <li>Doesn\u2019t erase user settings</li> <li>No separate program needs to be run, everything happens inside OmegaT </li> </ol> <p>Cons:</p> <ol> <li>A separate installation of OmegaT is needed to handle other projects</li> </ol> <p>An effort was made to come up with this new approach and have it ready before the PISA/PIAAC verification seminar, and therefore it was the approach verifiers used to customize their installation. It should also be the default approach for any users going forward, except PISA/PIAAC participants that had no problems with the previous approach.</p> <p>The platform-independent aspect of this approach is non-negligible. Users have the freedom to use the operating system of their choice, which means that we are not imposing a particular operating system (Windows). Some users might not be used to Windows or might struggle to install and use it. From the point of view of the user experience in OmegaT, it is certainly preferable to stay in an environment where the user is comfortable rather than having to use another machine or trying to install a virtual machine. From the support perspective, it also makes sense, too, since less issues are expected. </p>"}, {"location": "tools/omegat/omt_custom_roadmap/#3-expected-future-developments", "title": "3. Expected future developments", "text": "<p>So far we are using this approach for PISA/PIAAC, but the idea is to use different customization bundles for different projects. That should allow the user to choose the right configuration depending on the project or task in which they have to work, either choosing among several configurations or customizing OmegaT ex-novo every time they have to work in a new project that requires a new configuration. At least two configurations are needed: one for ETS files (PISA/PIAAC), another for other projects (where XLIFF files are valid according to the XLIFF specification), and the differences between the two are very few, but important. The PM would have to ask the user to customize OmegaT (or choose the right configuration) according to the project or task they will be involved with. </p> <p>In a nutshell:</p> <ul> <li>Default OmegaT installer and platform-independent customization scripts <ul> <li>for PISA/PIAAC</li> <li>for other projects (one for all, or one per project\u2026 as requested by PM)</li> </ul> </li> </ul> <p>Pros:</p> <ol> <li>Only one installation of OmegaT for all projects, less confusion when handling updates</li> <li>It is possible to customize OmegaT before the user is invited to upgrade to a new version (if any) \u2013 as not all custom files might be compatible with newer versions.</li> </ol> <p>Cons:</p> <ol> <li>The user has to run a project-specific customization script before starting/resuming work on that project. If a user handles two or more projects simultaneously, customization should happen every time they are about to switch to a new project.</li> </ol> <p>Suggestions are welcome. </p>"}, {"location": "tools/omegat/omt_custom_roadmap/#mini-faq-discussion-forum", "title": "Mini FAQ / discussion forum", "text": "<p>If you have any question, please add it below.</p> <ul> <li> <p>Question: It may happen that the same linguist works in two projects with different OmegaT configurations. Does this create a problem?</p> <ul> <li>Answer: No problem, but the user needs to switch between two OmegaT settings. As explained above, at the moment we have PISA/PIAAC-customized OmegaT for PISA/PIAAC and OmegaTcp for other projects (cp = cApStAn Projects) \u2013 this is done through different desktop shorcut icons. Going forward, we might drop OmegaTcp and use different customizations for different projects (at least one for PISA/PIAAC and one for other projects) in the standard installation of OmegaT \u2013 this might be done by running the customizer with a specific URL (one URL specific for each project) or by using a launcher where the user chooses the appropriate profile (TBD).</li> </ul> </li> <li> <p>Question: If the user has originally installed the customizer using the separate customizer.exe file, can they just simply do it using the new method (i.e. within OmegaT) from here on? From above my understanding is that they do the same thing, but the new method helps circumvent some issues caused by user rights or deviating installation paths, is that correct?</p> <ul> <li>Answer: Each user should follow the installation and customization guide that we have written for their profile. There are two profiles: (1) countries/participants (including NPM, translators and reconcilers) and (2) verifiers, and there are two customization modes and therefore two customization guides. At this stage, we are not unifying the two customization approaches in only one, therefore countries/participants are expected to follow the guide that has been written for them. For this cycle of PISA/PIAAC we don't want to re-train countries/participants to use another approach. Exceptionally we might use the customization script as yet another fallback plan for countries/participants who have issues with their default approach, but this is a decision that the tech team should take when providing support. Also, we keep track of what settings each user has and we need to refer to that information when providing support. In a nutshell, a PM should always ask the user (regardless of their profile) to refer to their installation and customization guide. </li> </ul> </li> <li> <p>Question: Can we use the current PISA/PIAAC version for projects where target files are something other than .xlf, like Word or Excel files? I don't remember working on xliffs in any other project than PIAAC (and PISA), in other projects where we have used OmegaT it has been Word or Excel files. </p> <ul> <li>Answer: Yes, you can use the PISA/PIAAC-customized OmegaT for any other projects as long as the source files don't include XLIFF files.</li> </ul> </li> </ul>"}, {"location": "tools/omegat/omt_custom_roadmap/#omegat-tips-and-tricks-newsletter", "title": "OmegaT tips and tricks newsletter", "text": "<p>Subscribe to the OmegaT Tips and Tricks newsletter to receive updates and useful tips.</p>"}, {"location": "tools/omegat/omt_custom_tech/", "title": "Customization script [<code>updateConfigBundle.groovy</code>]", "text": ""}, {"location": "tools/omegat/omt_custom_tech/#customization", "title": "Customization", "text": "<p>OmegaT can be customized by means of:</p> <ul> <li>plugins (and their properties files)</li> <li>scripts (and their properties files)</li> <li>other configuration files</li> </ul> <p>All these custom files will be saved in the user configuration folder. Plugins and scripts are saved in their respective folders, <code>plugins</code> and <code>scripts</code>, and the rest of the configuration files are written directly to the user configuration folder.</p>"}, {"location": "tools/omegat/omt_custom_tech/#options", "title": "Options", "text": "Option Description <code>customUrl</code> insert URL between quotes or set to \"\" (empty) to ask the user on the first run. <code>autoLaunch</code> If set to <code>true</code> and the script is saved at <code>scrips\\application_startup</code>, the script will run when OmegaT is started. <code>removeExtraPlugins</code> Lets you delete any loose jar files in the <code>plugins</code> folder under the installation folder. <code>deletePlugVerbose</code> If set to true, makes the script list the jar files to be removed manually. If set to false, it makes the script remind the user to remove plugins from the <code>plugins</code> folder under the installation folder."}, {"location": "tools/omegat/omt_custom_tech/#remote-requirements", "title": "Remote requirements", "text": "<p>The URL must point to a location in a file server, where the <code>index.html</code> (or equivalent) lists the following lines:</p> <ol> <li>Customization version, including the an integer number followed by underscore followed by a three-character code (e.g. <code>csp</code>)<ul> <li>The first character stands for config files: it must always be <code>c</code>, which means some config files have been updated (at least the <code>version_notes.txt</code> file).</li> <li>The second character stands for scripts: if it is <code>s</code>, that means that some scripts have been updated, otherwise it must be <code>0</code></li> <li>The second character stands for plugins: if it is <code>p</code>, that means that some plugins have been updated, otherwise it must be <code>0</code></li> </ul> </li> <li>The URL to the <code>version_notes.txt</code>, including the history of updates and the version number in the third line</li> <li>The URL to the three zip bundles (for config, plugins and scripts)</li> </ol> <p>For example: <pre><code>49_cs0\nhttps://www.example.com/OmegaT/customization/config/version_notes.txt\nhttps://www.example.com/OmegaT/customization/config.zip\nhttps://www.example.com/OmegaT/customization/plugins.zip\nhttps://www.example.com/OmegaT/customization/scripts.zip\n</code></pre></p> <p>In the example above, there are updated config files and scripts, but no plugins, so the script doesn't need to download plugins. </p> <p>The script compares the customization version in the remote <code>version_notes.txt</code> with the customization version in the local <code>version_notes.txt</code> (which is, if it exists, a copy of a previous customization), and download only what is new if the two versions are consecutive (45 vs 46). If they are far apart by more than 1, then all custom files are downloaded.</p> <p>The version notes must be a markdown file that looks like this: </p> <p><pre><code># OmegaT (cApStAn) customization utility (or any other title)\n\n## Update 49_c0p (2020-06-23)\n\n* Plugin foo.jar updated\n* Plugin bar.jar updated\n\n## Update 48_cs0 (2020-06-23)\n\n* Plugin foo.groovy updated\n* Plugin bar.groovy updated\n</code></pre> etc.</p> <p>Every time the custom files are updated in the remote location (e.g. <code>https://www.example.com/OmegaT/customization</code>), a new line with the new version must be added to the remote <code>version_notes.txt</code> file and the three bundles must be updated with the new files. The script downloads the necessary bundle as required.</p>"}, {"location": "tools/omegat/omt_custom_tech/#caveats", "title": "Caveats", "text": ""}, {"location": "tools/omegat/omt_custom_tech/#plugins", "title": "Plugins", "text": "<p>To avoid conflicts, the script deletes all jar files from the installation folder (if that folder is writeable) or prompts the user do so manually (if the folder is read-only). </p> <p>Any jar files that the user might wish to keep can be saved under a subfolder in the <code>plugins</code> folder, e.g. <code>plugins\\my_folder</code>. That way they will be protected and the customization script will not touch them. </p>"}, {"location": "tools/omegat/omt_custom_tech/#restart", "title": "Restart", "text": "<p>To make sure that the new settings are applied (in case there is more than instance running), OmegaT will close after the customization update. It needs to be restarted manually. Since the check for updates happens when OmegaT is launched and before any project is open, if there is any update available, it'll have to be started twice. </p>"}, {"location": "tools/omegat/omt_custom_tech/#locations", "title": "Locations", "text": ""}, {"location": "tools/omegat/omt_custom_tech/#where-is-the-user-configuration-folder", "title": "Where is the user configuration folder", "text": "<p>The user can reach that folder in two ways:</p> <ul> <li>From OmegaT, go to Tool &gt; User Configuration Folder</li> <li>From the operating system, (in Windows) press Win+R and type <code>%appdata%/OmegaT</code>.</li> </ul>"}, {"location": "tools/omegat/omt_custom_tech/#where-is-the-installation-folder", "title": "Where is the installation folder", "text": "<p>On a 64-bit machine under Windows 10, it is by default on path <code>C:\\Program Files\\OmegaT</code>.</p>"}, {"location": "tools/omegat/omt_custom_user/", "title": "OmegaT (4.2.0) customization in a nutshell (for Windows)", "text": "<p>The following instructions apply to Windows users, please create a ticket if you use Mac or Linux.</p> <p>Please proceed as follows:</p> <ol> <li>Make sure file extensions are displayed in your computer, you can follow tips here.</li> <li>If OmegaT 4.2.0 is already installed in your machine, skip this step. If it's not, please install it. You can download it from this link.</li> <li>Download the customization script from this location. When download is complete, please make sure your browser didn't add a <code>.txt</code> extension or any other to it (some browsers do) -- the file extension of the script should be <code>.groovy</code>.</li> <li>In OmegaT, go to Tools &gt; Scripting &gt; File &gt; Open Script and open the customization script. You will have to navigate in your system to find it (it probably is in your Downloads folder)</li> <li>When the script is open in the scripting window, press the Run button.  The script will run and customize your installation. You might need to restart OmegaT at the end.</li> </ol> <p>\ud83d\udc49 WARNING The script might warn you that some <code>jar</code> files are found in path <code>C:\\Program Files\\OmegaT\\plugins</code> and cannot be deleted automatically. If that's the case, please delete them manually.</p>"}, {"location": "tools/omegat/omt_team_steps4xlat/", "title": "Working with OmegaT team projects", "text": "<p>This document is addressed to linguists (translators, revisers, etc.).</p> <p>Upper-cased names are used as placeholders in this document.</p>"}, {"location": "tools/omegat/omt_team_steps4xlat/#file-organization", "title": "File organization", "text": "<p>File organization on your end is very important for the successful execution of your work. Here come some recommendations for a tidy organization.</p> <ol> <li> <p>Designate a working folder for the project in your machine, and use that same location for all related tasks. We would suggest a location at a very high level in the folder structure in your machine, e.g. one of the following</p> </li> <li> <p><code>C:\\Work\\CLIENT\\PROJECT</code> or <code>C:\\Users\\USER\\Work\\CLIENT\\PROJECT</code> (for Windows)</p> </li> <li> <p><code>/Users/USER/Work/CLIENT/PROJECT</code> (for macOS)</p> </li> <li> <p>Inside the <code>PROJECT</code>'s working folder above, create the following folder structure (or something similar that fits your purposes):</p> </li> </ol> <pre><code>\u251c\u2500\u2500 00_Admin\n\u251c\u2500\u2500 01_Instructions\n\u251c\u2500\u2500 02_Tasks\n\u2514\u2500\u2500 03_Whatever\n</code></pre> <p>When you download a team project (see below), if the path to your local OmegaT project folder that OmegaT proposes is not suitable, you might want to replace it with the path to your <code>02_Tasks</code> folder (or a subfolder deeper inside), e.g. <code>C:\\Users\\Manolo\\Work\\cApStAn\\Delta\\02_Tasks</code>. </p> <p>The final path should look like <code>C:\\Users\\USER\\Work\\CLIENT\\PROJECT\\02_Tasks\\OMT-PROJ-DIR</code> (where <code>OMT-PROJ-DIR</code> is (the name of) your local OmegaT project folder and everything else to the left of it is the path leading to your <code>02_Tasks</code> folder).</p> <p>If you have already downloaded a team project to your designated location inside your <code>02_Tasks</code> folder, then the proposed path to the local project folder should be already fine.</p>"}, {"location": "tools/omegat/omt_team_steps4xlat/#omegat-571", "title": "OmegaT 5.7.1", "text": "<p>If you haven't done so, please follow our installation and customization guide to get up and running with OmegaT 5.7.1.</p> <p>If you were using OmegaT 4.2.0 until now to work in OmegaT for other projects, you are advised to uninstall that version first. If you would like to keep both versions, let us know and we can advise about the best way to do that.</p>"}, {"location": "tools/omegat/omt_team_steps4xlat/#downloading-team-projects", "title": "Downloading team projects", "text": "<p>To start working on your project, proceed as follows.</p> <ol> <li> <p>If you don't have one, please create a Github account. As credentials to work in OmegaT, you will need your Github username and a personal access token (as password). </p> <p>For management purposes, it's better if your username identifies you clearly (e.g. for Manuel Souto Pico, something like <code>msoutopico</code> or <code>manuelsouto</code> or <code>msouto</code> etc. would be fine -- but something like <code>mnlstpc</code> would be a bit cryptic).</p> </li> </ol> <pre><code>\u25ba @TODO: explain here how the token must be created... repo etc.\n</code></pre> <ol> <li> <p>Send your username to your PM at cApStAn so that they can give you access to your project.</p> </li> <li> <p>You will receive a URL to your OmegaT project repository. Copy it to your clipboard (e.g. select it and press <code>Ctrl+C</code>).</p> </li> <li> <p>In OmegaT, go to Project &gt; Download team project.</p> </li> <li> <p>Click inside the Repository URL field and press <code>Ctrl+V</code> to paste the URL you have copied.</p> </li> <li> <p>Click inside the New Local Project Folder field. </p> </li> <li> <p>If it's the first time you download this project, you may be asked for authentication. Please enter your Github user name in the User field and your personal access token in the Password field, then press OK.</p> </li> <li> <p>Then, a path to your local OmegaT project folder will be proposed automatically in the New Local Project Folder field, which you can edit if not suitable (see our file organization tips above). </p> </li> <li> <p>Press OK . Your project will download and open in OmegaT.</p> </li> </ol>"}, {"location": "tools/omegat/omt_team_steps4xlat/#stopping-and-resuming-work", "title": "Stopping and resuming work", "text": "<p>When you want to stop working on your project, go to Project &gt; Close in OmegaT to close the project. </p> <p>Please close the project if you're going to be away from your computer for some time. No need to close OmegaT, that's up to you.</p> <p>When you want to resume working on that project, go to Project &gt; Open Recent Project and select the project you want to open (probably the one at the top of the list).</p> <p>There's no need to download the project again if you have already done so once.</p>"}, {"location": "tools/omegat/omt_team_steps4xlat/#delivery", "title": "Delivery", "text": "<p>You can monitor your progress by looking at the status bar in the bottom right of the OmegaT main window. It will tell you the percentage of translated segments and the number of remaining (untranslated) segments, both in the current file iand in the whole OmegaT project.</p> <p>When the status bar shows <code>100% (0 left)</code> and there are no more segments you must edit, then you can deliver. </p> <p>To deliver, go to Project &gt; Commit Target Files.</p>"}, {"location": "tools/omegat/omt_wc/", "title": "How to run a wordcount analysis in OmegaT", "text": "<p>The following steps show how to obtain a wordcount analysis report from OmegaT without opening OmegaT.</p>"}, {"location": "tools/omegat/omt_wc/#steps", "title": "Steps", "text": "<ol> <li>Connect to <code>Ur</code> and go to the <code>/media/data/data/company/cApStAn_Tech/11_WC</code> folder (probably <code>U:\\cApStAn_Tech\\11_WC</code> on Windows).</li> </ol> <p>You will see three main folders: </p> <pre><code>\u251c\u2500\u2500 01_ToAnalyze\n\u251c\u2500\u2500 02_Projects\n\u251c\u2500\u2500 03_Analyzed\n\u2514\u2500\u2500 _tech\n</code></pre> <ol> <li>Drop your files in the <code>01_ToAnalyze</code> folder.</li> </ol> <p>Caveat: your file should only contain the translatable text. You're reponsible for removing any text you don't want to analyze.</p> <ol> <li>After 1 minute, retrieve your wordcount analysis report in <code>03_Analyzed</code>.</li> </ol>"}, {"location": "tools/omegat/pisa25_omegat_teamproj_steps/", "title": "Instructions for PISA 25 translators (testing in <code>fr</code>)", "text": "<p>NOTE for testing: During testing, please put yourself in the skin of a (clumsy) user (e.g. a translator, an NPM, a verifier, etc.) who knows nothing other than what is described in this guide. The purpose of testing is to find problems in the documentation as well as in the documented process, so please flag any issues you see in both.</p>"}, {"location": "tools/omegat/pisa25_omegat_teamproj_steps/#file-organization", "title": "File organization", "text": "<p>In this cycle of PISA we'll be using a new approach to handle translation projects, which will be more efficient but also potentially more challenging in some regards. File organization on your end is very important for the successful execution of this task. We strongly advise you that you follow these instructions to the letter.</p> <ol> <li> <p>Designate a working folder for PISA in your machine, and use that same location for all PISA-related tasks. We would suggest a location at a very high level in the folder structure in your machine, e.g. one of the following</p> </li> <li> <p><code>C:\\Work\\PISA2025</code> or <code>C:\\Users\\USER\\Work\\PISA2025</code> (for Windows)</p> </li> <li> <p><code>/Users/USER/Work/PISA2025</code> (for macOS)</p> </li> <li> <p>Create the following folder structure in the working folder above:</p> </li> </ol> <p>```     \u251c\u2500\u2500 00_Admin (tentative)    \u251c\u2500\u2500 01_Instructions (tentative)    \u251c\u2500\u2500 02_Projects    \u2514\u2500\u2500 03_Whatever (tentative)</p> <p>NOTE for testing: Please ignore all folders above except <code>02_Projects</code>.</p>"}, {"location": "tools/omegat/pisa25_omegat_teamproj_steps/#omegat-571", "title": "OmegaT 5.7.1", "text": "<p>If you haven't done so, please follow our installation and customization guide to install and customize OmegaT 5.7.1.</p> <p>NOTE for testing: Make a copy of your user configuration folder: 1. press <code>Win+R</code> and run <code>%appdata%</code> (or go to Options &gt; User Configuration Folder in OmegaT); 2. in the folder that will open, make a copy of the <code>omegat</code> folder (e.g. as <code>omegat_YYYYMMHH</code>).</p> <p>NOTE for testing: Install OmegaT 5.7.1 in <code>C:\\Apps\\OmegaT_5.7.1</code> so that it doesn't overwrite, or conflict with, your current installation of version 4.2.0. You can do this for any OmegaT versions you want to install in parallel.</p>"}, {"location": "tools/omegat/pisa25_omegat_teamproj_steps/#downloading-team-projects", "title": "Downloading team projects", "text": "<p>To start working on your project, proceed as follows.</p> <ol> <li>If you don't have one, please create a free Github account. As credentials to work in OmegaT, you will need your Github username and a personal access token. </li> </ol> <p>Also, make sure your username follows the following patterns (where <code>{lang}</code> stands for your language code, e.g. <code>fra-BEL</code> for French (Belgium), etc.):</p> <pre><code> - `TRA-{lang}-your-name` if you are a translator\n - `REC-{lang}-your-name` if you are a reconciler\n - `NPM-{lang}your-name` if you are an NPM (or an NPM and a reconciler or an NPM and a translator)\n - `VER-{lang}-your-name` if you are a verifier\n</code></pre> <p>NOTE for testing: You can disregard the pattern above, whatever user name you nave is fine.</p> <p>When you create your token, pay attention to the following points:</p> <pre><code>- Make sure you select \"repo\" (and all its children) as scope\n- You're advised to select \"no expiry date\" (so that you don't need to do this again)\n- Please copy your token and keep it safe (but where you can find it whenever you need it)\n</code></pre> <ol> <li>Send your username to the cApStAn PM to be added to the PISA team and have access to your project. You will receive an invitation to collaborate on the Github repository, which you need to accept (either by email or on your Github profile).</li> </ol> <p>NOTE for testing: We might do this differently, e.g. create all usernames in a centralized way and then provide them to users rather than the other way round, but for testing, let's stick to this way. </p> <p>NOTE for testing: If you are <code>@vn342</code>or <code>@amathot</code>, you can disregard this step.</p> <ol> <li>You will receive a URL to your OmegaT project. Select it and copy it (e.g. with <code>Ctrl+C</code>).</li> </ol> <p>NOTE for testing: Use <code>https://github.com/capstanlqc/pisa25_trans_fr_omt.git</code> for testing the translation task and <code>https://github.com/capstanlqc/pisa25_verif_fr_omt.git</code>for testing the verification task. No testing for the reconciliation task is needed for the time being, as it is just a variation of the translation task.</p> <ol> <li> <p>In OmegaT, go to Project &gt; Download team project.</p> </li> <li> <p>Click inside the Repository URL field  and press <code>Ctrl+V</code> to paste the URL you have copied.</p> </li> <li> <p>Click inside the New Local Project Folder field. </p> </li> <li> <p>If it's the first time you download this project, you will be asked for authentication. Please enter your Github user name in the User field and your personal access token in the Password field, then press OK.</p> </li> <li> <p>Then, a local path will be proposed automatically in the New Local Project Folder field, where the last folder is the name of the project that will be created in your machine. You might need to replace the part of the path up to the last slash with the path to your <code>02_Projects</code> folder, e.g. <code>C:\\Users\\USER\\Work\\PISA2025\\02_Projects</code>. The final path should look like <code>C:\\Users\\USER\\Work\\PISA2025\\02_Projects\\&lt;PROJECT&gt;</code> (where <code>&lt;PROJECT&gt;</code> is the name of the project and everything else to the left of it is the path to your <code>02_Projects</code> folder).</p> </li> </ol> <p>If you have already downloaded a team project to your <code>02_Projects</code> folder for PISA 2025, then the proposed path to the local project folder might be already correct.</p> <p>NOTE for testing: This step is potentially challenging, suggestions welcome as to how to make the instruction clearer.</p> <ol> <li>Press OK . Your project will download and open in OmegaT.</li> </ol>"}, {"location": "tools/omegat/pisa25_omegat_teamproj_steps/#stopping-and-resuming-work", "title": "Stopping and resuming work", "text": "<p>When you want to stop working on your project, go to Project &gt; Close in OmegaT to close the project. </p> <p>NOTE: Please do not leave your project open for prolonged periods of absence from your computer.</p> <p>When you want to resume working on that project, go to Project &gt; Open Recent Project and select the project you want to open.</p> <p>NOTE: There's no need to download the project again if you have already done so once.</p>"}, {"location": "tools/omegat/pisa25_omegat_test01/", "title": "PISA 2025 OmegaT testing", "text": ""}, {"location": "tools/omegat/pisa25_omegat_test01/#test-1-download-a-new-omegat-project-translation", "title": "Test 1: download a new OmegaT project (translation)", "text": "<p>(Remember to put yourself in the shoes of a generic user, which could be a translator from a PISA participant, a verifier, etc.)</p> <p>The test should take 5-10 min. Please follow the steps:</p> <p>Steps:</p> <ol> <li>Create a new (hence, empty) folder in your machine. Call that folder <code>PISA_2025_fr-ZZ_Translation1_OMT</code>.  Below you can see some tips for file organization (that's not part of the test, but feel free to follow them and provide feedback if you like).</li> <li>Right-click here and then select Save Link As from the contextual menu (or Save Target As, depending on the browser) to download the OmegaT project file. </li> <li>Put this <code>omegat.project</code> file inside the folder you created in the previous step. That folder is now your OmegaT project.</li> <li>Run OmegaT (version 5.7.1 of course) and open the OmegaT project. </li> </ol>"}, {"location": "tools/omegat/pisa25_omegat_test01/#file-organization", "title": "File organization", "text": "<p>File organization on your end is very important for the successful execution of your work. Here come some recommendations for a tidy organization.</p> <ol> <li>Designate a working folder for the project in your machine (the project being PISA25 in this case), and use that same location for all related tasks. We would suggest a location at a very high level in the folder structure in your machine, e.g. one of the following</li> <li>On Windows: <code>C:\\Work\\CLIENT\\PROJECT</code> or <code>C:\\Users\\USER\\Work\\CLIENT\\PROJECT</code></li> <li> <p>On Mac/Linux: <code>/Users/USER/Work/CLIENT/PROJECT</code></p> </li> <li> <p>Inside the PROJECT's working folder above, create the following folder structure (or something similar that fits your purposes):</p> </li> </ol> <pre><code>    \u251c\u2500\u2500 00_Admin\n    \u251c\u2500\u2500 01_Instructions\n    \u251c\u2500\u2500 02_Tasks\n    \u2514\u2500\u2500 03_Whatever\n</code></pre> <p>Create your OmegaT project folders inside, say, <code>C:\\Users\\Manolo\\Work\\cApStAn\\TestingProj\\02_Tasks</code>. The final path to the OmegaT project folder should look like <code>C:\\Users\\USER\\Work\\CLIENT\\PROJECT\\02_Tasks\\OMT-PROJ-DIR</code>, where <code>OMT-PROJ-DIR</code> is (the name of) your local OmegaT project folder.</p>"}, {"location": "tools/omegat/plugins/", "title": "OMT Package Plugin", "text": ""}, {"location": "tools/omegat/plugins/#latest-version", "title": "Latest version", "text": "<p>https://github.com/briacp/plugin-omt-package/releases</p>"}, {"location": "tools/omegat/plugins/#how-to-create-an-omt-package-on-the-command-line", "title": "How to create an OMT package on the command line", "text": "<p>You can now create an OMT package without opening OmegaT.</p> <p>On a Linux terminal (in Windows): </p> <pre><code>java -cp /mnt/c/Program\\ Files/OmegaT/OmegaT.jar:/mnt/c/Users/&lt;USER&gt;/AppData/Roaming/OmegaT/plugins/plugin-omt-package-&lt;version&gt;.jar net.briac.omegat.plugin.omt.ManageOMTPackage &lt;XXX_OmtPrj&gt; &lt;XXX_OmtPrj&gt;.omt\n</code></pre> <p>Update the user config path accordingly (i.e. replacing <code>&lt;USER&gt;</code> with your actual username). </p> <p>On Windows CMD (notice the different classpath separator <code>;</code>, not <code>:</code>): </p> <pre><code>java -cp \"C:\\Program Files\\OmegaT\\OmegaT.jar;C:\\Users\\&lt;USER&gt;\\AppData\\Roaming\\OmegaT\\plugins\\plugin-omt-package-&lt;version&gt;.jar\" net.briac.omegat.plugin.omt.ManageOMTPackage &lt;XXX_OmtPrj&gt; &lt;XXX_OmtPrj&gt;.omt\n</code></pre> <p>This allows you to batch process a number of projects:</p> <pre><code>for proj in `ls -d *_OmtPrj`; do java -cp /mnt/c/Program\\ Files/OmegaT/OmegaT.jar:/mnt/c/Users/&lt;USER&gt;/AppData/Roaming/OmegaT/plugins/plugin-omt-package-&lt;version&gt;.jar net.briac.omegat.plugin.omt.ManageOMTPackage $proj $proj.omt; done\n</code></pre>"}, {"location": "tools/omegat/plugins/#options", "title": "Options", "text": "<p>Note: the plugin can be configured by means of file <code>&lt;config_dir&gt;/omt-package-config.properties</code>. Example below:</p> <pre><code>#\n# OmegaT Plugin - OMT Package Manager\n#\n#    omt-package-config.properties\n#\n# List of regex pattern (separated by \";\") of files to exclude when\n# generating an OMT package. (default: \"\\\\.(zip|bak|omt)$\")\nexclude-pattern=\\.(zip|bak|omt|DOCX?|docx?)$;pseudoxlat;\\.(utf8|tmx)\\.2019;/?~\n# The \"\\\\\" is needed because JAva needs the \"\\\" to be escaped.\n# The \"/?\" is to exclude files begining with ? (the /? is to make sure we catch the beginning of the filename)\n# If set to true, the folder containing the exported OMT will be\n# displayed. (default: false)\nopen-directory-after-export=true\n# If set to true, the translated documents will be created before\n# creating the package. (default: false)\ngenerate-target-files=false\n# If set to true, a dialog asking the user if they want to delete the\n# imported OMT package will appear at the end of the importation.\n# (default: false)\nprompt-remove-omt-after-import=true\n# If this property is set, the script located in the OmegaT scripts\n# folder will be executed. The OMT package file is available in the\n# binding \"omtPackageFile\". The console output is done in OmegaT\n# logfile, not in the scripting window.\n#post-package-script=processOmtPackage.groovy\n</code></pre>"}, {"location": "tools/omegat/plugins/#help", "title": "Help", "text": "<p>Run line: </p> <pre><code>java -cp /mnt/c/Program\\ Files/OmegaT/OmegaT.jar:/mnt/c/Users/&lt;USER&gt;/AppData/Roaming/OmegaT/plugins/plugin-omt-package-&lt;version&gt;.jar net.briac.omegat.plugin.omt.ManageOMTPackage --help\n</code></pre> <p>to get the following message: </p> <pre><code>usage: ManageOMTPackage [options] omegat-project-directory [omt-package-file]\n -c,--config &lt;property-file&gt;   use given file for configuration (default: /home/&lt;USER&gt;/.omegat/omt-package-config.properties)\n -h,--help                     print this message\n -q,--quiet                    be extra quiet\n -v,--verbose                  be extra verbose\n</code></pre>"}, {"location": "tools/omegat/recency/", "title": "Recency-based auto-population", "text": ""}, {"location": "tools/omegat/recency/#title", "title": "Title", "text": "<p>Recency-based auto-population, or matches from /tm/update folder overwrite if more recent.</p>"}, {"location": "tools/omegat/recency/#summary", "title": "Summary", "text": "<p>For each segment, OmegaT will find the most recent exact match in<code>/tm/update</code>, and it will compare its timestamp with the timestamp of the existing translation in the current segment and keep the translation that has the most recent timestamp: </p> <ul> <li>If the match in <code>/tm/update</code> is more recent, then the current translation in the project will be ovewritten with it. </li> <li>If the the current transaltion is more recent than the match in <code>/tm/update</code>, then nothing changes.</li> </ul> <p>Info</p> <p>A translation's timestamp in this ticket referes to the <code>changedate</code> property if it exits, otherwise the <code>creationdate</code> property. If the entry has none of those two properties, then that translation will be considered as older than any other that does have a timestamp. </p> <p>In other words, <code>tm/update</code> provides a behaviour between <code>tm/auto</code> and <code>tm/enforce</code>: while the former never overwrittes an existing translation and the second always overwrites, an exact match from <code>tm/update</code> would overwrite if it is more recent than the existing translation.</p> <p>If the segment is untranslated, then an exact match from <code>/tm/update</code> simply auto-populates the segment (just like in the other two auto-population cases).</p> <p>Just as is the case with matches from <code>/tm/auto</code>, matches coming from <code>/tm/update</code> should be editable.</p> <p>Warning</p> <p>From the above it can be inferred that the behaviour of matches from <code>/tm/update</code> and matches from <code>/tm/auto</code> are alike in most cases but not always. In particular, if there's an alternative translation in the project and an alternative translation in <code>/tm/auto</code>, the latter overwrites the former by default -- however the behaviour of a match from <code>/tm/update</code> should be different in this case: the newer alternative translation in the project should be prevail over the older alternative in <code>/tm/update</code>.</p>"}, {"location": "tools/omegat/recency/#metadata-properties", "title": "Metadata properties", "text": "<p>When OmegaT finds a (more recent) translation in a TMX file under /tm/update and uses that as the translation of a segment, it also adds an origin property <code>&lt;prop type=\"x-auto\"&gt;update&lt;/prop&gt;</code> (or <code>&lt;prop type=\"x-update\"&gt;update&lt;/prop&gt;</code>, whatever is appropriate) as a child node of the entry\u2019s <code>&lt;tu&gt;</code> node.</p> <p>A background color can be then assigned to translations with that property.</p> <p>Also, if a match from <code>/tm/update</code> is selected and use, not only the translation is registered in the working TM, but also the metadata properties (<code>changeid</code> and <code>changedate</code>). </p> <p>For example, assuming this is the current translation in the working TM (<code>omegat/project_save.tmx</code>):</p> <pre><code>&lt;tu&gt;\n&lt;tuv lang=\"en\"&gt;\n&lt;seg&gt;foo&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;tuv lang=\"es-ES\" changeid=\"souto\" changedate=\"20201111T000000Z\" creationid=\"souto\" creationdate=\"20201111T000000Z\"&gt;\n&lt;seg&gt;bar&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;/tu&gt;\n</code></pre> <p>If a TMX file is added to <code>/tm/update</code> containing the following entry:</p> <pre><code>&lt;tu&gt;\n&lt;tuv lang=\"en\"&gt;\n&lt;seg&gt;foo&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;tuv lang=\"es-ES\" changeid=\"fulano\" changedate=\"20232323T123456Z\"\ncreationid=\"fulano\" creationdate=\"20232323T123456Z\"&gt;\n&lt;seg&gt;QUX&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;/tu&gt;\n</code></pre> <p>Then the current translation changes to (see selected row) the following in the working TM:</p> <pre><code>&lt;tu&gt;\n&lt;prop type=\"x-auto\"&gt;update&lt;/prop&gt;\n&lt;tuv lang=\"en\"&gt;\n&lt;seg&gt;foo&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;tuv lang=\"es-ES\" changeid=\"fulano\" changedate=\"20232323T123456Z\" creationid=\"souto\" creationdate=\"20201111T000000Z\"&gt;\n&lt;seg&gt;QUX&lt;/seg&gt;\n&lt;/tuv&gt;\n&lt;/tu&gt;\n</code></pre>"}, {"location": "tools/omegat/recency/#interaction-with-match-sorting-criteria", "title": "Interaction with match sorting criteria", "text": "<p>This feature adds the notion of \"recency\" to the match sorting criteria (summarized here). At this point those criteria are: similarity score, auto-population precedence, context binding, position of the file in the list of files and position of the match in the file.</p> <p>Let's consider how recency interacts with each: </p>"}, {"location": "tools/omegat/recency/#similarity-score", "title": "Similarity score", "text": "<p>Recency will only be considered for exact matches (100% score).</p>"}, {"location": "tools/omegat/recency/#auto-population-precedence", "title": "Auto-population precedence", "text": "<p>OmegaT needs to decide when a match from <code>/tm/update</code> must be selected and used over a match from <code>/tm/auto</code> and <code>/tm/enforce</code> and when not. </p> <p>When comparing two default translations (with no context binding properties) or two alternative translations (that that have the same context binding properties), in other words, when context binding do not discriminate between the two:</p> <ul> <li>If the same identical match is found in both <code>/tm/update</code> and <code>/tm/enforce</code>, the latter prevails regardless of timestamps, and the translation will be locked as expected.</li> <li>If the same identical match is found in both <code>/tm/update</code> and <code>/tm/auto</code>, simply the most recent one prevails.</li> </ul> <p>In cases when one match has context binding and the other doesnt:</p> <ul> <li>An alternative translation from <code>tm/update</code> will prevail over a default match from <code>tm/enforce</code> or <code>tm/auto</code>, regardless of timestamps.</li> <li>An alternative translation from <code>tm/enforce</code> or <code>tm/auto</code> will prevail over a default match from <code>tm/update</code>, regardless of timestamps.</li> </ul> <p>See the next subsection for more details.</p>"}, {"location": "tools/omegat/recency/#context-binding", "title": "Context binding", "text": "<p>Context binding will always have more weight than recency, i.e. an alternative translation should always prevail over a default translation, regardless of timestamps</p> <p>Recency can determine selection when comparing two translations with context binding or two translations without context binding, i.e. a newer alternative translation will prevail over an older alternative translation, and a newer default translation will prevail over an older default translation.</p> <p>In other words:</p> <ul> <li>new translation with context &gt; old translation without context</li> <li>old translation with context &gt; new translation without context</li> <li>new translation with context &gt; old translation with context</li> </ul> <p>The following examples show how context biding always wins (timestamps can be ignored if one translation is alternative and the other one is default) and how the most recent translation wins when context binding (or lack of it) is equal in both translations being compared:</p> <ul> <li>A. alternative in project &gt; default in <code>/tm/update</code> (timestamps are ignored)</li> <li>B. default in project &lt; alternative in <code>/tm/update</code> (timestamps are ignored)</li> <li>C. alternative in project &lt; alternative in <code>/tm/update</code> (the most recent wins)</li> <li>D. default in project &lt; default in <code>/tm/update</code> (the most recent wins)</li> </ul> <p>Note</p> <p>The <code>&gt;</code> symbol above means that the one to the left has more weight and \"wins\", and vice versa for <code>&lt;</code>.</p> <p>The table below shows all the possible combinations:</p> # Project /tm/update Results Reason 1 def-old def-new UPDATE the match is newer 2 def-old alt-new UPDATE the match is newer and is context-bound 3 alt-old def-new the translation is context-bound, even if it's older 4 alt-old alt-new UPDATE the match is newer 5 def-new def-old the match is not newer 6 def-new alt-old UPDATE the match is context-bound, even\u00a0if it's older 7 alt-new def-old the translation is context-bound and newer 8 alt-new alt-old the translation is context-bound and newer <p>Note</p> <p>An option in the user preferences / project settings could be used to toggle the preference given to context binding over recency, e.g. <code>&lt;content_binding_beats_recency&gt;false&lt;/content_binding_beats_recency&gt;</code> (true by default).</p>"}, {"location": "tools/omegat/recency/#position-of-the-file-in-the-list-of-files", "title": "Position of the file in the list of files", "text": "<p>A more recent match from <code>tm/update</code> will always prevail over other older matches that are ranked higher according to the file sorting logic (descending alphabetical order).</p>"}, {"location": "tools/omegat/recency/#position-of-the-match-in-the-file", "title": "Position of the match in the file", "text": "<p>A more recent match from <code>tm/update</code> will always prevail over other older matches that are ranked higher according to their position inside the TMX file (closer to the top).</p>"}, {"location": "tools/omegat/recency/#match-sorting", "title": "Match sorting", "text": "<p>To keep things simpler, recency will be used only to select and use a match from <code>/tm/update</code>, not to re-arrange match sorting in the Matches pane according to recency together with the other match sorting criteria.  </p> <p>This goes against the current logic of match sorting and selection (see below), but the feature is really about which translation is used and not so much about in which position it appears in the set of matches.</p> <p>Info</p> <p>Match sorting and selection: there are certain criteria to rank/sort matches (and display them in the Matches pane), and the one that is selected to auto-populate the segment, if possible, is simply the one at the top. </p>"}, {"location": "tools/omegat/recency/#proof-of-concept", "title": "Proof of concept", "text": "<p>This script provides the intended behaviour (looking for more recent translations in <code>tm/auto</code>) and has been tested in production for several months. </p> <p>That script does have, however, some issues that should be addressed in the built-in feature (e.g. using <code>ImportFomAutoTMX</code>, which keeps matches' <code>changeid</code> and <code>changedate</code>, etc.):</p> <ul> <li>the pre-populated translation carried over from <code>tm/auto</code> will get the current user's info (changeid and changedate) rather than keep the info it originally has in the TM</li> <li>it only handles default translations (alternative translations from <code>tm/auto</code> will always be used regardless of timestamp)</li> <li>the conflict resolution dialog might pop if the active segment has a transation that is older than a match coming from the TM</li> </ul>"}, {"location": "tools/omegat/scripts/", "title": "! Scripts", "text": ""}, {"location": "tools/omegat/scripts/#triggered-by-launching-omegat", "title": "Triggered by launching OmegaT", "text": ""}, {"location": "tools/omegat/scripts/#triggered-by-a-project-event", "title": "Triggered by a project event", "text": ""}, {"location": "tools/omegat/scripts/#run-manually", "title": "Run manually", "text": ""}, {"location": "tools/omegat/scripts/#adapt-standard-tags", "title": "Adapt standard tags", "text": "<p>This script does..</p> <p>To use it, do ...</p>"}, {"location": "tools/omegat/scripts/#etc", "title": "etc.", "text": "<p>utils_report_auto.groovy (Kos)</p>"}, {"location": "tools/omegat/ta_notes/", "title": "T&amp;A notes in OmegaT [Comments pane]", "text": "<p>This document lists the steps you must take to create and use T&amp;A notes directly in OmegaT.</p>"}, {"location": "tools/omegat/ta_notes/#installation", "title": "Installation", "text": "<p>This functionality is enabled by a new plugin that is not included yet in our customized setup. Please proceed as follows:</p> <ol> <li>Click this link to download the plugin file, namely file <code>TmxCommentsProvider.jar</code>.</li> <li>Go to Options &gt; Access Configuration Folder in OmegaT to open your config folder, then open the <code>plugins</code> folder.</li> <li>Move the plugin file to the <code>plugins</code> folder.</li> <li>Restart OmegaT if it was running.</li> </ol>"}, {"location": "tools/omegat/ta_notes/#creating-ta-notes", "title": "Creating T&amp;A notes", "text": "<p>Steps for the PM:</p> <ol> <li>Open the OmegaT project for which you want to create T&amp;A notes</li> <li>Make sure there are no translations in the project, all segments should be untranslated. </li> <li>For every segment you want to create a T&amp;A note, enter the notes as the translation of the segment.</li> <li>When you're done with all segments, press Ctrl+D to export the master TMs of the project (of the three that get created, you'll need the one with the <code>-omegat.tmx</code> suffix). </li> <li>Rename the master TM as you like (say: <code>PROJECT-omegat.tmx</code> -&gt; <code>ta_note.tmx</code>).</li> <li>Go to Project &gt; Access Project Contents to open the project folder.</li> <li>Create a new folder called <code>notes</code>.</li> <li>Move the <code>ta_notes.tmx</code> filed to the <code>notes</code> folder of the project (or ask TT to add it to the project for all versions)</li> </ol> <p>If the project contains translations, you may remove them with script Flush Working TM. If any translations are coming from the <code>/tm/auto</code> or <code>/tm/enforce</code> folders, delete those folders or the TMX files inside them.</p>"}, {"location": "tools/omegat/ta_notes/#using-the-ta-notes", "title": "Using the T&amp;A notes", "text": "<p>Steps for the user: </p> <ol> <li>Before translating or revising/verifying each segment, read the T&amp;A note in the Comments pane. </li> </ol>"}, {"location": "tools/omegat/ta_notes/#video-demo", "title": "Video demo", "text": ""}, {"location": "tools/omegat/team_projects/", "title": "Team projects with Github", "text": "<p>@todo: compare with https://github.com/capstanlqc/i18n-guide/blob/main/omegat/team_projects.md and merge</p> <p>This tutorial describes the necessary steps to create a Github repository non-interactively. </p> <p>The use case is for an organization that must fully automate the whole process and needs to create team projects for one or more languages. </p> <p>The intended audience is localization engineers and technically oriented PMs. You have one of those two roles. </p> <p>In this tutorial, \"project\" refers to an OmegaT project, which is a folder containing at least the <code>omegat.project</code> file. </p>"}, {"location": "tools/omegat/team_projects/#1-preconditions", "title": "1 Preconditions", "text": "<p>A number of preconditions are necessary to carry out the steps below.</p>"}, {"location": "tools/omegat/team_projects/#11-for-translators", "title": "1.1 For translators", "text": "<p>The members of your translation team must have a Github account and a personal access token. </p>"}, {"location": "tools/omegat/team_projects/#12-for-the-project-manager", "title": "1.2 For the project manager", "text": "<p>Before creating the team projects, you must have:</p> <ul> <li>installed gh on the command line</li> <li>created an organization in Github -- already done: https://github.com/capstanlqc/</li> </ul> <ul> <li>added your translators as members of the organization</li> <li>set the organization's base permissions to give members writing privileges</li> </ul>"}, {"location": "tools/omegat/team_projects/#2-managing-the-team-project", "title": "2 Managing the team project", "text": "<p>The following commands can be run in either git bash, Windows WSL or bash on real GNU/Linux. Upper cased names are used as placeholders for the actual repository, organization, team, etc.</p>"}, {"location": "tools/omegat/team_projects/#21-authentication", "title": "2.1 Authentication", "text": "<p>To execute the steps below through SSH, the project manager must be authenticated. The following commands (followed by your passphrase) can be run once to avoid having to type the passphrase every time a repo is created:</p> <pre><code>$ eval `ssh-agent -s`\n$ ssh-add ~/.ssh/*_rsa\nEnter passphrase for /home/USER/.ssh/id_rsa:\nIdentity added: /home/USER/.ssh/id_rsa (/home/USER/.ssh/id_rsa)\n</code></pre> <p>It will ask for the passphrase in the second command, and that's it. You only need to do this once per session.</p>"}, {"location": "tools/omegat/team_projects/#22-creating-the-repository", "title": "2.2 Creating the repository", "text": "<p>Navigate to the parent folder where you would like to create the OmegaT folder that you want to push to the repository. There, run the following command: </p> <pre><code>$ yes no | gh repo create ORG/REPO --confirm --private --clone --team TEAM\n</code></pre> <p>The basic command is <code>gh repo create REPO</code>. The rest of arguments are optional:</p> <ul> <li><code>--confirm</code> (or <code>-y</code> for short) skips the confirmation prompt</li> <li><code>--private</code> makes the new repository private (alternatively, you can use <code>--public</code> if privacy is not required)</li> <li><code>--clone</code> creates a local copy of the repository folder</li> <li><code>--team TEAM</code> points to the organization team that will be granted access to the repo</li> <li><code>yes no |</code> answers \"No\" to any further prompts, such as whether you'd like to add a .gitignore or a license</li> </ul> <p>The expected output of that command is:</p> <pre><code>\u2713 Created repository ORG/REPO on GitHub\nInitialized empty Git repository in /home/USER/path/to/parentdir/REPO/.git/\n\u2713 Initialized repository in \"REPO\"\n</code></pre> <p>You can see these and other options with <code>gh repo create --help</code>.</p>"}, {"location": "tools/omegat/team_projects/#23-initializing-the-omegat-project", "title": "2.3 Initializing the OmegaT project", "text": "<p>After creating the repository, the next step is to initialize the OmegaT project. You may do so from inside the project folder with the following command (to create a <code>en-gl</code> project):</p> <pre><code>cd REPO\njava -jar OmegaT.jar team init en gl\n</code></pre> <p>That creates  a barebones project folder structure:</p> <pre><code>souto@ameijoa:REPO$ tree\n.\n\u251c\u2500\u2500 dictionary\n\u251c\u2500\u2500 glossary\n\u2502   \u2514\u2500\u2500 glossary.txt\n\u251c\u2500\u2500 omegat\n\u2502   \u2514\u2500\u2500 project_save.tmx\n\u251c\u2500\u2500 omegat.project\n\u251c\u2500\u2500 source\n\u251c\u2500\u2500 target\n\u2514\u2500\u2500 tm\n</code></pre> <p>Finally, add source files, config files, language assets (TMs, glossaries, etc.) as needed.</p>"}, {"location": "tools/omegat/team_projects/#24-pushing-the-omegat-project-to-the-repository", "title": "2.4 Pushing the OmegaT project to the repository", "text": "<p>The project is ready to be pushed to the remote repository. From inside the project folder, do:</p> <pre><code>$ git add .\n$ git commit -m \"Initial commit -- uploading project files\"\n$ git push --set-upstream origin master\n</code></pre> <p>Example output:</p> <pre><code>  Enumerating objects: 82, done.\n  Counting objects: 100% (82/82), done.\n  Delta compression using up to 8 threads\n  Compressing objects: 100% (79/79), done.\n  Writing objects: 100% (82/82), 308.64 KiB | 750.00 KiB/s, done.\n  Total 82 (delta 28), reused 0 (delta 0)\n  remote: Resolving deltas: 100% (28/28), done.\n  To github.com:ORG/REPO.git\n\n   * [new branch]      master -&gt; master\n   Branch 'master' set up to track remote branch 'master' from 'origin'.\n</code></pre>"}, {"location": "tools/omegat/team_projects/#25-sharing-the-team-project-with-your-translators", "title": "2.5 Sharing the team project with your translator(s)", "text": "<p>So as to download the team project on their side, your translator(s) need to know the URL of the team project. The URL is predictable: <code>https://github.com/ORG/REPO.git</code>. </p> <p>If you would like to confirm it and you use the HTTPS protocol, you can get the URL with the command:</p> <pre><code>git config --get remote.origin.url\n</code></pre> <p>If you use the SSH protocol, you can get the URL like so:</p> <pre><code>git config --get remote.origin.url | sed -e 's/:/\\//g'| sed -e 's/ssh\\/\\/\\///g'| sed -e 's/git@/https:\\/\\//g'\n</code></pre>"}, {"location": "tools/omegat/team_projects/#26-harvesting-the-translations", "title": "2.6 Harvesting the translations", "text": "<p>To obtain the translated documents in the target language, you have two options: you may ask your translator to generate the target files (e.g. <code>Ctrl+D</code>) and commit them to the remote repository (i.e. Project &gt; Commit Target Files).</p> <p>Alternatively, you may simply pull all translations from the repository to a local copy of the project in your machine (outside the git checkout folder) and generate the target files there. Running OmegaT on the project in console mode should do the trick:</p> <pre><code>java -jar /path/to/OmegaT.jar /path/to/proj --mode=console-translate\n</code></pre>"}, {"location": "tools/omegat/team_projects/#27-multilingual-projects", "title": "2.7 Multilingual projects", "text": "<p>If you are managing a multilingual project, where translations need to be produced in several target languages, you may do the steps above for each of them. It's easy to automate that with a script, here's a suggestion in pseudo-code, for which you need a list of all the target language tags (and assuming the source language is constant and already defined in the template).</p> <ul> <li>For each tag in the list of language tags:</li> <li>create repo with language tag in its name, e.g. <code>REPO_gl</code></li> <li>initialize the project</li> <li>add source files, language assets, config files, etc.</li> <li>add, commit and push files to the remote repository</li> <li>add URL to a list that you can then publish or share with your translators</li> </ul> <p>Your translators can then start working.</p> <p>When the time to harvest the translations comes, you can do a similar iteration to compile and collect the target documents.</p> <ul> <li>For each project/repo folder <code>$proj</code>:</li> <li>change directory to that folder</li> <li>pull contents from the repo (check <code>git pull --help</code> for details)</li> <li>change directory to the parent folder</li> <li>generate the target files (e.g. <code>java -jar /path/to/OmegaT.jar $proj --mode=console-translate</code>)</li> <li>put the target files in the deliverable bundle or folder you will submit to the client</li> </ul>"}, {"location": "tools/omegat/team_projects/#28-different-language-tasks", "title": "2.8 Different language tasks", "text": "<p>Your project might have different levels of intervention (translation, revision, review, etc.), so that different linguists or users must work on it. You must add all those users as team members to your organization <code>ORG</code>. </p> <p>If you want a reviser not to be able to start until the translator is done, in that case you must make sure that your reviser does not have access to the repository until the translator has finalize the translation task. Likewise, you might want to revoke the translator's access to the project once the reviser has started revising. </p> <p>@PENDING: How to grand and revoke access to the REPO or to the ORG using <code>gh</code> in the command line?</p>"}, {"location": "tools/omegat/team_projects/#3-repository-mappings", "title": "3 Repository mappings", "text": "<p>Instead of including all files in the OmegaT project that you commit to the repo, you can have a distributed organization of your project(s) with files stored in different locations. That has the advantage of making your commit for every language in a multilingual project much lighter.</p> <p>You must commit at least the project settings (i.e. <code>omegat.project</code>) file for each project, but OmegaT can fetch everything else from elsewhere, through links included in the repository mapping section of the project settings file. For example, OmegaT could fetch the source files from a common repository, language assets from another repo, etc. </p> <p>If the files are hosted in a versioning repository (e.g. github, gitlab, etc.), you can either map files or folders. If your files are hosted in a normal server, only files can be mapped.</p> <p>For example, given a remote repository that contains the following files:</p> <pre><code>.\n\u251c\u2500\u2500 proj_conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 segmentation.conf\n\u2514\u2500\u2500 source\n\u2514\u2500\u2500 final\n\u251c\u2500\u2500 file1.docx\n\u2514\u2500\u2500 file2.docx\n</code></pre> <p>the following mapping will fetch all files from the remote folder <code>source/final</code> and put them in the <code>source</code> folder of the local project. Also, it will fetch remote file <code>proj_conf/segmentation.conf</code> and put it in the <code>omegat</code> folder of the local project.</p> <pre><code>&lt;repository type=\"git\" url=\"https://github.com/ORG/REPO_source.git\"&gt;\n&lt;mapping local=\"source/\" repository=\"source/final\"/&gt;\n&lt;mapping local=\"omegat/segmentation.conf\" repository=\"proj_conf/segmentation.conf\"/&gt;\n&lt;/repository&gt;\n</code></pre> <p>You may also fetch a subset of the files in a remote folder by explicitly including only the ones that a certain pattern matches, e.g. matching the target language of the project. The following example fetches any existing TMX files for a project with <code>gl</code> (Galician) as target language from a remote location that contains TMs for all languages. Notice that all files need to be excluded first.</p> <pre><code>&lt;repository type=\"git\" url=\"https://github.com/ORG/REPO_assets.git\"&gt;\n&lt;mapping local=\"/tm\" repository=\"/\"/&gt;\n&lt;excludes&gt;**/*&lt;/excludes&gt;\n&lt;includes&gt;*gl*.tmx&lt;/includes&gt;\n&lt;/repository&gt;\n</code></pre> <p>You might map several folders from the same repository, which in the case of TMs allows to use different levels of validation (e.g. enforced, auto-populated, penalties, etc.). The following examples map TMs named as per year 2021 from the remote root folder to the <code>/tm/auto</code> folder of the project and TMs named as per year 2018 from the <code>penalty-02</code> remote folder to the <code>/tm/penalty-02</code> folder of the project.</p> <pre><code>&lt;repository type=\"git\" url=\"https://github.com/ORG/REPO_assets.git\"&gt;\n&lt;mapping local=\"/tm/auto\" repository=\"/\"/&gt;\n&lt;excludes&gt;**/*&lt;/excludes&gt;\n&lt;includes&gt;*2021*gl*.tmx&lt;/includes&gt;\n&lt;mapping local=\"/tm/penalty-02\" repository=\"/penalty-02\"/&gt;\n&lt;excludes&gt;**/*&lt;/excludes&gt;\n&lt;includes&gt;*2019*gl*.tmx&lt;/includes&gt;\n&lt;/repository&gt;\n</code></pre> <p>It is also recommended to add the map the main repository itself (where the <code>omegat.project</code> file is hosted).</p> <pre><code>&lt;repository type=\"git\" url=\"https://github.com/ORG/REPO_gl.git\"&gt;\n&lt;mapping local=\"/\" repository=\"/\"/&gt;\n&lt;/repository&gt;\n</code></pre> <p>All the above examples would be children of the  <code>&lt;repositories&gt;</code> node in the project settings. The same principle would apply to other files to be added to the project (e.g. glossaries). </p> <p>@PENDING: How to create the entire project folder structure on the command line (as the GUI does when downloading the project) from a repo that only contains the <code>omegat.project</code>?</p> <p>@TODO: batch add list of members to a specific team (so far, the team is \"omegat\"), so that it's easier to group and manage repos online // alternatively, use a cli command to find a list of projects by name or regex</p> <p>@TODO: explore github actions: https://lo-victoria.com/series/github-actions</p>"}, {"location": "tools/omegat/team_projects_trblsht/", "title": "Team project troubleshooting", "text": ""}, {"location": "tools/omegat/team_projects_trblsht/#restoring-translations", "title": "Restoring translations", "text": "<p>Have a look at the log to identify which commit deleted translations:</p> <pre><code>git log --stat\n</code></pre> <p>Then, copy the commit hash of the previous commit, e.g. <code>03d9f5e</code>, and do:</p> <pre><code>git checkout 03d9f5e\ncp omegat/project_save.tmx ../03d9f5e.tmx\ngit checkout main\nmkdir tm/auto/restored\nmv ../03d9f5e.tmx tm/auto/restored \ngit pull &amp;&amp; git add . &amp;&amp; git commit -m \"Restored translations\" &amp;&amp; git push\n</code></pre>"}, {"location": "tools/omegat/win64-jre-signed-build/", "title": "Creating a signed OmegaT installer", "text": "", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#getting-started", "title": "Getting started", "text": "<p>The following working environment is recommended:</p> <ol> <li> <p>A Linux machine (recommended Debian-based) that runs <code>systemctl</code>.</p> <p>A virtual machine or WSL could be a valid substitute. This guide is based on building on MX\u00a0Linux (Linux 5.10.0-22-amd64) and <code>apt</code> is used for package installation commands.</p> </li> <li> <p>Install dependencies:     <pre><code>$ sudo apt install libxrender1 libxtst6 libxi6 libfreetype6 fontconfig \\\ngnutls-bin p11tool software-properties-common softhsm2 \\\nlibengine-pkcs11-openssl osslsigncode icedtea-netx pcsclite pcsc-tools \\\npcscd procertum-cardreader gh\n</code></pre></p> </li> <li> <p>Install docker:     <pre><code>$ sudo apt install docker\n</code></pre></p> </li> <li>Adjust the group membership of your user, so that you can run docker images:     <pre><code>$ sudo groupadd docker\n$ sudo usermod -aG docker $USER # or: sudo groupadd docker\n</code></pre></li> <li>Restart or log out.</li> </ol>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#before-building", "title": "Before building", "text": "", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#setting-up-docker", "title": "Setting up docker", "text": "<p>Follow these steps: </p> <ol> <li>Make sure that <code>docker</code> is in your groups:     <pre><code>$ groups\nsys wheel rfkill autologin souto foo bar docker\n</code></pre></li> <li>Start docker:     <pre><code>$ systemctl start docker\n</code></pre></li> <li>Check if <code>docker</code> works:     <pre><code>$ docker run hello-world\n</code></pre></li> <li>Create a folder for the building process:     <pre><code>$ mkdir -p /path/to/omegat-installer\n</code></pre></li> </ol>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#setting-up-java-and-gradle", "title": "Setting up Java and Gradle", "text": "<p>There are other ways to do this, what follows is just our recommended approach.</p> <ol> <li>Install sdkman (as explained here):     <pre><code>$ curl -s \"https://get.sdkman.io\" | bash\n$ source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n</code></pre></li> <li>Select the Java version that you need, i.e. <code>17.0.4-tem</code> (recommended: make it your default version)     <pre><code>$ sdk use java 17.0.4-tem\n</code></pre></li> <li>Confirm that you have the expected java version:     <pre><code>$ java -version\nopenjdk version \"11.0.19\" 2023-04-18\nOpenJDK Runtime Environment Temurin-11.0.19+7 (build 11.0.19+7)\nOpenJDK 64-Bit Server VM Temurin-11.0.19+7 (build 11.0.19+7, mixed mode)\n</code></pre></li> <li>Download the zipped JRE bundle for the same version (file called <code>OpenJDK11U-jre_x64_windows_hotspot_11.0.19_7.zip</code>) from https://adoptium.net/ for the following criteria:<ul> <li>Operating system: Windows</li> <li>Architecture: x64</li> <li>Package type: JRE</li> <li>Version: 11 - LTS</li> </ul> </li> <li>Move the zipped JRE bundle to your building folder:     <pre><code>$ mv ~/Downloads/OpenJDK11U-jre_x64_windows_hotspot_11.0.19_7.zip /path/to/omegat-installer/\n</code></pre></li> </ol>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#activating-the-certificate", "title": "Activating the certificate", "text": "<p>The steps in this section only need to be done once. If that has already been done and you already have a valid binary file of the certificate (the file with <code>.cer</code> extension) which hasn't expired, you can skip to the next section.</p> <p>Using Certum certificate, go through the procedure to activate the certificate. Through that process, you will have to define a PIN number for the common profile that is used to access the Certum's cryptographic smart card.</p> <p>You'll have to run two tools for that: </p> <ul> <li>the SmartCard Reader (which you have already installed as a dependency)     <pre><code>$ cd /opt/proCertumCardManager\n$ proCertumCardManager\n</code></pre></li> <li>and a Crypto tool (which the Certum page will ask you download):     <pre><code>$ javaws CertumCryptoAgent_en.jnlp\n</code></pre> At the end of the process when the certificate is activated and available for download, download the binary certificate (with a <code>.cer</code> extension) from the Certum page.</li> </ul>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#windows-installation-wizard", "title": "Windows installation wizard", "text": "<p>A few tweaks were done in the innosetup file to customize the installation wizard on Windows machines. </p> <p>These changes are permanent and don't need to be applied again (this section is just for the record).</p> <ul> <li> <p>OmegaT is set to install in English in all cases (user can only choose the setup language)</p> </li> <li> <p>It has the Create Desktop icon option turned on by default</p> </li> <li> <p>Changed location where desktop shortcut icon must be created (so that it's instsalled for the current user only)</p> </li> <li> <p>Removed the need for elevated permissions to install</p> </li> </ul> <p>One important implication is that the installation path has been modified to use <code>C:\\Users\\USER\\AppData\\Local\\Programs\\OmegaT\\OmegaT.exe</code> by default.</p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#getting-down-to-building", "title": "Getting down to building", "text": "<p>Ok, let's build the installer.</p> <ol> <li>Move the certificate file to your building folder :      <pre><code>$ mkdir /path/to/omegat-installer/cert/\n$ mv ~/Downloads/be737b17c8d3f3f0d7bbfae716b0ee1a.cer /path/to/omegat-installer/cert/\n</code></pre></li> <li>Change directory to your building folder:      <pre><code>$ cd /path/to/omegat-installer/\n</code></pre></li> <li>Clone the OmegaT source code repository:     <pre><code>$ gh repo clone capstanlqc/omegat\n</code></pre></li> <li>Change directory to the <code>omegat</code> folder:     <pre><code>$ cd omegat\n</code></pre></li> <li>Check out the <code>main-capstan</code> branch:     <pre><code>$ git checkout main-capstan\n</code></pre></li> <li>Create your <code>local.properties</code> file:     <pre><code>$ cp local.properties.example local.properties\n</code></pre></li> <li> <p>Add your certificate details to the <code>local.properties</code> file:     <pre><code>pkcs11module=/usr/lib64/crypto3PKCS/sc30pkcs11-3.0.6.68-MS.so\nwinCodesignPassword=**** # your PIN number\nwinCodesignCert=/path/to/omegat-installer/cert/be737b17c8d3f3f0d7bbfae716b0ee1a.cer\n</code></pre> Defining <code>pkcs11cert</code> and <code>winCodesignTimestampUrl</code> is not necessary.</p> </li> <li> <p>Kindly ask Gradle to build OmegaT from source and bundle it with the JRE you downloaded into a Windows setup package:     <pre><code>$ ./gradlew winJRE64Signed\n</code></pre></p> <p>The above command would be <code>./gradlew winJRE64</code> without code signing.</p> </li> </ol> <p>The above command would be <code>./gradlew macDistZip</code> to create a mac installer (see short howto) </p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#result", "title": "Result", "text": "<p>If the process works, the installer will be saved in folder <code>./build/distributions</code>, e.g.     <pre><code>$ cd /path/to/omegat-installer/omegat\n$ find . -name \"*.exe\"\n./build/distributions/OmegaT_5.7.3_Windows_64_Signed.exe\n</code></pre></p>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#signing-the-executable-on-windows-alternative-approach", "title": "Signing the executable on Windows (alternative approach)", "text": "<p>If for any reason the signing could not be done during building, it's also possible to sign the Windows executable after creating it. In that case, you could skip section Activating the certificate above and steps 1, 6 and 7 in section Getting down to building.</p> <p>Also, step 8 in section Getting down to building would be simply: <pre><code>$ ./gradlew winJRE64\n</code></pre></p> <p>Following steps: </p> <ol> <li> <p>Install the certificate in the smartcard on Windows:</p> <ul> <li>open the card in the proCertum CardManager application and go to the Common profile</li> <li>open the certificate</li> <li>click on Install</li> </ul> <p>It's not clear the first step is a mandatory step, but just in case.</p> </li> <li> <p>Download one of the Windows SDK's (e.g. the Windows 11 one from the Visual Studio Installer): you need just one single executable called <code>signtool.exe</code>.</p> </li> <li> <p>Sign the executable, e.g. <code>OmegaT_5.7.3_Windows_64.exe</code>, with SHA1 timestamp:     <pre><code>signtool.exe sign /n \"cApStAn\" /t http://time.certum.pl/ /fd sha1 /v OmegaT_5.7.3_Windows_64.exe\n</code></pre></p> </li> <li> <p>Sign the same executable now with SHA2 timestamp as well (dual signing - seems to be a requirement):     <pre><code>signtool.exe sign /n \"cApStAn\" /tr http://time.certum.pl/ /td sha256 /fd sha256 /as /v OmegaT_5.7.3_Windows_64.exe\n</code></pre> Notes:</p> </li> <li> <p><code>OmegaT_5.7.3_Windows_64.exe</code> is both the input file and the output file, so if you'd like to keep an unsigned version, make a copy first.</p> </li> <li>\"cApStAn\" is the name of the certificate.</li> </ol>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/win64-jre-signed-build/#references", "title": "References", "text": "<ul> <li>OmegaT 4.3.1 - User's Guide &gt; Building OmegaT From Source</li> <li>OmegaT 6.0.0 - User Manual &gt; Build OmegaT</li> <li>omegat-org &gt; omegat &gt; docs_devel &gt; Building OmegaT</li> <li>omegat-org &gt; omegat &gt; docs_devel &gt; Building and testing the installer package</li> <li>Open Source Code Signing - set</li> <li>omegat-org &gt; omegat &gt; docs_devel &gt; Code signing how-to</li> <li>amake/innosetup-docker</li> </ul>", "tags": ["Audience\ua789Tech"]}, {"location": "tools/omegat/word-count-analysis-discrepancies/", "title": "Word count analysis -- discrepancies in CAT tools", "text": "<p>Word count analysis depend on the definition of \"word\", which (for the purposes of word count analyses of source texts in Latin alphabet) is considered to be a unit of text between word boundaries (e.g. spacing and punctuation symbols). </p> <p>However, different tools will use different parameters to count words, so it's not realistic to expect reports from different tools to be always identical. If you add tags (e.g. <code>&lt;b&gt;</code>) or escaped tags (e.g. <code>&amp;lt;b&amp;gt;</code>) to the equation, this gets more complex. </p> <p>For example:</p> <ul> <li>memoQ has a simple approach: it simply counts chunks of text between spaces and does not consider escaped tags as unitary tokens.</li> <li>OmegaT counts escaped tags as unitary tokens but for example considers the Saxon genitives as independent words.</li> <li>Rainbow ignores escaped tags and considers Saxon genitives as a suffix, thus as part of the preceding word.</li> </ul> <p>Therefore, the string <code>wall\u2019s&amp;lt;br /&amp;gt;</code> will yield totally different counts in the three tools considered above:</p> memoQ OmegaT Rainbow 2 words 3 words 1 word wall\u2019s&amp;lt;br /&amp;gt; wall\u2019s&amp;lt;br /&amp;gt; wall\u2019s&amp;lt;br /&amp;gt; <p>Other characters might be differently estimated too. The example above does not mean to be comprehensive. </p>"}, {"location": "tools/tickets/howto/", "title": "How to update the issues tracker", "text": "<ol> <li>Add the new ticket(s) to the <code>OmegaT_issues.xlsx</code> file, save when done</li> <li>Save as <code>OmegaT_issues_nopw.xlsx</code> (no password), making sure columns G,H,I are removed and that the file is not password-locked</li> <li>Within folder <code>capstanlqc/ttt_docs/docs/tools/tickets</code> (where the reports and the script sit), run <code>python tickets_xls2md.py</code> to update the markdown document</li> <li>Commit changes</li> </ol>"}, {"location": "tools/tickets/omegat-tickets/", "title": "OmegaT and Okapi tickets opened since 2020", "text": "Created # Tool Title Type Status 2025-07-11 #20 Okapi\u00a0plugin Numerotation of tags in xliff filter RFE Open 2025-07-11 #276 Okapi plugin XLIFF 2 filter -- formatting lost in target BUG Open 2025-07-10 #275 Okapi plugin Protected entries in XLIFF show translation as source text BUG Open 2025-06-06 #1782 OmegaT Separate Statistics for Context-Bound (ICE/101%) and Exact (100%) Matches RFE Open 2025-01-20 #1388 Okapi ITS filtering messes up EOL in target files BUG Resolved 2024-12-03 #1277 OmegaT Concurrency issue in COMPILE-triggered scripts in team projects BUG Open! 2024-11-13 #1768 OmegaT Make the segment marker customizable in Preferences RFE Open! 2024-11-08 #1766 OmegaT Customize segment properties fields RFE Open! 2024-10-03 #1374 Okapi Unescaped closing angle bracket in ITS-excluded target content BUG Open 2024-09-28 #274 Okapi plugin Translated and final segments in XLIFF 2.0 BUG Open! 2024-07-15 #273 Okapi plugin Filter plugin v. 1.13-1.45 breaks backward compatibility for ID-bound alternative translations BUG Open! 2024-07-15 #272 Okapi plugin Filter plugin v. 1.13-1.45 breaks backward compatibility for tags BUG Open! 2024-07-10 #1754 OmegaT Let user decide the maximum number of TM matches displayed RFE Open! 2024-06-26 #1752 OmegaT Dynamic subfilter in text search results RFE Open 2025-05-07 #1745 OmegaT Enforced translations are read-only RFE Open! 2024-04-29 #1743 OmegaT Commit specified files on SAVE or COMPILE RFE Open! 2024-04-12 #1258 OmegaT \"This is a Subversion repository\" if wrong password on AWS repo BUG Open 2024-04-08 #271 Okapi\u00a0plugin Extraneous tags which are not escaped in XML target file BUG Resolved 2024-03-14 #2 OmegaT\u00a05.7.2 Tag issues check does not flag missing tags in NEXT repetitions BUG Open 2024-03-12 #1349 Okapi OpenXML: equations not extracted RFE Open 2023-11-08 #1725 OmegaT Trim authentication details in team projects RFE Open! 2023-10-31 #1724 OmegaT Block creation of target files only if the SELECTED issues are found RFE Open! 2023-10-24 #1722 OmegaT console-translate mode (CLI) to download mapped files RFE Open 2023-11-06 #1226 OmegaT Target files include recent edits in enforced translations BUG Open!!! 2023-11-03 #1225 OmegaT List of issues stays hidden in the background BUG Open! 2023-10-14 #1720 OmegaT Download team project with shallow history RFE Open 2023-09-30 #1323 Okapi Protected entries in XLIFF show translation as source text BUG Open 2023-09-01 #30 OmegaT Protect segment based on XLIFF status RFE Open 2023-08-31 #1712 OmegaT Remove old buggy \"Resolve conflicts\" dialog (and keep the new \"Merge\" one) RFE Open 2023-08-31 #1215 OmegaT Protected entries in XLIFF show translation as source text BUG Invalid 2023-08-07 #1214 OmegaT Extraneous tags which are not escaped in XML target file BUG Transfered 2023-08-07 #1213 OmegaT Selection of match for pre-translation varies through different OS's BUG Resolved 2023-08-07 #1212 OmegaT Random selection of match for pre-translation depending on TMX file paths BUG Resolved 2023-07-17 #1202 OmegaT Error 403 when accessing different repo with different creds in same domain BUG Open! 2023-07-12 #27 tmx comments provider T&amp;A notes: T&amp;A note is \"null\" if the target language doesn't match RFE Open! 2023-07-12 #26 tmx comments provider T&amp;A notes: source text in notes/notes.tmx used as the note RFE Open! 2023-07-11 #1201 OmegaT -1 instead of repo name in repository credentials BUG Open! 2023-07-11 #1200 OmegaT Closing a new project does not register pre-populated translations BUG Open! 2023-07-03 #1708 OmegaT Improve colors in the list of project files RFE Open 2023-06-27 #1185 OmegaT Saving does not register pre-translation in new projects BUG Open!! 2023-06-17 #11 plugin-omt-package NoClassDefFoundError when packing project in OmegaT 6.1.0 BUG Resolved 2023-05-23 #1309 Okapi XML filter does not extract resname if unit contains HTML block-level tags BUG Resolved? 2023-05-23 #1176 OmegaT The COMPILE event is fired after the target commit BUG Resolved 2023-05-18 #1171 OmegaT Enforced translations lose background color BUG Open 2023-05-03 #1164 OmegaT Auto-populated translations disappear when a segment gets activated BUG Resolved 2023-05-03 #9 plugin-omt-package Add property in config to remove mappings (to pack as offline project) RFE Resolved 2023-04-28 #1163 OmegaT Project not loaded if it contains DTD internal entities BUG Resolved 2023-04-25 #1695 OmegaT Generate JSON format stastics file when save RFE Resolved 2023-04-24 #1161 OmegaT \"Set empty translation\" does not work in XML file BUG Open 2023-04-12 #1690 OmegaT \"Commit target files\" also commits stats file to repo RFE Resolved 2023-03-22 #1155 OmegaT Option \"Insert the source text\" enabled on its own BUG Resolved 2023-03-08 #1150 OmegaT Tags cannot be deleted in RTL languages BUG Open!! 2023-03-08 #1151 OmegaT Tag drag-and-drop duplicates tag in RTL text BUG Open!! 2023-03-06 #1200 Okapi XML filter adds tags arounb nnbsp by default BUG Open+ 2023-02-24 #1681 OmegaT Straight quotes match curly quotes RFE Open 2023-02-16 #51 Okapi plugin Translation displayed as source text if state=\"final\" with Okapi XLIFF filter BUG Open! 2023-02-15 #1142 OmegaT Translation displayed as source text if state=\"final\" with Okapi XLIFF filter BUG Invalid 2023-02-13 #8 plugin-omt-package Only DEFAULT project folders are packed correctly RFE Open 2023-02-10 #1674 OmegaT Remove custom tags issues and flagged text from mandatory tag check RFE Open! 2023-02-07 #1672 OmegaT Hide tag-only segments RFE Open!! 2023-01-26 #1669 OmegaT Remove leadinga and trailing tags with Okapi filters RFE Open!! 2023-01-26 #1670 OmegaT Reuse credentials in team projects RFE Resolved? 2023-01-23 #1184 Okapi Fractions in Word file are not extracted BUG Open! 2023-01-22 #49 Okapi plugin Use resname as segment identifier (instead of correlative number) RFE Resolved 2023-01-20 #1140 OmegaT Context-bound matches are ignored in /tm/auto Bug Resolved 2023-01-03 #1132 OmegaT OmegaT CLI gets stuck at missing empty folders when run on team project Bug Open! 2022-11-14 #1125 OmegaT OmegaT's main window is sent to unplugged monitor Bug Open 2022-10-24 #1641 OmegaT Navigate between segments inserted from /tm/auto and /tm/enforce RFE Open 2022-10-21 #1124 OmegaT Local project does not update after remote masking some files Bug Open!! 2022-10-10 #1122 OmegaT Tag color is obfuscated if target language uses RTL script Bug Open? 2022-07-15 #43 Okapi\u00a0plugin Tag tooltips do not show the locked text Bug Resolved 2922-07-06 #1622 OmegaT Option to give or revoke full writing access to team project users RFF Open 2022-06-28 #38 Okapi\u00a0plugin OpenXML filter for OmegaT gives error when opening Excel file with embedded HTML Bug Open! 2022-06-27 #1621 OmegaT Add notes as <code>&lt;note&gt;</code> in target XLIFF file RFF Open! 2022-05-12 #1616 OmegaT Non-unique IDs when segmenting text blocks extracted by Okapi OpenXML RFE Open! 2022-05-14 #37 Okapi\u00a0plugin HTML sub-filter in JSON filter not working in OmegaT Bug Resolved 2022-04-08 #36 Okapi plugin Alternative translations do not work for repetitions within paragraphs Bug Open! 2022-05-31 #1101 OmegaT No ID-bound matching in /tm/tmx2source RFE Resolved? 2022-05-24 #1099 OmegaT Absolute paths used in search results from TMs Bug Resolved 2022-05-24 #1098 OmegaT The \"file names\" option does not work in search results from TMs Bug Resolved 2022-05-12 #1617 OmegaT handling ID-bound alternative translations more efficiently RFE Open 2022-03-02 #1092 OmegaT Enforced ID-bound alternative translations not recognized Bug Resolved 2022-02-22 #1128 Okapi Table filter: Merge step does not keep edited translation Bug Open! 2022-02-21 #1090 OmegaT Fails to load TM using <code>&lt;ph&gt;</code> tags Bug Open 2022-02-16 #1608 OmegaT Add notes to the translator in /tm/notes/foo.tmx RFF Resolved 2022-01-19 #35 Okapi\u00a0plugin Improve tags conversion to match OmegaT tags better RFE Open? 2021-09-24 #1070 OmegaT Unexpected enforced translation (first match) in OmegaT 4.3 Bug Open 2021-09-21 #1592 OmegaT Option to choose how matches are sorted (asc or desc) RFE Open~ 2021-09-21 #1591 OmegaT Option to export project's master TMs when pressing Ctrl+D RFF Resolved 2021-06-25 #1578 OmegaT Do not propose source text as match from other languages RFF Open 2021-05-10 #41 Okapi\u00a0plugin Unable to set <code>&lt;EMPTY&gt;</code> translation in OmegaT with Okapi filter OpenXML Bug Open? 2021-05-09 #42 Okapi\u00a0plugin Error parsing XML content (with OpenXML filter in OmegaT) Bug Open! 2021-05-09 #1566 OmegaT Replace glossary hits when inserting fuzzy match RFF Open 2021-05-05 #1565 OmegaT Give each segment a unique ID RFE Open!! 2021-04-30 #1046 OmegaT Glossary has wrong encoding for non-ASCII characters Bug Rejected 2021-03-24 #1559 OmegaT Validate tags when leaving a segment only for that segment RFF Open! 2021-03-02 #1038 OmegaT \"Remove leading/trailing tags\" removes tags that are not a tag pair Bug Open 2021-02-16 #1037 OmegaT Next Unique Segment shortcut conflicts with Log Out on Mac Bug Open 2021-02-04 #1020 OmegaT OpenXML filter for OmegaT gives error when opening Excel file with embedded HTML Bug Transfered 2021-01-22 #1032 OmegaT OmegaT ignores system variable %appdata% on Windows Bug Open 2021-01-20 #1546 OmegaT Include OMT plugin in the vanilla installation RFF Open! 2020-12-10 #1027 OmegaT Resolve Conflicts dialog is useless when enforced matches are updated Bug Open 2020-12-10 #1529 OmegaT Folder scripts/application_close to run scripts when OmegaT closes RFF Open 2020-11-27 #1527 OmegaT Do not export untranslated segments RFE Open 2020-11-13 #558 OmegaT Incorrect display of RTL segments in the Fuzzy Matches pane Bug Open 2020-11-11 #1005 Okapi XLIFF filter (for OmegaT) hides files with DOCTYPE including URL Bug Invalid 2020-10-28 #1020 OmegaT Project file filters are not preserved Bug Open 2020-09-29 #993 Okapi Okapi XLIFF filter for OmegaT registers/expects segment IDs that break ID-bound matches Bug Open 2020-09-21 #1520 OmegaT Two many locations for user-added plugins RFE Rejected 2020-09-21 #1519 OmegaT OmegaT uses wrong/old version of plugin in case of conflict RFE Resolved 2020-08-14 #969 Okapi Resname (from XLIFF) appears in the comment field in OmegaT RFE Open~ 2020-07-16 #1003 OmegaT Matches containing non-alphabetical text are ignored in TM leverage Bug Resolved 2020-08-21 #1015 OmegaT Matches ignored if the two locales have the same language subtag Bug Open 2020-07-16 #1002 OmegaT Choice of GUI language during re-installation is ignored Bug Resolved 2020-07-04 #1471 OmegaT \"Full segment\" option in search dialog RFE Open 2020-06-28 #1497 OmegaT Automatically create system-wide TM repository RFF Open 2020-06-13 #947 Okapi OpenXML Filter: improve the segmentation quality and merge with complex script formatting RFE Open 2020-04-27 #933 Okapi OpenXML filter: formatting issues in Arabic translation (RTL) Bug Resolved 2020-04-26 #932 Okapi Hook for OmegaT translation kit not working anymore Bug Open! 2020-04-15 #931 Okapi OpenXML Filter: remove redundant BIDI properties clarification in RTL RFE Open 2020-04-08 #987 OmegaT \"Use as default translation\" does not work Bug Open 2020-03-01 #988 OmegaT RLE and LRE control characters not visible in editor Bug Resolved 2020-02-24 #982 OmegaT Layout issues in target Word files in Arabic Bug Open 2020-01-27 #979 OmegaT Arabic fuzzy matches not wrapped in FM pane Bug Open 2020-01-27 #977 OmegaT Character and tag are glued together in Arabic Bug Open 2020-01-22 #975 OmegaT ID-binding context damaged with Olifant-edited TMX files Bug Open 2019-04-29 #1445 OmegaT Multiple-value input/editor for custom tags RFF Open 2019-04-29 #1444 OmegaT Enhancing number update when inserting fuzzy matches RFF Open 2019-03-16 #1427 OmegaT Project-specific custom tag definition RFF Open 2018-04-13 #23 Okapi\u00a0plugin Translation registered as same as source not taken into account Bug Open! 2018-04-13 #22 Okapi\u00a0plugin Segment set as <code>&lt;EMPTY&gt;</code> not empty in XLIFF Bug Fixed? 2017-04-17 #18 Okapi\u00a0plugin Set the state of the target to 'translated' when saving RFE Open! 2016-03-28 #1207 OmegaT Treat custom tags as OmegaT tags when calculating match estimates RFF Open 2006-11-07 #245 OmegaT Formatting shortcuts RFE Open"}, {"location": "profiles/", "title": "Profiles", "text": ""}, {"location": "profiles/#audience-tech", "title": "Audience\ua789 Tech", "text": "<ul> <li>Errors</li> </ul>"}, {"location": "profiles/#audiencetech", "title": "Audience\ua789Tech", "text": "<ul> <li>Auxiliary tools (installation)</li> <li>AutoHotKey</li> <li>TMX Editor</li> <li>OmegaT main-capstan</li> <li>Creating a signed OmegaT installer</li> </ul>"}, {"location": "profiles/#audienceuser", "title": "Audience\ua789User", "text": "<ul> <li>\ud83d\udc64 Create folder structure</li> <li>Auxiliary tools (installation)</li> <li>AutoHotKey</li> <li>OmegaT tips and tricks</li> <li>Autotext</li> <li>No-break spaces</li> </ul>"}]}